// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: ssl_gc_change.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ssl_gc_state";
import * as dependency_2 from "./ssl_gc_common";
import * as dependency_3 from "./ssl_gc_geometry";
import * as dependency_4 from "./ssl_gc_game_event";
import * as dependency_5 from "./ssl_gc_referee_message";
import * as dependency_6 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export class StateChange extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        statePre?: dependency_1.State;
        state?: dependency_1.State;
        change?: Change;
        timestamp?: dependency_6.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("statePre" in data && data.statePre != undefined) {
                this.statePre = data.statePre;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("change" in data && data.change != undefined) {
                this.change = data.change;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get statePre() {
        return pb_1.Message.getWrapperField(this, dependency_1.State, 2) as dependency_1.State;
    }
    set statePre(value: dependency_1.State) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasStatePre() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get state() {
        return pb_1.Message.getWrapperField(this, dependency_1.State, 3) as dependency_1.State;
    }
    set state(value: dependency_1.State) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasState() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get change() {
        return pb_1.Message.getWrapperField(this, Change, 4) as Change;
    }
    set change(value: Change) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasChange() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get timestamp() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 5) as dependency_6.google.protobuf.Timestamp;
    }
    set timestamp(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasTimestamp() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        id?: number;
        statePre?: ReturnType<typeof dependency_1.State.prototype.toObject>;
        state?: ReturnType<typeof dependency_1.State.prototype.toObject>;
        change?: ReturnType<typeof Change.prototype.toObject>;
        timestamp?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
    }): StateChange {
        const message = new StateChange({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.statePre != null) {
            message.statePre = dependency_1.State.fromObject(data.statePre);
        }
        if (data.state != null) {
            message.state = dependency_1.State.fromObject(data.state);
        }
        if (data.change != null) {
            message.change = Change.fromObject(data.change);
        }
        if (data.timestamp != null) {
            message.timestamp = dependency_6.google.protobuf.Timestamp.fromObject(data.timestamp);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            statePre?: ReturnType<typeof dependency_1.State.prototype.toObject>;
            state?: ReturnType<typeof dependency_1.State.prototype.toObject>;
            change?: ReturnType<typeof Change.prototype.toObject>;
            timestamp?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.statePre != null) {
            data.statePre = this.statePre.toObject();
        }
        if (this.state != null) {
            data.state = this.state.toObject();
        }
        if (this.change != null) {
            data.change = this.change.toObject();
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeInt32(1, this.id);
        if (this.hasStatePre)
            writer.writeMessage(2, this.statePre, () => this.statePre.serialize(writer));
        if (this.hasState)
            writer.writeMessage(3, this.state, () => this.state.serialize(writer));
        if (this.hasChange)
            writer.writeMessage(4, this.change, () => this.change.serialize(writer));
        if (this.hasTimestamp)
            writer.writeMessage(5, this.timestamp, () => this.timestamp.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateChange {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateChange();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.statePre, () => message.statePre = dependency_1.State.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.state, () => message.state = dependency_1.State.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.change, () => message.change = Change.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.timestamp, () => message.timestamp = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StateChange {
        return StateChange.deserialize(bytes);
    }
}
export class Change extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7, 8, 19, 9, 12, 13, 14, 15, 17, 18]];
    constructor(data?: any[] | ({
        origin?: string;
        revertible?: boolean;
    } & (({
        newCommandChange?: Change.NewCommand;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: Change.ChangeStage;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: Change.SetBallPlacementPos;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: Change.AddYellowCard;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: Change.AddRedCard;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: Change.YellowCardOver;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: Change.AddGameEvent;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: Change.AddPassiveGameEvent;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: Change.AddProposal;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: Change.UpdateConfig;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: Change.UpdateTeamState;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: Change.SwitchColors;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: Change.Revert;
        newGameStateChange?: never;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: Change.NewGameState;
        acceptProposalGroupChange?: never;
    } | {
        newCommandChange?: never;
        changeStageChange?: never;
        setBallPlacementPosChange?: never;
        addYellowCardChange?: never;
        addRedCardChange?: never;
        yellowCardOverChange?: never;
        addGameEventChange?: never;
        addPassiveGameEventChange?: never;
        addProposalChange?: never;
        updateConfigChange?: never;
        updateTeamStateChange?: never;
        switchColorsChange?: never;
        revertChange?: never;
        newGameStateChange?: never;
        acceptProposalGroupChange?: Change.AcceptProposalGroup;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("origin" in data && data.origin != undefined) {
                this.origin = data.origin;
            }
            if ("revertible" in data && data.revertible != undefined) {
                this.revertible = data.revertible;
            }
            if ("newCommandChange" in data && data.newCommandChange != undefined) {
                this.newCommandChange = data.newCommandChange;
            }
            if ("changeStageChange" in data && data.changeStageChange != undefined) {
                this.changeStageChange = data.changeStageChange;
            }
            if ("setBallPlacementPosChange" in data && data.setBallPlacementPosChange != undefined) {
                this.setBallPlacementPosChange = data.setBallPlacementPosChange;
            }
            if ("addYellowCardChange" in data && data.addYellowCardChange != undefined) {
                this.addYellowCardChange = data.addYellowCardChange;
            }
            if ("addRedCardChange" in data && data.addRedCardChange != undefined) {
                this.addRedCardChange = data.addRedCardChange;
            }
            if ("yellowCardOverChange" in data && data.yellowCardOverChange != undefined) {
                this.yellowCardOverChange = data.yellowCardOverChange;
            }
            if ("addGameEventChange" in data && data.addGameEventChange != undefined) {
                this.addGameEventChange = data.addGameEventChange;
            }
            if ("addPassiveGameEventChange" in data && data.addPassiveGameEventChange != undefined) {
                this.addPassiveGameEventChange = data.addPassiveGameEventChange;
            }
            if ("addProposalChange" in data && data.addProposalChange != undefined) {
                this.addProposalChange = data.addProposalChange;
            }
            if ("updateConfigChange" in data && data.updateConfigChange != undefined) {
                this.updateConfigChange = data.updateConfigChange;
            }
            if ("updateTeamStateChange" in data && data.updateTeamStateChange != undefined) {
                this.updateTeamStateChange = data.updateTeamStateChange;
            }
            if ("switchColorsChange" in data && data.switchColorsChange != undefined) {
                this.switchColorsChange = data.switchColorsChange;
            }
            if ("revertChange" in data && data.revertChange != undefined) {
                this.revertChange = data.revertChange;
            }
            if ("newGameStateChange" in data && data.newGameStateChange != undefined) {
                this.newGameStateChange = data.newGameStateChange;
            }
            if ("acceptProposalGroupChange" in data && data.acceptProposalGroupChange != undefined) {
                this.acceptProposalGroupChange = data.acceptProposalGroupChange;
            }
        }
    }
    get origin() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set origin(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasOrigin() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get revertible() {
        return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
    }
    set revertible(value: boolean) {
        pb_1.Message.setField(this, 16, value);
    }
    get hasRevertible() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get newCommandChange() {
        return pb_1.Message.getWrapperField(this, Change.NewCommand, 2) as Change.NewCommand;
    }
    set newCommandChange(value: Change.NewCommand) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasNewCommandChange() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get changeStageChange() {
        return pb_1.Message.getWrapperField(this, Change.ChangeStage, 3) as Change.ChangeStage;
    }
    set changeStageChange(value: Change.ChangeStage) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasChangeStageChange() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get setBallPlacementPosChange() {
        return pb_1.Message.getWrapperField(this, Change.SetBallPlacementPos, 4) as Change.SetBallPlacementPos;
    }
    set setBallPlacementPosChange(value: Change.SetBallPlacementPos) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasSetBallPlacementPosChange() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get addYellowCardChange() {
        return pb_1.Message.getWrapperField(this, Change.AddYellowCard, 5) as Change.AddYellowCard;
    }
    set addYellowCardChange(value: Change.AddYellowCard) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get hasAddYellowCardChange() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get addRedCardChange() {
        return pb_1.Message.getWrapperField(this, Change.AddRedCard, 6) as Change.AddRedCard;
    }
    set addRedCardChange(value: Change.AddRedCard) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get hasAddRedCardChange() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get yellowCardOverChange() {
        return pb_1.Message.getWrapperField(this, Change.YellowCardOver, 7) as Change.YellowCardOver;
    }
    set yellowCardOverChange(value: Change.YellowCardOver) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get hasYellowCardOverChange() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get addGameEventChange() {
        return pb_1.Message.getWrapperField(this, Change.AddGameEvent, 8) as Change.AddGameEvent;
    }
    set addGameEventChange(value: Change.AddGameEvent) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get hasAddGameEventChange() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get addPassiveGameEventChange() {
        return pb_1.Message.getWrapperField(this, Change.AddPassiveGameEvent, 19) as Change.AddPassiveGameEvent;
    }
    set addPassiveGameEventChange(value: Change.AddPassiveGameEvent) {
        pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
    }
    get hasAddPassiveGameEventChange() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get addProposalChange() {
        return pb_1.Message.getWrapperField(this, Change.AddProposal, 9) as Change.AddProposal;
    }
    set addProposalChange(value: Change.AddProposal) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get hasAddProposalChange() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get updateConfigChange() {
        return pb_1.Message.getWrapperField(this, Change.UpdateConfig, 12) as Change.UpdateConfig;
    }
    set updateConfigChange(value: Change.UpdateConfig) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    get hasUpdateConfigChange() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get updateTeamStateChange() {
        return pb_1.Message.getWrapperField(this, Change.UpdateTeamState, 13) as Change.UpdateTeamState;
    }
    set updateTeamStateChange(value: Change.UpdateTeamState) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
    }
    get hasUpdateTeamStateChange() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get switchColorsChange() {
        return pb_1.Message.getWrapperField(this, Change.SwitchColors, 14) as Change.SwitchColors;
    }
    set switchColorsChange(value: Change.SwitchColors) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
    }
    get hasSwitchColorsChange() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get revertChange() {
        return pb_1.Message.getWrapperField(this, Change.Revert, 15) as Change.Revert;
    }
    set revertChange(value: Change.Revert) {
        pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
    }
    get hasRevertChange() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get newGameStateChange() {
        return pb_1.Message.getWrapperField(this, Change.NewGameState, 17) as Change.NewGameState;
    }
    set newGameStateChange(value: Change.NewGameState) {
        pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
    }
    get hasNewGameStateChange() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get acceptProposalGroupChange() {
        return pb_1.Message.getWrapperField(this, Change.AcceptProposalGroup, 18) as Change.AcceptProposalGroup;
    }
    set acceptProposalGroupChange(value: Change.AcceptProposalGroup) {
        pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
    }
    get hasAcceptProposalGroupChange() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get change() {
        const cases: {
            [index: number]: "none" | "newCommandChange" | "changeStageChange" | "setBallPlacementPosChange" | "addYellowCardChange" | "addRedCardChange" | "yellowCardOverChange" | "addGameEventChange" | "addPassiveGameEventChange" | "addProposalChange" | "updateConfigChange" | "updateTeamStateChange" | "switchColorsChange" | "revertChange" | "newGameStateChange" | "acceptProposalGroupChange";
        } = {
            0: "none",
            2: "newCommandChange",
            3: "changeStageChange",
            4: "setBallPlacementPosChange",
            5: "addYellowCardChange",
            6: "addRedCardChange",
            7: "yellowCardOverChange",
            8: "addGameEventChange",
            19: "addPassiveGameEventChange",
            9: "addProposalChange",
            12: "updateConfigChange",
            13: "updateTeamStateChange",
            14: "switchColorsChange",
            15: "revertChange",
            17: "newGameStateChange",
            18: "acceptProposalGroupChange"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7, 8, 19, 9, 12, 13, 14, 15, 17, 18])];
    }
    static fromObject(data: {
        origin?: string;
        revertible?: boolean;
        newCommandChange?: ReturnType<typeof Change.NewCommand.prototype.toObject>;
        changeStageChange?: ReturnType<typeof Change.ChangeStage.prototype.toObject>;
        setBallPlacementPosChange?: ReturnType<typeof Change.SetBallPlacementPos.prototype.toObject>;
        addYellowCardChange?: ReturnType<typeof Change.AddYellowCard.prototype.toObject>;
        addRedCardChange?: ReturnType<typeof Change.AddRedCard.prototype.toObject>;
        yellowCardOverChange?: ReturnType<typeof Change.YellowCardOver.prototype.toObject>;
        addGameEventChange?: ReturnType<typeof Change.AddGameEvent.prototype.toObject>;
        addPassiveGameEventChange?: ReturnType<typeof Change.AddPassiveGameEvent.prototype.toObject>;
        addProposalChange?: ReturnType<typeof Change.AddProposal.prototype.toObject>;
        updateConfigChange?: ReturnType<typeof Change.UpdateConfig.prototype.toObject>;
        updateTeamStateChange?: ReturnType<typeof Change.UpdateTeamState.prototype.toObject>;
        switchColorsChange?: ReturnType<typeof Change.SwitchColors.prototype.toObject>;
        revertChange?: ReturnType<typeof Change.Revert.prototype.toObject>;
        newGameStateChange?: ReturnType<typeof Change.NewGameState.prototype.toObject>;
        acceptProposalGroupChange?: ReturnType<typeof Change.AcceptProposalGroup.prototype.toObject>;
    }): Change {
        const message = new Change({});
        if (data.origin != null) {
            message.origin = data.origin;
        }
        if (data.revertible != null) {
            message.revertible = data.revertible;
        }
        if (data.newCommandChange != null) {
            message.newCommandChange = Change.NewCommand.fromObject(data.newCommandChange);
        }
        if (data.changeStageChange != null) {
            message.changeStageChange = Change.ChangeStage.fromObject(data.changeStageChange);
        }
        if (data.setBallPlacementPosChange != null) {
            message.setBallPlacementPosChange = Change.SetBallPlacementPos.fromObject(data.setBallPlacementPosChange);
        }
        if (data.addYellowCardChange != null) {
            message.addYellowCardChange = Change.AddYellowCard.fromObject(data.addYellowCardChange);
        }
        if (data.addRedCardChange != null) {
            message.addRedCardChange = Change.AddRedCard.fromObject(data.addRedCardChange);
        }
        if (data.yellowCardOverChange != null) {
            message.yellowCardOverChange = Change.YellowCardOver.fromObject(data.yellowCardOverChange);
        }
        if (data.addGameEventChange != null) {
            message.addGameEventChange = Change.AddGameEvent.fromObject(data.addGameEventChange);
        }
        if (data.addPassiveGameEventChange != null) {
            message.addPassiveGameEventChange = Change.AddPassiveGameEvent.fromObject(data.addPassiveGameEventChange);
        }
        if (data.addProposalChange != null) {
            message.addProposalChange = Change.AddProposal.fromObject(data.addProposalChange);
        }
        if (data.updateConfigChange != null) {
            message.updateConfigChange = Change.UpdateConfig.fromObject(data.updateConfigChange);
        }
        if (data.updateTeamStateChange != null) {
            message.updateTeamStateChange = Change.UpdateTeamState.fromObject(data.updateTeamStateChange);
        }
        if (data.switchColorsChange != null) {
            message.switchColorsChange = Change.SwitchColors.fromObject(data.switchColorsChange);
        }
        if (data.revertChange != null) {
            message.revertChange = Change.Revert.fromObject(data.revertChange);
        }
        if (data.newGameStateChange != null) {
            message.newGameStateChange = Change.NewGameState.fromObject(data.newGameStateChange);
        }
        if (data.acceptProposalGroupChange != null) {
            message.acceptProposalGroupChange = Change.AcceptProposalGroup.fromObject(data.acceptProposalGroupChange);
        }
        return message;
    }
    toObject() {
        const data: {
            origin?: string;
            revertible?: boolean;
            newCommandChange?: ReturnType<typeof Change.NewCommand.prototype.toObject>;
            changeStageChange?: ReturnType<typeof Change.ChangeStage.prototype.toObject>;
            setBallPlacementPosChange?: ReturnType<typeof Change.SetBallPlacementPos.prototype.toObject>;
            addYellowCardChange?: ReturnType<typeof Change.AddYellowCard.prototype.toObject>;
            addRedCardChange?: ReturnType<typeof Change.AddRedCard.prototype.toObject>;
            yellowCardOverChange?: ReturnType<typeof Change.YellowCardOver.prototype.toObject>;
            addGameEventChange?: ReturnType<typeof Change.AddGameEvent.prototype.toObject>;
            addPassiveGameEventChange?: ReturnType<typeof Change.AddPassiveGameEvent.prototype.toObject>;
            addProposalChange?: ReturnType<typeof Change.AddProposal.prototype.toObject>;
            updateConfigChange?: ReturnType<typeof Change.UpdateConfig.prototype.toObject>;
            updateTeamStateChange?: ReturnType<typeof Change.UpdateTeamState.prototype.toObject>;
            switchColorsChange?: ReturnType<typeof Change.SwitchColors.prototype.toObject>;
            revertChange?: ReturnType<typeof Change.Revert.prototype.toObject>;
            newGameStateChange?: ReturnType<typeof Change.NewGameState.prototype.toObject>;
            acceptProposalGroupChange?: ReturnType<typeof Change.AcceptProposalGroup.prototype.toObject>;
        } = {};
        if (this.origin != null) {
            data.origin = this.origin;
        }
        if (this.revertible != null) {
            data.revertible = this.revertible;
        }
        if (this.newCommandChange != null) {
            data.newCommandChange = this.newCommandChange.toObject();
        }
        if (this.changeStageChange != null) {
            data.changeStageChange = this.changeStageChange.toObject();
        }
        if (this.setBallPlacementPosChange != null) {
            data.setBallPlacementPosChange = this.setBallPlacementPosChange.toObject();
        }
        if (this.addYellowCardChange != null) {
            data.addYellowCardChange = this.addYellowCardChange.toObject();
        }
        if (this.addRedCardChange != null) {
            data.addRedCardChange = this.addRedCardChange.toObject();
        }
        if (this.yellowCardOverChange != null) {
            data.yellowCardOverChange = this.yellowCardOverChange.toObject();
        }
        if (this.addGameEventChange != null) {
            data.addGameEventChange = this.addGameEventChange.toObject();
        }
        if (this.addPassiveGameEventChange != null) {
            data.addPassiveGameEventChange = this.addPassiveGameEventChange.toObject();
        }
        if (this.addProposalChange != null) {
            data.addProposalChange = this.addProposalChange.toObject();
        }
        if (this.updateConfigChange != null) {
            data.updateConfigChange = this.updateConfigChange.toObject();
        }
        if (this.updateTeamStateChange != null) {
            data.updateTeamStateChange = this.updateTeamStateChange.toObject();
        }
        if (this.switchColorsChange != null) {
            data.switchColorsChange = this.switchColorsChange.toObject();
        }
        if (this.revertChange != null) {
            data.revertChange = this.revertChange.toObject();
        }
        if (this.newGameStateChange != null) {
            data.newGameStateChange = this.newGameStateChange.toObject();
        }
        if (this.acceptProposalGroupChange != null) {
            data.acceptProposalGroupChange = this.acceptProposalGroupChange.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOrigin && this.origin.length)
            writer.writeString(1, this.origin);
        if (this.hasRevertible)
            writer.writeBool(16, this.revertible);
        if (this.hasNewCommandChange)
            writer.writeMessage(2, this.newCommandChange, () => this.newCommandChange.serialize(writer));
        if (this.hasChangeStageChange)
            writer.writeMessage(3, this.changeStageChange, () => this.changeStageChange.serialize(writer));
        if (this.hasSetBallPlacementPosChange)
            writer.writeMessage(4, this.setBallPlacementPosChange, () => this.setBallPlacementPosChange.serialize(writer));
        if (this.hasAddYellowCardChange)
            writer.writeMessage(5, this.addYellowCardChange, () => this.addYellowCardChange.serialize(writer));
        if (this.hasAddRedCardChange)
            writer.writeMessage(6, this.addRedCardChange, () => this.addRedCardChange.serialize(writer));
        if (this.hasYellowCardOverChange)
            writer.writeMessage(7, this.yellowCardOverChange, () => this.yellowCardOverChange.serialize(writer));
        if (this.hasAddGameEventChange)
            writer.writeMessage(8, this.addGameEventChange, () => this.addGameEventChange.serialize(writer));
        if (this.hasAddPassiveGameEventChange)
            writer.writeMessage(19, this.addPassiveGameEventChange, () => this.addPassiveGameEventChange.serialize(writer));
        if (this.hasAddProposalChange)
            writer.writeMessage(9, this.addProposalChange, () => this.addProposalChange.serialize(writer));
        if (this.hasUpdateConfigChange)
            writer.writeMessage(12, this.updateConfigChange, () => this.updateConfigChange.serialize(writer));
        if (this.hasUpdateTeamStateChange)
            writer.writeMessage(13, this.updateTeamStateChange, () => this.updateTeamStateChange.serialize(writer));
        if (this.hasSwitchColorsChange)
            writer.writeMessage(14, this.switchColorsChange, () => this.switchColorsChange.serialize(writer));
        if (this.hasRevertChange)
            writer.writeMessage(15, this.revertChange, () => this.revertChange.serialize(writer));
        if (this.hasNewGameStateChange)
            writer.writeMessage(17, this.newGameStateChange, () => this.newGameStateChange.serialize(writer));
        if (this.hasAcceptProposalGroupChange)
            writer.writeMessage(18, this.acceptProposalGroupChange, () => this.acceptProposalGroupChange.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Change {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Change();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.origin = reader.readString();
                    break;
                case 16:
                    message.revertible = reader.readBool();
                    break;
                case 2:
                    reader.readMessage(message.newCommandChange, () => message.newCommandChange = Change.NewCommand.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.changeStageChange, () => message.changeStageChange = Change.ChangeStage.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.setBallPlacementPosChange, () => message.setBallPlacementPosChange = Change.SetBallPlacementPos.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.addYellowCardChange, () => message.addYellowCardChange = Change.AddYellowCard.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.addRedCardChange, () => message.addRedCardChange = Change.AddRedCard.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.yellowCardOverChange, () => message.yellowCardOverChange = Change.YellowCardOver.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.addGameEventChange, () => message.addGameEventChange = Change.AddGameEvent.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.addPassiveGameEventChange, () => message.addPassiveGameEventChange = Change.AddPassiveGameEvent.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.addProposalChange, () => message.addProposalChange = Change.AddProposal.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.updateConfigChange, () => message.updateConfigChange = Change.UpdateConfig.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.updateTeamStateChange, () => message.updateTeamStateChange = Change.UpdateTeamState.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.switchColorsChange, () => message.switchColorsChange = Change.SwitchColors.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.revertChange, () => message.revertChange = Change.Revert.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.newGameStateChange, () => message.newGameStateChange = Change.NewGameState.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.acceptProposalGroupChange, () => message.acceptProposalGroupChange = Change.AcceptProposalGroup.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Change {
        return Change.deserialize(bytes);
    }
}
export namespace Change {
    export class NewCommand extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            command?: dependency_1.Command;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
            }
        }
        get command() {
            return pb_1.Message.getWrapperField(this, dependency_1.Command, 1) as dependency_1.Command;
        }
        set command(value: dependency_1.Command) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasCommand() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            command?: ReturnType<typeof dependency_1.Command.prototype.toObject>;
        }): NewCommand {
            const message = new NewCommand({});
            if (data.command != null) {
                message.command = dependency_1.Command.fromObject(data.command);
            }
            return message;
        }
        toObject() {
            const data: {
                command?: ReturnType<typeof dependency_1.Command.prototype.toObject>;
            } = {};
            if (this.command != null) {
                data.command = this.command.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasCommand)
                writer.writeMessage(1, this.command, () => this.command.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewCommand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewCommand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.command, () => message.command = dependency_1.Command.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewCommand {
            return NewCommand.deserialize(bytes);
        }
    }
    export class ChangeStage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            newStage?: dependency_5.Referee.Stage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("newStage" in data && data.newStage != undefined) {
                    this.newStage = data.newStage;
                }
            }
        }
        get newStage() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_5.Referee.Stage.NORMAL_FIRST_HALF_PRE) as dependency_5.Referee.Stage;
        }
        set newStage(value: dependency_5.Referee.Stage) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasNewStage() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            newStage?: dependency_5.Referee.Stage;
        }): ChangeStage {
            const message = new ChangeStage({});
            if (data.newStage != null) {
                message.newStage = data.newStage;
            }
            return message;
        }
        toObject() {
            const data: {
                newStage?: dependency_5.Referee.Stage;
            } = {};
            if (this.newStage != null) {
                data.newStage = this.newStage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasNewStage)
                writer.writeEnum(1, this.newStage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeStage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeStage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.newStage = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeStage {
            return ChangeStage.deserialize(bytes);
        }
    }
    export class SetBallPlacementPos extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pos?: dependency_3.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
            }
        }
        get pos() {
            return pb_1.Message.getWrapperField(this, dependency_3.Vector2, 1) as dependency_3.Vector2;
        }
        set pos(value: dependency_3.Vector2) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasPos() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pos?: ReturnType<typeof dependency_3.Vector2.prototype.toObject>;
        }): SetBallPlacementPos {
            const message = new SetBallPlacementPos({});
            if (data.pos != null) {
                message.pos = dependency_3.Vector2.fromObject(data.pos);
            }
            return message;
        }
        toObject() {
            const data: {
                pos?: ReturnType<typeof dependency_3.Vector2.prototype.toObject>;
            } = {};
            if (this.pos != null) {
                data.pos = this.pos.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasPos)
                writer.writeMessage(1, this.pos, () => this.pos.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetBallPlacementPos {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetBallPlacementPos();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pos, () => message.pos = dependency_3.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetBallPlacementPos {
            return SetBallPlacementPos.deserialize(bytes);
        }
    }
    export class AddYellowCard extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            forTeam?: dependency_2.Team;
            causedByGameEvent?: dependency_4.GameEvent;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("forTeam" in data && data.forTeam != undefined) {
                    this.forTeam = data.forTeam;
                }
                if ("causedByGameEvent" in data && data.causedByGameEvent != undefined) {
                    this.causedByGameEvent = data.causedByGameEvent;
                }
            }
        }
        get forTeam() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.Team.UNKNOWN) as dependency_2.Team;
        }
        set forTeam(value: dependency_2.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasForTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get causedByGameEvent() {
            return pb_1.Message.getWrapperField(this, dependency_4.GameEvent, 2) as dependency_4.GameEvent;
        }
        set causedByGameEvent(value: dependency_4.GameEvent) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasCausedByGameEvent() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            forTeam?: dependency_2.Team;
            causedByGameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
        }): AddYellowCard {
            const message = new AddYellowCard({});
            if (data.forTeam != null) {
                message.forTeam = data.forTeam;
            }
            if (data.causedByGameEvent != null) {
                message.causedByGameEvent = dependency_4.GameEvent.fromObject(data.causedByGameEvent);
            }
            return message;
        }
        toObject() {
            const data: {
                forTeam?: dependency_2.Team;
                causedByGameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
            } = {};
            if (this.forTeam != null) {
                data.forTeam = this.forTeam;
            }
            if (this.causedByGameEvent != null) {
                data.causedByGameEvent = this.causedByGameEvent.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasForTeam)
                writer.writeEnum(1, this.forTeam);
            if (this.hasCausedByGameEvent)
                writer.writeMessage(2, this.causedByGameEvent, () => this.causedByGameEvent.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddYellowCard {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddYellowCard();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.forTeam = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.causedByGameEvent, () => message.causedByGameEvent = dependency_4.GameEvent.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddYellowCard {
            return AddYellowCard.deserialize(bytes);
        }
    }
    export class AddRedCard extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            forTeam?: dependency_2.Team;
            causedByGameEvent?: dependency_4.GameEvent;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("forTeam" in data && data.forTeam != undefined) {
                    this.forTeam = data.forTeam;
                }
                if ("causedByGameEvent" in data && data.causedByGameEvent != undefined) {
                    this.causedByGameEvent = data.causedByGameEvent;
                }
            }
        }
        get forTeam() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.Team.UNKNOWN) as dependency_2.Team;
        }
        set forTeam(value: dependency_2.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasForTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get causedByGameEvent() {
            return pb_1.Message.getWrapperField(this, dependency_4.GameEvent, 2) as dependency_4.GameEvent;
        }
        set causedByGameEvent(value: dependency_4.GameEvent) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasCausedByGameEvent() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            forTeam?: dependency_2.Team;
            causedByGameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
        }): AddRedCard {
            const message = new AddRedCard({});
            if (data.forTeam != null) {
                message.forTeam = data.forTeam;
            }
            if (data.causedByGameEvent != null) {
                message.causedByGameEvent = dependency_4.GameEvent.fromObject(data.causedByGameEvent);
            }
            return message;
        }
        toObject() {
            const data: {
                forTeam?: dependency_2.Team;
                causedByGameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
            } = {};
            if (this.forTeam != null) {
                data.forTeam = this.forTeam;
            }
            if (this.causedByGameEvent != null) {
                data.causedByGameEvent = this.causedByGameEvent.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasForTeam)
                writer.writeEnum(1, this.forTeam);
            if (this.hasCausedByGameEvent)
                writer.writeMessage(2, this.causedByGameEvent, () => this.causedByGameEvent.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddRedCard {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddRedCard();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.forTeam = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.causedByGameEvent, () => message.causedByGameEvent = dependency_4.GameEvent.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddRedCard {
            return AddRedCard.deserialize(bytes);
        }
    }
    export class YellowCardOver extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            forTeam?: dependency_2.Team;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("forTeam" in data && data.forTeam != undefined) {
                    this.forTeam = data.forTeam;
                }
            }
        }
        get forTeam() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.Team.UNKNOWN) as dependency_2.Team;
        }
        set forTeam(value: dependency_2.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasForTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            forTeam?: dependency_2.Team;
        }): YellowCardOver {
            const message = new YellowCardOver({});
            if (data.forTeam != null) {
                message.forTeam = data.forTeam;
            }
            return message;
        }
        toObject() {
            const data: {
                forTeam?: dependency_2.Team;
            } = {};
            if (this.forTeam != null) {
                data.forTeam = this.forTeam;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasForTeam)
                writer.writeEnum(1, this.forTeam);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): YellowCardOver {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new YellowCardOver();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.forTeam = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): YellowCardOver {
            return YellowCardOver.deserialize(bytes);
        }
    }
    export class AddGameEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gameEvent?: dependency_4.GameEvent;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gameEvent" in data && data.gameEvent != undefined) {
                    this.gameEvent = data.gameEvent;
                }
            }
        }
        get gameEvent() {
            return pb_1.Message.getWrapperField(this, dependency_4.GameEvent, 1) as dependency_4.GameEvent;
        }
        set gameEvent(value: dependency_4.GameEvent) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasGameEvent() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            gameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
        }): AddGameEvent {
            const message = new AddGameEvent({});
            if (data.gameEvent != null) {
                message.gameEvent = dependency_4.GameEvent.fromObject(data.gameEvent);
            }
            return message;
        }
        toObject() {
            const data: {
                gameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
            } = {};
            if (this.gameEvent != null) {
                data.gameEvent = this.gameEvent.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasGameEvent)
                writer.writeMessage(1, this.gameEvent, () => this.gameEvent.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddGameEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddGameEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.gameEvent, () => message.gameEvent = dependency_4.GameEvent.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddGameEvent {
            return AddGameEvent.deserialize(bytes);
        }
    }
    export class AddPassiveGameEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gameEvent?: dependency_4.GameEvent;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gameEvent" in data && data.gameEvent != undefined) {
                    this.gameEvent = data.gameEvent;
                }
            }
        }
        get gameEvent() {
            return pb_1.Message.getWrapperField(this, dependency_4.GameEvent, 1) as dependency_4.GameEvent;
        }
        set gameEvent(value: dependency_4.GameEvent) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasGameEvent() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            gameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
        }): AddPassiveGameEvent {
            const message = new AddPassiveGameEvent({});
            if (data.gameEvent != null) {
                message.gameEvent = dependency_4.GameEvent.fromObject(data.gameEvent);
            }
            return message;
        }
        toObject() {
            const data: {
                gameEvent?: ReturnType<typeof dependency_4.GameEvent.prototype.toObject>;
            } = {};
            if (this.gameEvent != null) {
                data.gameEvent = this.gameEvent.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasGameEvent)
                writer.writeMessage(1, this.gameEvent, () => this.gameEvent.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddPassiveGameEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddPassiveGameEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.gameEvent, () => message.gameEvent = dependency_4.GameEvent.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddPassiveGameEvent {
            return AddPassiveGameEvent.deserialize(bytes);
        }
    }
    export class AddProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal?: dependency_1.Proposal;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal" in data && data.proposal != undefined) {
                    this.proposal = data.proposal;
                }
            }
        }
        get proposal() {
            return pb_1.Message.getWrapperField(this, dependency_1.Proposal, 1) as dependency_1.Proposal;
        }
        set proposal(value: dependency_1.Proposal) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasProposal() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            proposal?: ReturnType<typeof dependency_1.Proposal.prototype.toObject>;
        }): AddProposal {
            const message = new AddProposal({});
            if (data.proposal != null) {
                message.proposal = dependency_1.Proposal.fromObject(data.proposal);
            }
            return message;
        }
        toObject() {
            const data: {
                proposal?: ReturnType<typeof dependency_1.Proposal.prototype.toObject>;
            } = {};
            if (this.proposal != null) {
                data.proposal = this.proposal.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasProposal)
                writer.writeMessage(1, this.proposal, () => this.proposal.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proposal, () => message.proposal = dependency_1.Proposal.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddProposal {
            return AddProposal.deserialize(bytes);
        }
    }
    export class AcceptProposalGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            groupId?: number;
            acceptedBy?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("acceptedBy" in data && data.acceptedBy != undefined) {
                    this.acceptedBy = data.acceptedBy;
                }
            }
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasGroupId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get acceptedBy() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set acceptedBy(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasAcceptedBy() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            groupId?: number;
            acceptedBy?: string;
        }): AcceptProposalGroup {
            const message = new AcceptProposalGroup({});
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.acceptedBy != null) {
                message.acceptedBy = data.acceptedBy;
            }
            return message;
        }
        toObject() {
            const data: {
                groupId?: number;
                acceptedBy?: string;
            } = {};
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.acceptedBy != null) {
                data.acceptedBy = this.acceptedBy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasGroupId)
                writer.writeUint32(1, this.groupId);
            if (this.hasAcceptedBy && this.acceptedBy.length)
                writer.writeString(2, this.acceptedBy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcceptProposalGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcceptProposalGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.groupId = reader.readUint32();
                        break;
                    case 2:
                        message.acceptedBy = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcceptProposalGroup {
            return AcceptProposalGroup.deserialize(bytes);
        }
    }
    export class UpdateConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            division?: dependency_2.Division;
            firstKickoffTeam?: dependency_2.Team;
            matchType?: dependency_5.MatchType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("division" in data && data.division != undefined) {
                    this.division = data.division;
                }
                if ("firstKickoffTeam" in data && data.firstKickoffTeam != undefined) {
                    this.firstKickoffTeam = data.firstKickoffTeam;
                }
                if ("matchType" in data && data.matchType != undefined) {
                    this.matchType = data.matchType;
                }
            }
        }
        get division() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.Division.DIV_UNKNOWN) as dependency_2.Division;
        }
        set division(value: dependency_2.Division) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasDivision() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get firstKickoffTeam() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Team.UNKNOWN) as dependency_2.Team;
        }
        set firstKickoffTeam(value: dependency_2.Team) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasFirstKickoffTeam() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get matchType() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_5.MatchType.UNKNOWN_MATCH) as dependency_5.MatchType;
        }
        set matchType(value: dependency_5.MatchType) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasMatchType() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            division?: dependency_2.Division;
            firstKickoffTeam?: dependency_2.Team;
            matchType?: dependency_5.MatchType;
        }): UpdateConfig {
            const message = new UpdateConfig({});
            if (data.division != null) {
                message.division = data.division;
            }
            if (data.firstKickoffTeam != null) {
                message.firstKickoffTeam = data.firstKickoffTeam;
            }
            if (data.matchType != null) {
                message.matchType = data.matchType;
            }
            return message;
        }
        toObject() {
            const data: {
                division?: dependency_2.Division;
                firstKickoffTeam?: dependency_2.Team;
                matchType?: dependency_5.MatchType;
            } = {};
            if (this.division != null) {
                data.division = this.division;
            }
            if (this.firstKickoffTeam != null) {
                data.firstKickoffTeam = this.firstKickoffTeam;
            }
            if (this.matchType != null) {
                data.matchType = this.matchType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasDivision)
                writer.writeEnum(1, this.division);
            if (this.hasFirstKickoffTeam)
                writer.writeEnum(2, this.firstKickoffTeam);
            if (this.hasMatchType)
                writer.writeEnum(4, this.matchType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.division = reader.readEnum();
                        break;
                    case 2:
                        message.firstKickoffTeam = reader.readEnum();
                        break;
                    case 4:
                        message.matchType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateConfig {
            return UpdateConfig.deserialize(bytes);
        }
    }
    export class UpdateTeamState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            forTeam?: dependency_2.Team;
            teamName?: string;
            goals?: number;
            goalkeeper?: number;
            timeoutsLeft?: number;
            timeoutTimeLeft?: string;
            onPositiveHalf?: boolean;
            ballPlacementFailures?: number;
            canPlaceBall?: boolean;
            challengeFlagsLeft?: number;
            requestsBotSubstitution?: boolean;
            requestsTimeout?: boolean;
            requestsChallenge?: boolean;
            requestsEmergencyStop?: boolean;
            yellowCard?: dependency_1.YellowCard;
            redCard?: dependency_1.RedCard;
            foul?: dependency_1.Foul;
            removeYellowCard?: number;
            removeRedCard?: number;
            removeFoul?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("forTeam" in data && data.forTeam != undefined) {
                    this.forTeam = data.forTeam;
                }
                if ("teamName" in data && data.teamName != undefined) {
                    this.teamName = data.teamName;
                }
                if ("goals" in data && data.goals != undefined) {
                    this.goals = data.goals;
                }
                if ("goalkeeper" in data && data.goalkeeper != undefined) {
                    this.goalkeeper = data.goalkeeper;
                }
                if ("timeoutsLeft" in data && data.timeoutsLeft != undefined) {
                    this.timeoutsLeft = data.timeoutsLeft;
                }
                if ("timeoutTimeLeft" in data && data.timeoutTimeLeft != undefined) {
                    this.timeoutTimeLeft = data.timeoutTimeLeft;
                }
                if ("onPositiveHalf" in data && data.onPositiveHalf != undefined) {
                    this.onPositiveHalf = data.onPositiveHalf;
                }
                if ("ballPlacementFailures" in data && data.ballPlacementFailures != undefined) {
                    this.ballPlacementFailures = data.ballPlacementFailures;
                }
                if ("canPlaceBall" in data && data.canPlaceBall != undefined) {
                    this.canPlaceBall = data.canPlaceBall;
                }
                if ("challengeFlagsLeft" in data && data.challengeFlagsLeft != undefined) {
                    this.challengeFlagsLeft = data.challengeFlagsLeft;
                }
                if ("requestsBotSubstitution" in data && data.requestsBotSubstitution != undefined) {
                    this.requestsBotSubstitution = data.requestsBotSubstitution;
                }
                if ("requestsTimeout" in data && data.requestsTimeout != undefined) {
                    this.requestsTimeout = data.requestsTimeout;
                }
                if ("requestsChallenge" in data && data.requestsChallenge != undefined) {
                    this.requestsChallenge = data.requestsChallenge;
                }
                if ("requestsEmergencyStop" in data && data.requestsEmergencyStop != undefined) {
                    this.requestsEmergencyStop = data.requestsEmergencyStop;
                }
                if ("yellowCard" in data && data.yellowCard != undefined) {
                    this.yellowCard = data.yellowCard;
                }
                if ("redCard" in data && data.redCard != undefined) {
                    this.redCard = data.redCard;
                }
                if ("foul" in data && data.foul != undefined) {
                    this.foul = data.foul;
                }
                if ("removeYellowCard" in data && data.removeYellowCard != undefined) {
                    this.removeYellowCard = data.removeYellowCard;
                }
                if ("removeRedCard" in data && data.removeRedCard != undefined) {
                    this.removeRedCard = data.removeRedCard;
                }
                if ("removeFoul" in data && data.removeFoul != undefined) {
                    this.removeFoul = data.removeFoul;
                }
            }
        }
        get forTeam() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.Team.UNKNOWN) as dependency_2.Team;
        }
        set forTeam(value: dependency_2.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasForTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get teamName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set teamName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasTeamName() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get goals() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set goals(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasGoals() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get goalkeeper() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set goalkeeper(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasGoalkeeper() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get timeoutsLeft() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timeoutsLeft(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasTimeoutsLeft() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get timeoutTimeLeft() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set timeoutTimeLeft(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get hasTimeoutTimeLeft() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get onPositiveHalf() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set onPositiveHalf(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get hasOnPositiveHalf() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get ballPlacementFailures() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set ballPlacementFailures(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get hasBallPlacementFailures() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get canPlaceBall() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set canPlaceBall(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get hasCanPlaceBall() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get challengeFlagsLeft() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set challengeFlagsLeft(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get hasChallengeFlagsLeft() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get requestsBotSubstitution() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set requestsBotSubstitution(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get hasRequestsBotSubstitution() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get requestsTimeout() {
            return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
        }
        set requestsTimeout(value: boolean) {
            pb_1.Message.setField(this, 17, value);
        }
        get hasRequestsTimeout() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get requestsChallenge() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set requestsChallenge(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get hasRequestsChallenge() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get requestsEmergencyStop() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set requestsEmergencyStop(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get hasRequestsEmergencyStop() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get yellowCard() {
            return pb_1.Message.getWrapperField(this, dependency_1.YellowCard, 20) as dependency_1.YellowCard;
        }
        set yellowCard(value: dependency_1.YellowCard) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasYellowCard() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get redCard() {
            return pb_1.Message.getWrapperField(this, dependency_1.RedCard, 12) as dependency_1.RedCard;
        }
        set redCard(value: dependency_1.RedCard) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasRedCard() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get foul() {
            return pb_1.Message.getWrapperField(this, dependency_1.Foul, 13) as dependency_1.Foul;
        }
        set foul(value: dependency_1.Foul) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasFoul() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get removeYellowCard() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set removeYellowCard(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get hasRemoveYellowCard() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get removeRedCard() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set removeRedCard(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get hasRemoveRedCard() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get removeFoul() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set removeFoul(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get hasRemoveFoul() {
            return pb_1.Message.getField(this, 16) != null;
        }
        static fromObject(data: {
            forTeam?: dependency_2.Team;
            teamName?: string;
            goals?: number;
            goalkeeper?: number;
            timeoutsLeft?: number;
            timeoutTimeLeft?: string;
            onPositiveHalf?: boolean;
            ballPlacementFailures?: number;
            canPlaceBall?: boolean;
            challengeFlagsLeft?: number;
            requestsBotSubstitution?: boolean;
            requestsTimeout?: boolean;
            requestsChallenge?: boolean;
            requestsEmergencyStop?: boolean;
            yellowCard?: ReturnType<typeof dependency_1.YellowCard.prototype.toObject>;
            redCard?: ReturnType<typeof dependency_1.RedCard.prototype.toObject>;
            foul?: ReturnType<typeof dependency_1.Foul.prototype.toObject>;
            removeYellowCard?: number;
            removeRedCard?: number;
            removeFoul?: number;
        }): UpdateTeamState {
            const message = new UpdateTeamState({});
            if (data.forTeam != null) {
                message.forTeam = data.forTeam;
            }
            if (data.teamName != null) {
                message.teamName = data.teamName;
            }
            if (data.goals != null) {
                message.goals = data.goals;
            }
            if (data.goalkeeper != null) {
                message.goalkeeper = data.goalkeeper;
            }
            if (data.timeoutsLeft != null) {
                message.timeoutsLeft = data.timeoutsLeft;
            }
            if (data.timeoutTimeLeft != null) {
                message.timeoutTimeLeft = data.timeoutTimeLeft;
            }
            if (data.onPositiveHalf != null) {
                message.onPositiveHalf = data.onPositiveHalf;
            }
            if (data.ballPlacementFailures != null) {
                message.ballPlacementFailures = data.ballPlacementFailures;
            }
            if (data.canPlaceBall != null) {
                message.canPlaceBall = data.canPlaceBall;
            }
            if (data.challengeFlagsLeft != null) {
                message.challengeFlagsLeft = data.challengeFlagsLeft;
            }
            if (data.requestsBotSubstitution != null) {
                message.requestsBotSubstitution = data.requestsBotSubstitution;
            }
            if (data.requestsTimeout != null) {
                message.requestsTimeout = data.requestsTimeout;
            }
            if (data.requestsChallenge != null) {
                message.requestsChallenge = data.requestsChallenge;
            }
            if (data.requestsEmergencyStop != null) {
                message.requestsEmergencyStop = data.requestsEmergencyStop;
            }
            if (data.yellowCard != null) {
                message.yellowCard = dependency_1.YellowCard.fromObject(data.yellowCard);
            }
            if (data.redCard != null) {
                message.redCard = dependency_1.RedCard.fromObject(data.redCard);
            }
            if (data.foul != null) {
                message.foul = dependency_1.Foul.fromObject(data.foul);
            }
            if (data.removeYellowCard != null) {
                message.removeYellowCard = data.removeYellowCard;
            }
            if (data.removeRedCard != null) {
                message.removeRedCard = data.removeRedCard;
            }
            if (data.removeFoul != null) {
                message.removeFoul = data.removeFoul;
            }
            return message;
        }
        toObject() {
            const data: {
                forTeam?: dependency_2.Team;
                teamName?: string;
                goals?: number;
                goalkeeper?: number;
                timeoutsLeft?: number;
                timeoutTimeLeft?: string;
                onPositiveHalf?: boolean;
                ballPlacementFailures?: number;
                canPlaceBall?: boolean;
                challengeFlagsLeft?: number;
                requestsBotSubstitution?: boolean;
                requestsTimeout?: boolean;
                requestsChallenge?: boolean;
                requestsEmergencyStop?: boolean;
                yellowCard?: ReturnType<typeof dependency_1.YellowCard.prototype.toObject>;
                redCard?: ReturnType<typeof dependency_1.RedCard.prototype.toObject>;
                foul?: ReturnType<typeof dependency_1.Foul.prototype.toObject>;
                removeYellowCard?: number;
                removeRedCard?: number;
                removeFoul?: number;
            } = {};
            if (this.forTeam != null) {
                data.forTeam = this.forTeam;
            }
            if (this.teamName != null) {
                data.teamName = this.teamName;
            }
            if (this.goals != null) {
                data.goals = this.goals;
            }
            if (this.goalkeeper != null) {
                data.goalkeeper = this.goalkeeper;
            }
            if (this.timeoutsLeft != null) {
                data.timeoutsLeft = this.timeoutsLeft;
            }
            if (this.timeoutTimeLeft != null) {
                data.timeoutTimeLeft = this.timeoutTimeLeft;
            }
            if (this.onPositiveHalf != null) {
                data.onPositiveHalf = this.onPositiveHalf;
            }
            if (this.ballPlacementFailures != null) {
                data.ballPlacementFailures = this.ballPlacementFailures;
            }
            if (this.canPlaceBall != null) {
                data.canPlaceBall = this.canPlaceBall;
            }
            if (this.challengeFlagsLeft != null) {
                data.challengeFlagsLeft = this.challengeFlagsLeft;
            }
            if (this.requestsBotSubstitution != null) {
                data.requestsBotSubstitution = this.requestsBotSubstitution;
            }
            if (this.requestsTimeout != null) {
                data.requestsTimeout = this.requestsTimeout;
            }
            if (this.requestsChallenge != null) {
                data.requestsChallenge = this.requestsChallenge;
            }
            if (this.requestsEmergencyStop != null) {
                data.requestsEmergencyStop = this.requestsEmergencyStop;
            }
            if (this.yellowCard != null) {
                data.yellowCard = this.yellowCard.toObject();
            }
            if (this.redCard != null) {
                data.redCard = this.redCard.toObject();
            }
            if (this.foul != null) {
                data.foul = this.foul.toObject();
            }
            if (this.removeYellowCard != null) {
                data.removeYellowCard = this.removeYellowCard;
            }
            if (this.removeRedCard != null) {
                data.removeRedCard = this.removeRedCard;
            }
            if (this.removeFoul != null) {
                data.removeFoul = this.removeFoul;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasForTeam)
                writer.writeEnum(1, this.forTeam);
            if (this.hasTeamName && this.teamName.length)
                writer.writeString(2, this.teamName);
            if (this.hasGoals)
                writer.writeInt32(3, this.goals);
            if (this.hasGoalkeeper)
                writer.writeInt32(4, this.goalkeeper);
            if (this.hasTimeoutsLeft)
                writer.writeInt32(5, this.timeoutsLeft);
            if (this.hasTimeoutTimeLeft && this.timeoutTimeLeft.length)
                writer.writeString(6, this.timeoutTimeLeft);
            if (this.hasOnPositiveHalf)
                writer.writeBool(7, this.onPositiveHalf);
            if (this.hasBallPlacementFailures)
                writer.writeInt32(8, this.ballPlacementFailures);
            if (this.hasCanPlaceBall)
                writer.writeBool(9, this.canPlaceBall);
            if (this.hasChallengeFlagsLeft)
                writer.writeInt32(21, this.challengeFlagsLeft);
            if (this.hasRequestsBotSubstitution)
                writer.writeBool(10, this.requestsBotSubstitution);
            if (this.hasRequestsTimeout)
                writer.writeBool(17, this.requestsTimeout);
            if (this.hasRequestsChallenge)
                writer.writeBool(18, this.requestsChallenge);
            if (this.hasRequestsEmergencyStop)
                writer.writeBool(19, this.requestsEmergencyStop);
            if (this.hasYellowCard)
                writer.writeMessage(20, this.yellowCard, () => this.yellowCard.serialize(writer));
            if (this.hasRedCard)
                writer.writeMessage(12, this.redCard, () => this.redCard.serialize(writer));
            if (this.hasFoul)
                writer.writeMessage(13, this.foul, () => this.foul.serialize(writer));
            if (this.hasRemoveYellowCard)
                writer.writeUint32(14, this.removeYellowCard);
            if (this.hasRemoveRedCard)
                writer.writeUint32(15, this.removeRedCard);
            if (this.hasRemoveFoul)
                writer.writeUint32(16, this.removeFoul);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTeamState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTeamState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.forTeam = reader.readEnum();
                        break;
                    case 2:
                        message.teamName = reader.readString();
                        break;
                    case 3:
                        message.goals = reader.readInt32();
                        break;
                    case 4:
                        message.goalkeeper = reader.readInt32();
                        break;
                    case 5:
                        message.timeoutsLeft = reader.readInt32();
                        break;
                    case 6:
                        message.timeoutTimeLeft = reader.readString();
                        break;
                    case 7:
                        message.onPositiveHalf = reader.readBool();
                        break;
                    case 8:
                        message.ballPlacementFailures = reader.readInt32();
                        break;
                    case 9:
                        message.canPlaceBall = reader.readBool();
                        break;
                    case 21:
                        message.challengeFlagsLeft = reader.readInt32();
                        break;
                    case 10:
                        message.requestsBotSubstitution = reader.readBool();
                        break;
                    case 17:
                        message.requestsTimeout = reader.readBool();
                        break;
                    case 18:
                        message.requestsChallenge = reader.readBool();
                        break;
                    case 19:
                        message.requestsEmergencyStop = reader.readBool();
                        break;
                    case 20:
                        reader.readMessage(message.yellowCard, () => message.yellowCard = dependency_1.YellowCard.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.redCard, () => message.redCard = dependency_1.RedCard.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.foul, () => message.foul = dependency_1.Foul.deserialize(reader));
                        break;
                    case 14:
                        message.removeYellowCard = reader.readUint32();
                        break;
                    case 15:
                        message.removeRedCard = reader.readUint32();
                        break;
                    case 16:
                        message.removeFoul = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTeamState {
            return UpdateTeamState.deserialize(bytes);
        }
    }
    export class SwitchColors extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SwitchColors {
            const message = new SwitchColors({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchColors {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchColors();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwitchColors {
            return SwitchColors.deserialize(bytes);
        }
    }
    export class Revert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            changeId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("changeId" in data && data.changeId != undefined) {
                    this.changeId = data.changeId;
                }
            }
        }
        get changeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set changeId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasChangeId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            changeId?: number;
        }): Revert {
            const message = new Revert({});
            if (data.changeId != null) {
                message.changeId = data.changeId;
            }
            return message;
        }
        toObject() {
            const data: {
                changeId?: number;
            } = {};
            if (this.changeId != null) {
                data.changeId = this.changeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasChangeId)
                writer.writeInt32(1, this.changeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Revert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Revert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.changeId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Revert {
            return Revert.deserialize(bytes);
        }
    }
    export class NewGameState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gameState?: dependency_1.GameState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gameState" in data && data.gameState != undefined) {
                    this.gameState = data.gameState;
                }
            }
        }
        get gameState() {
            return pb_1.Message.getWrapperField(this, dependency_1.GameState, 1) as dependency_1.GameState;
        }
        set gameState(value: dependency_1.GameState) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasGameState() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            gameState?: ReturnType<typeof dependency_1.GameState.prototype.toObject>;
        }): NewGameState {
            const message = new NewGameState({});
            if (data.gameState != null) {
                message.gameState = dependency_1.GameState.fromObject(data.gameState);
            }
            return message;
        }
        toObject() {
            const data: {
                gameState?: ReturnType<typeof dependency_1.GameState.prototype.toObject>;
            } = {};
            if (this.gameState != null) {
                data.gameState = this.gameState.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasGameState)
                writer.writeMessage(1, this.gameState, () => this.gameState.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewGameState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewGameState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.gameState, () => message.gameState = dependency_1.GameState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewGameState {
            return NewGameState.deserialize(bytes);
        }
    }
}
