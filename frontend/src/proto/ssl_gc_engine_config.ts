// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: ssl_gc_engine_config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Config extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        gameEventBehavior: Map<string, Config.Behavior>;
        autoRefConfigs: Map<string, AutoRefConfig>;
        activeTrackerSource?: string;
        teams: string[];
        autoContinue?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.gameEventBehavior = data.gameEventBehavior;
            this.autoRefConfigs = data.autoRefConfigs;
            if ("activeTrackerSource" in data && data.activeTrackerSource != undefined) {
                this.activeTrackerSource = data.activeTrackerSource;
            }
            this.teams = data.teams;
            if ("autoContinue" in data && data.autoContinue != undefined) {
                this.autoContinue = data.autoContinue;
            }
        }
        if (!this.gameEventBehavior)
            this.gameEventBehavior = new Map();
        if (!this.autoRefConfigs)
            this.autoRefConfigs = new Map();
    }
    get gameEventBehavior() {
        return pb_1.Message.getField(this, 1) as any as Map<string, Config.Behavior>;
    }
    set gameEventBehavior(value: Map<string, Config.Behavior>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    get autoRefConfigs() {
        return pb_1.Message.getField(this, 2) as any as Map<string, AutoRefConfig>;
    }
    set autoRefConfigs(value: Map<string, AutoRefConfig>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    get activeTrackerSource() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set activeTrackerSource(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get hasActiveTrackerSource() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get teams() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set teams(value: string[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get autoContinue() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set autoContinue(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get hasAutoContinue() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        gameEventBehavior?: {
            [key: string]: Config.Behavior;
        };
        autoRefConfigs?: {
            [key: string]: ReturnType<typeof AutoRefConfig.prototype.toObject>;
        };
        activeTrackerSource?: string;
        teams: string[];
        autoContinue?: boolean;
    }): Config {
        const message = new Config({
            gameEventBehavior: new Map(Object.entries(data.gameEventBehavior)),
            autoRefConfigs: new Map(Object.entries(data.autoRefConfigs).map(([key, value]) => [key, AutoRefConfig.fromObject(value)])),
            teams: data.teams
        });
        if (data.activeTrackerSource != null) {
            message.activeTrackerSource = data.activeTrackerSource;
        }
        if (data.autoContinue != null) {
            message.autoContinue = data.autoContinue;
        }
        return message;
    }
    toObject() {
        const data: {
            gameEventBehavior?: {
                [key: string]: Config.Behavior;
            };
            autoRefConfigs?: {
                [key: string]: ReturnType<typeof AutoRefConfig.prototype.toObject>;
            };
            activeTrackerSource?: string;
            teams: string[];
            autoContinue?: boolean;
        } = {
            teams: this.teams
        };
        if (this.gameEventBehavior.size > 0) {
            data.gameEventBehavior = Object.fromEntries(this.gameEventBehavior);
        }
        if (this.autoRefConfigs.size > 0) {
            data.autoRefConfigs = Object.fromEntries(Array.from(this.autoRefConfigs).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.activeTrackerSource != null) {
            data.activeTrackerSource = this.activeTrackerSource;
        }
        if (this.autoContinue != null) {
            data.autoContinue = this.autoContinue;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.gameEventBehavior) {
            writer.writeMessage(1, this.gameEventBehavior, () => {
                writer.writeString(1, key);
                writer.writeEnum(2, value);
            });
        }
        for (const [key, value] of this.autoRefConfigs) {
            writer.writeMessage(2, this.autoRefConfigs, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.hasActiveTrackerSource && this.activeTrackerSource.length)
            writer.writeString(3, this.activeTrackerSource);
        if (this.teams.length)
            writer.writeRepeatedString(4, this.teams);
        if (this.hasAutoContinue)
            writer.writeBool(5, this.autoContinue);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.gameEventBehavior as any, reader, reader.readString, reader.readEnum));
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.autoRefConfigs as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = AutoRefConfig.deserialize(reader));
                        return value;
                    }));
                    break;
                case 3:
                    message.activeTrackerSource = reader.readString();
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                    break;
                case 5:
                    message.autoContinue = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Config {
        return Config.deserialize(bytes);
    }
}
export namespace Config {
    export enum Behavior {
        BEHAVIOR_UNKNOWN = 0,
        BEHAVIOR_ACCEPT = 1,
        BEHAVIOR_ACCEPT_MAJORITY = 2,
        BEHAVIOR_PROPOSE_ONLY = 3,
        BEHAVIOR_LOG = 4,
        BEHAVIOR_IGNORE = 5
    }
}
export class AutoRefConfig extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        gameEventBehavior: Map<string, AutoRefConfig.Behavior>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.gameEventBehavior = data.gameEventBehavior;
        }
        if (!this.gameEventBehavior)
            this.gameEventBehavior = new Map();
    }
    get gameEventBehavior() {
        return pb_1.Message.getField(this, 1) as any as Map<string, AutoRefConfig.Behavior>;
    }
    set gameEventBehavior(value: Map<string, AutoRefConfig.Behavior>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        gameEventBehavior?: {
            [key: string]: AutoRefConfig.Behavior;
        };
    }): AutoRefConfig {
        const message = new AutoRefConfig({
            gameEventBehavior: new Map(Object.entries(data.gameEventBehavior))
        });
        return message;
    }
    toObject() {
        const data: {
            gameEventBehavior?: {
                [key: string]: AutoRefConfig.Behavior;
            };
        } = {};
        if (this.gameEventBehavior.size > 0) {
            data.gameEventBehavior = Object.fromEntries(this.gameEventBehavior);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.gameEventBehavior) {
            writer.writeMessage(1, this.gameEventBehavior, () => {
                writer.writeString(1, key);
                writer.writeEnum(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoRefConfig {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoRefConfig();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.gameEventBehavior as any, reader, reader.readString, reader.readEnum));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AutoRefConfig {
        return AutoRefConfig.deserialize(bytes);
    }
}
export namespace AutoRefConfig {
    export enum Behavior {
        BEHAVIOR_UNKNOWN = 0,
        BEHAVIOR_ACCEPT = 1,
        BEHAVIOR_LOG = 2,
        BEHAVIOR_IGNORE = 3
    }
}
