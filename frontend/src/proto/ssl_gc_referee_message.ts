// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: ssl_gc_referee_message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ssl_gc_game_event";
import * as pb_1 from "google-protobuf";
export enum MatchType {
    UNKNOWN_MATCH = 0,
    GROUP_PHASE = 1,
    ELIMINATION_PHASE = 2,
    FRIENDLY = 3
}
export class Referee extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sourceIdentifier?: string;
        matchType?: MatchType;
        packetTimestamp: number;
        stage: Referee.Stage;
        stageTimeLeft?: number;
        command: Referee.Command;
        commandCounter: number;
        commandTimestamp: number;
        yellow: Referee.TeamInfo;
        blue: Referee.TeamInfo;
        designatedPosition?: Referee.Point;
        blueTeamOnPositiveHalf?: boolean;
        nextCommand?: Referee.Command;
        gameEvents: dependency_1.GameEvent[];
        gameEventProposals: GameEventProposalGroup[];
        currentActionTimeRemaining?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [16, 17], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sourceIdentifier" in data && data.sourceIdentifier != undefined) {
                this.sourceIdentifier = data.sourceIdentifier;
            }
            if ("matchType" in data && data.matchType != undefined) {
                this.matchType = data.matchType;
            }
            this.packetTimestamp = data.packetTimestamp;
            this.stage = data.stage;
            if ("stageTimeLeft" in data && data.stageTimeLeft != undefined) {
                this.stageTimeLeft = data.stageTimeLeft;
            }
            this.command = data.command;
            this.commandCounter = data.commandCounter;
            this.commandTimestamp = data.commandTimestamp;
            this.yellow = data.yellow;
            this.blue = data.blue;
            if ("designatedPosition" in data && data.designatedPosition != undefined) {
                this.designatedPosition = data.designatedPosition;
            }
            if ("blueTeamOnPositiveHalf" in data && data.blueTeamOnPositiveHalf != undefined) {
                this.blueTeamOnPositiveHalf = data.blueTeamOnPositiveHalf;
            }
            if ("nextCommand" in data && data.nextCommand != undefined) {
                this.nextCommand = data.nextCommand;
            }
            this.gameEvents = data.gameEvents;
            this.gameEventProposals = data.gameEventProposals;
            if ("currentActionTimeRemaining" in data && data.currentActionTimeRemaining != undefined) {
                this.currentActionTimeRemaining = data.currentActionTimeRemaining;
            }
        }
    }
    get sourceIdentifier() {
        return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
    }
    set sourceIdentifier(value: string) {
        pb_1.Message.setField(this, 18, value);
    }
    get hasSourceIdentifier() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get matchType() {
        return pb_1.Message.getFieldWithDefault(this, 19, MatchType.UNKNOWN_MATCH) as MatchType;
    }
    set matchType(value: MatchType) {
        pb_1.Message.setField(this, 19, value);
    }
    get hasMatchType() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get packetTimestamp() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set packetTimestamp(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasPacketTimestamp() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get stage() {
        return pb_1.Message.getField(this, 2) as Referee.Stage;
    }
    set stage(value: Referee.Stage) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasStage() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get stageTimeLeft() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set stageTimeLeft(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get hasStageTimeLeft() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get command() {
        return pb_1.Message.getField(this, 4) as Referee.Command;
    }
    set command(value: Referee.Command) {
        pb_1.Message.setField(this, 4, value);
    }
    get hasCommand() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get commandCounter() {
        return pb_1.Message.getField(this, 5) as number;
    }
    set commandCounter(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get hasCommandCounter() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get commandTimestamp() {
        return pb_1.Message.getField(this, 6) as number;
    }
    set commandTimestamp(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get hasCommandTimestamp() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get yellow() {
        return pb_1.Message.getWrapperField(this, Referee.TeamInfo, 7) as Referee.TeamInfo;
    }
    set yellow(value: Referee.TeamInfo) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasYellow() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get blue() {
        return pb_1.Message.getWrapperField(this, Referee.TeamInfo, 8) as Referee.TeamInfo;
    }
    set blue(value: Referee.TeamInfo) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get hasBlue() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get designatedPosition() {
        return pb_1.Message.getWrapperField(this, Referee.Point, 9) as Referee.Point;
    }
    set designatedPosition(value: Referee.Point) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get hasDesignatedPosition() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get blueTeamOnPositiveHalf() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set blueTeamOnPositiveHalf(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get hasBlueTeamOnPositiveHalf() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get nextCommand() {
        return pb_1.Message.getFieldWithDefault(this, 12, Referee.Command.HALT) as Referee.Command;
    }
    set nextCommand(value: Referee.Command) {
        pb_1.Message.setField(this, 12, value);
    }
    get hasNextCommand() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get gameEvents() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.GameEvent, 16) as dependency_1.GameEvent[];
    }
    set gameEvents(value: dependency_1.GameEvent[]) {
        pb_1.Message.setRepeatedWrapperField(this, 16, value);
    }
    get gameEventProposals() {
        return pb_1.Message.getRepeatedWrapperField(this, GameEventProposalGroup, 17) as GameEventProposalGroup[];
    }
    set gameEventProposals(value: GameEventProposalGroup[]) {
        pb_1.Message.setRepeatedWrapperField(this, 17, value);
    }
    get currentActionTimeRemaining() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set currentActionTimeRemaining(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get hasCurrentActionTimeRemaining() {
        return pb_1.Message.getField(this, 15) != null;
    }
    static fromObject(data: {
        sourceIdentifier?: string;
        matchType?: MatchType;
        packetTimestamp?: number;
        stage?: Referee.Stage;
        stageTimeLeft?: number;
        command?: Referee.Command;
        commandCounter?: number;
        commandTimestamp?: number;
        yellow?: ReturnType<typeof Referee.TeamInfo.prototype.toObject>;
        blue?: ReturnType<typeof Referee.TeamInfo.prototype.toObject>;
        designatedPosition?: ReturnType<typeof Referee.Point.prototype.toObject>;
        blueTeamOnPositiveHalf?: boolean;
        nextCommand?: Referee.Command;
        gameEvents?: ReturnType<typeof dependency_1.GameEvent.prototype.toObject>[];
        gameEventProposals?: ReturnType<typeof GameEventProposalGroup.prototype.toObject>[];
        currentActionTimeRemaining?: number;
    }): Referee {
        const message = new Referee({
            packetTimestamp: data.packetTimestamp,
            stage: data.stage,
            command: data.command,
            commandCounter: data.commandCounter,
            commandTimestamp: data.commandTimestamp,
            yellow: Referee.TeamInfo.fromObject(data.yellow),
            blue: Referee.TeamInfo.fromObject(data.blue),
            gameEvents: data.gameEvents.map(item => dependency_1.GameEvent.fromObject(item)),
            gameEventProposals: data.gameEventProposals.map(item => GameEventProposalGroup.fromObject(item))
        });
        if (data.sourceIdentifier != null) {
            message.sourceIdentifier = data.sourceIdentifier;
        }
        if (data.matchType != null) {
            message.matchType = data.matchType;
        }
        if (data.stageTimeLeft != null) {
            message.stageTimeLeft = data.stageTimeLeft;
        }
        if (data.designatedPosition != null) {
            message.designatedPosition = Referee.Point.fromObject(data.designatedPosition);
        }
        if (data.blueTeamOnPositiveHalf != null) {
            message.blueTeamOnPositiveHalf = data.blueTeamOnPositiveHalf;
        }
        if (data.nextCommand != null) {
            message.nextCommand = data.nextCommand;
        }
        if (data.currentActionTimeRemaining != null) {
            message.currentActionTimeRemaining = data.currentActionTimeRemaining;
        }
        return message;
    }
    toObject() {
        const data: {
            sourceIdentifier?: string;
            matchType?: MatchType;
            packetTimestamp?: number;
            stage?: Referee.Stage;
            stageTimeLeft?: number;
            command?: Referee.Command;
            commandCounter?: number;
            commandTimestamp?: number;
            yellow?: ReturnType<typeof Referee.TeamInfo.prototype.toObject>;
            blue?: ReturnType<typeof Referee.TeamInfo.prototype.toObject>;
            designatedPosition?: ReturnType<typeof Referee.Point.prototype.toObject>;
            blueTeamOnPositiveHalf?: boolean;
            nextCommand?: Referee.Command;
            gameEvents?: ReturnType<typeof dependency_1.GameEvent.prototype.toObject>[];
            gameEventProposals?: ReturnType<typeof GameEventProposalGroup.prototype.toObject>[];
            currentActionTimeRemaining?: number;
        } = {};
        if (this.sourceIdentifier != null) {
            data.sourceIdentifier = this.sourceIdentifier;
        }
        if (this.matchType != null) {
            data.matchType = this.matchType;
        }
        if (this.packetTimestamp != null) {
            data.packetTimestamp = this.packetTimestamp;
        }
        if (this.stage != null) {
            data.stage = this.stage;
        }
        if (this.stageTimeLeft != null) {
            data.stageTimeLeft = this.stageTimeLeft;
        }
        if (this.command != null) {
            data.command = this.command;
        }
        if (this.commandCounter != null) {
            data.commandCounter = this.commandCounter;
        }
        if (this.commandTimestamp != null) {
            data.commandTimestamp = this.commandTimestamp;
        }
        if (this.yellow != null) {
            data.yellow = this.yellow.toObject();
        }
        if (this.blue != null) {
            data.blue = this.blue.toObject();
        }
        if (this.designatedPosition != null) {
            data.designatedPosition = this.designatedPosition.toObject();
        }
        if (this.blueTeamOnPositiveHalf != null) {
            data.blueTeamOnPositiveHalf = this.blueTeamOnPositiveHalf;
        }
        if (this.nextCommand != null) {
            data.nextCommand = this.nextCommand;
        }
        if (this.gameEvents != null) {
            data.gameEvents = this.gameEvents.map((item: dependency_1.GameEvent) => item.toObject());
        }
        if (this.gameEventProposals != null) {
            data.gameEventProposals = this.gameEventProposals.map((item: GameEventProposalGroup) => item.toObject());
        }
        if (this.currentActionTimeRemaining != null) {
            data.currentActionTimeRemaining = this.currentActionTimeRemaining;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasSourceIdentifier && this.sourceIdentifier.length)
            writer.writeString(18, this.sourceIdentifier);
        if (this.hasMatchType)
            writer.writeEnum(19, this.matchType);
        if (this.hasPacketTimestamp)
            writer.writeUint64(1, this.packetTimestamp);
        if (this.hasStage)
            writer.writeEnum(2, this.stage);
        if (this.hasStageTimeLeft)
            writer.writeSint32(3, this.stageTimeLeft);
        if (this.hasCommand)
            writer.writeEnum(4, this.command);
        if (this.hasCommandCounter)
            writer.writeUint32(5, this.commandCounter);
        if (this.hasCommandTimestamp)
            writer.writeUint64(6, this.commandTimestamp);
        if (this.hasYellow)
            writer.writeMessage(7, this.yellow, () => this.yellow.serialize(writer));
        if (this.hasBlue)
            writer.writeMessage(8, this.blue, () => this.blue.serialize(writer));
        if (this.hasDesignatedPosition)
            writer.writeMessage(9, this.designatedPosition, () => this.designatedPosition.serialize(writer));
        if (this.hasBlueTeamOnPositiveHalf)
            writer.writeBool(10, this.blueTeamOnPositiveHalf);
        if (this.hasNextCommand)
            writer.writeEnum(12, this.nextCommand);
        if (this.gameEvents.length)
            writer.writeRepeatedMessage(16, this.gameEvents, (item: dependency_1.GameEvent) => item.serialize(writer));
        if (this.gameEventProposals.length)
            writer.writeRepeatedMessage(17, this.gameEventProposals, (item: GameEventProposalGroup) => item.serialize(writer));
        if (this.hasCurrentActionTimeRemaining)
            writer.writeInt32(15, this.currentActionTimeRemaining);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Referee {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Referee();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 18:
                    message.sourceIdentifier = reader.readString();
                    break;
                case 19:
                    message.matchType = reader.readEnum();
                    break;
                case 1:
                    message.packetTimestamp = reader.readUint64();
                    break;
                case 2:
                    message.stage = reader.readEnum();
                    break;
                case 3:
                    message.stageTimeLeft = reader.readSint32();
                    break;
                case 4:
                    message.command = reader.readEnum();
                    break;
                case 5:
                    message.commandCounter = reader.readUint32();
                    break;
                case 6:
                    message.commandTimestamp = reader.readUint64();
                    break;
                case 7:
                    reader.readMessage(message.yellow, () => message.yellow = Referee.TeamInfo.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.blue, () => message.blue = Referee.TeamInfo.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.designatedPosition, () => message.designatedPosition = Referee.Point.deserialize(reader));
                    break;
                case 10:
                    message.blueTeamOnPositiveHalf = reader.readBool();
                    break;
                case 12:
                    message.nextCommand = reader.readEnum();
                    break;
                case 16:
                    reader.readMessage(message.gameEvents, () => pb_1.Message.addToRepeatedWrapperField(message, 16, dependency_1.GameEvent.deserialize(reader), dependency_1.GameEvent));
                    break;
                case 17:
                    reader.readMessage(message.gameEventProposals, () => pb_1.Message.addToRepeatedWrapperField(message, 17, GameEventProposalGroup.deserialize(reader), GameEventProposalGroup));
                    break;
                case 15:
                    message.currentActionTimeRemaining = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Referee {
        return Referee.deserialize(bytes);
    }
}
export namespace Referee {
    export enum Stage {
        NORMAL_FIRST_HALF_PRE = 0,
        NORMAL_FIRST_HALF = 1,
        NORMAL_HALF_TIME = 2,
        NORMAL_SECOND_HALF_PRE = 3,
        NORMAL_SECOND_HALF = 4,
        EXTRA_TIME_BREAK = 5,
        EXTRA_FIRST_HALF_PRE = 6,
        EXTRA_FIRST_HALF = 7,
        EXTRA_HALF_TIME = 8,
        EXTRA_SECOND_HALF_PRE = 9,
        EXTRA_SECOND_HALF = 10,
        PENALTY_SHOOTOUT_BREAK = 11,
        PENALTY_SHOOTOUT = 12,
        POST_GAME = 13
    }
    export enum Command {
        HALT = 0,
        STOP = 1,
        NORMAL_START = 2,
        FORCE_START = 3,
        PREPARE_KICKOFF_YELLOW = 4,
        PREPARE_KICKOFF_BLUE = 5,
        PREPARE_PENALTY_YELLOW = 6,
        PREPARE_PENALTY_BLUE = 7,
        DIRECT_FREE_YELLOW = 8,
        DIRECT_FREE_BLUE = 9,
        /** @deprecated*/
        INDIRECT_FREE_YELLOW = 10,
        /** @deprecated*/
        INDIRECT_FREE_BLUE = 11,
        TIMEOUT_YELLOW = 12,
        TIMEOUT_BLUE = 13,
        /** @deprecated*/
        GOAL_YELLOW = 14,
        /** @deprecated*/
        GOAL_BLUE = 15,
        BALL_PLACEMENT_YELLOW = 16,
        BALL_PLACEMENT_BLUE = 17
    }
    export class TeamInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name: string;
            score: number;
            redCards: number;
            yellowCardTimes: number[];
            yellowCards: number;
            timeouts: number;
            timeoutTime: number;
            goalkeeper: number;
            foulCounter?: number;
            ballPlacementFailures?: number;
            canPlaceBall?: boolean;
            maxAllowedBots?: number;
            botSubstitutionIntent?: boolean;
            ballPlacementFailuresReached?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.name = data.name;
                this.score = data.score;
                this.redCards = data.redCards;
                this.yellowCardTimes = data.yellowCardTimes;
                this.yellowCards = data.yellowCards;
                this.timeouts = data.timeouts;
                this.timeoutTime = data.timeoutTime;
                this.goalkeeper = data.goalkeeper;
                if ("foulCounter" in data && data.foulCounter != undefined) {
                    this.foulCounter = data.foulCounter;
                }
                if ("ballPlacementFailures" in data && data.ballPlacementFailures != undefined) {
                    this.ballPlacementFailures = data.ballPlacementFailures;
                }
                if ("canPlaceBall" in data && data.canPlaceBall != undefined) {
                    this.canPlaceBall = data.canPlaceBall;
                }
                if ("maxAllowedBots" in data && data.maxAllowedBots != undefined) {
                    this.maxAllowedBots = data.maxAllowedBots;
                }
                if ("botSubstitutionIntent" in data && data.botSubstitutionIntent != undefined) {
                    this.botSubstitutionIntent = data.botSubstitutionIntent;
                }
                if ("ballPlacementFailuresReached" in data && data.ballPlacementFailuresReached != undefined) {
                    this.ballPlacementFailuresReached = data.ballPlacementFailuresReached;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasName() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get score() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasScore() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get redCards() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set redCards(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasRedCards() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get yellowCardTimes() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set yellowCardTimes(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get yellowCards() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set yellowCards(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasYellowCards() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get timeouts() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set timeouts(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get hasTimeouts() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get timeoutTime() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set timeoutTime(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get hasTimeoutTime() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get goalkeeper() {
            return pb_1.Message.getField(this, 8) as number;
        }
        set goalkeeper(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get hasGoalkeeper() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get foulCounter() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set foulCounter(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get hasFoulCounter() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get ballPlacementFailures() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set ballPlacementFailures(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get hasBallPlacementFailures() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get canPlaceBall() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set canPlaceBall(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get hasCanPlaceBall() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get maxAllowedBots() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set maxAllowedBots(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get hasMaxAllowedBots() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get botSubstitutionIntent() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set botSubstitutionIntent(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get hasBotSubstitutionIntent() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get ballPlacementFailuresReached() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set ballPlacementFailuresReached(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get hasBallPlacementFailuresReached() {
            return pb_1.Message.getField(this, 15) != null;
        }
        static fromObject(data: {
            name?: string;
            score?: number;
            redCards?: number;
            yellowCardTimes: number[];
            yellowCards?: number;
            timeouts?: number;
            timeoutTime?: number;
            goalkeeper?: number;
            foulCounter?: number;
            ballPlacementFailures?: number;
            canPlaceBall?: boolean;
            maxAllowedBots?: number;
            botSubstitutionIntent?: boolean;
            ballPlacementFailuresReached?: boolean;
        }): TeamInfo {
            const message = new TeamInfo({
                name: data.name,
                score: data.score,
                redCards: data.redCards,
                yellowCardTimes: data.yellowCardTimes,
                yellowCards: data.yellowCards,
                timeouts: data.timeouts,
                timeoutTime: data.timeoutTime,
                goalkeeper: data.goalkeeper
            });
            if (data.foulCounter != null) {
                message.foulCounter = data.foulCounter;
            }
            if (data.ballPlacementFailures != null) {
                message.ballPlacementFailures = data.ballPlacementFailures;
            }
            if (data.canPlaceBall != null) {
                message.canPlaceBall = data.canPlaceBall;
            }
            if (data.maxAllowedBots != null) {
                message.maxAllowedBots = data.maxAllowedBots;
            }
            if (data.botSubstitutionIntent != null) {
                message.botSubstitutionIntent = data.botSubstitutionIntent;
            }
            if (data.ballPlacementFailuresReached != null) {
                message.ballPlacementFailuresReached = data.ballPlacementFailuresReached;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                score?: number;
                redCards?: number;
                yellowCardTimes: number[];
                yellowCards?: number;
                timeouts?: number;
                timeoutTime?: number;
                goalkeeper?: number;
                foulCounter?: number;
                ballPlacementFailures?: number;
                canPlaceBall?: boolean;
                maxAllowedBots?: number;
                botSubstitutionIntent?: boolean;
                ballPlacementFailuresReached?: boolean;
            } = {
                yellowCardTimes: this.yellowCardTimes
            };
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            if (this.redCards != null) {
                data.redCards = this.redCards;
            }
            if (this.yellowCards != null) {
                data.yellowCards = this.yellowCards;
            }
            if (this.timeouts != null) {
                data.timeouts = this.timeouts;
            }
            if (this.timeoutTime != null) {
                data.timeoutTime = this.timeoutTime;
            }
            if (this.goalkeeper != null) {
                data.goalkeeper = this.goalkeeper;
            }
            if (this.foulCounter != null) {
                data.foulCounter = this.foulCounter;
            }
            if (this.ballPlacementFailures != null) {
                data.ballPlacementFailures = this.ballPlacementFailures;
            }
            if (this.canPlaceBall != null) {
                data.canPlaceBall = this.canPlaceBall;
            }
            if (this.maxAllowedBots != null) {
                data.maxAllowedBots = this.maxAllowedBots;
            }
            if (this.botSubstitutionIntent != null) {
                data.botSubstitutionIntent = this.botSubstitutionIntent;
            }
            if (this.ballPlacementFailuresReached != null) {
                data.ballPlacementFailuresReached = this.ballPlacementFailuresReached;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasName && this.name.length)
                writer.writeString(1, this.name);
            if (this.hasScore)
                writer.writeUint32(2, this.score);
            if (this.hasRedCards)
                writer.writeUint32(3, this.redCards);
            if (this.yellowCardTimes.length)
                writer.writePackedUint32(4, this.yellowCardTimes);
            if (this.hasYellowCards)
                writer.writeUint32(5, this.yellowCards);
            if (this.hasTimeouts)
                writer.writeUint32(6, this.timeouts);
            if (this.hasTimeoutTime)
                writer.writeUint32(7, this.timeoutTime);
            if (this.hasGoalkeeper)
                writer.writeUint32(8, this.goalkeeper);
            if (this.hasFoulCounter)
                writer.writeUint32(9, this.foulCounter);
            if (this.hasBallPlacementFailures)
                writer.writeUint32(10, this.ballPlacementFailures);
            if (this.hasCanPlaceBall)
                writer.writeBool(12, this.canPlaceBall);
            if (this.hasMaxAllowedBots)
                writer.writeUint32(13, this.maxAllowedBots);
            if (this.hasBotSubstitutionIntent)
                writer.writeBool(14, this.botSubstitutionIntent);
            if (this.hasBallPlacementFailuresReached)
                writer.writeBool(15, this.ballPlacementFailuresReached);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.score = reader.readUint32();
                        break;
                    case 3:
                        message.redCards = reader.readUint32();
                        break;
                    case 4:
                        message.yellowCardTimes = reader.readPackedUint32();
                        break;
                    case 5:
                        message.yellowCards = reader.readUint32();
                        break;
                    case 6:
                        message.timeouts = reader.readUint32();
                        break;
                    case 7:
                        message.timeoutTime = reader.readUint32();
                        break;
                    case 8:
                        message.goalkeeper = reader.readUint32();
                        break;
                    case 9:
                        message.foulCounter = reader.readUint32();
                        break;
                    case 10:
                        message.ballPlacementFailures = reader.readUint32();
                        break;
                    case 12:
                        message.canPlaceBall = reader.readBool();
                        break;
                    case 13:
                        message.maxAllowedBots = reader.readUint32();
                        break;
                    case 14:
                        message.botSubstitutionIntent = reader.readBool();
                        break;
                    case 15:
                        message.ballPlacementFailuresReached = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamInfo {
            return TeamInfo.deserialize(bytes);
        }
    }
    export class Point extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x: number;
            y: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.x = data.x;
                this.y = data.y;
            }
        }
        get x() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasX() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get y() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasY() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): Point {
            const message = new Point({
                x: data.x,
                y: data.y
            });
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasX)
                writer.writeFloat(1, this.x);
            if (this.hasY)
                writer.writeFloat(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Point {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Point();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Point {
            return Point.deserialize(bytes);
        }
    }
}
export class GameEventProposalGroup extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        gameEvent: dependency_1.GameEvent[];
        accepted?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.gameEvent = data.gameEvent;
            if ("accepted" in data && data.accepted != undefined) {
                this.accepted = data.accepted;
            }
        }
    }
    get gameEvent() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.GameEvent, 1) as dependency_1.GameEvent[];
    }
    set gameEvent(value: dependency_1.GameEvent[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get accepted() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set accepted(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasAccepted() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        gameEvent?: ReturnType<typeof dependency_1.GameEvent.prototype.toObject>[];
        accepted?: boolean;
    }): GameEventProposalGroup {
        const message = new GameEventProposalGroup({
            gameEvent: data.gameEvent.map(item => dependency_1.GameEvent.fromObject(item))
        });
        if (data.accepted != null) {
            message.accepted = data.accepted;
        }
        return message;
    }
    toObject() {
        const data: {
            gameEvent?: ReturnType<typeof dependency_1.GameEvent.prototype.toObject>[];
            accepted?: boolean;
        } = {};
        if (this.gameEvent != null) {
            data.gameEvent = this.gameEvent.map((item: dependency_1.GameEvent) => item.toObject());
        }
        if (this.accepted != null) {
            data.accepted = this.accepted;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.gameEvent.length)
            writer.writeRepeatedMessage(1, this.gameEvent, (item: dependency_1.GameEvent) => item.serialize(writer));
        if (this.hasAccepted)
            writer.writeBool(2, this.accepted);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEventProposalGroup {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameEventProposalGroup();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.gameEvent, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.GameEvent.deserialize(reader), dependency_1.GameEvent));
                    break;
                case 2:
                    message.accepted = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameEventProposalGroup {
        return GameEventProposalGroup.deserialize(bytes);
    }
}
