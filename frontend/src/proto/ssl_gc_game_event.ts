// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: ssl_gc_game_event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ssl_gc_common";
import * as dependency_2 from "./ssl_gc_geometry";
import * as pb_1 from "google-protobuf";
export class GameEvent extends pb_1.Message {
    #one_of_decls: number[][] = [[6, 7, 11, 19, 31, 43, 13, 17, 24, 26, 27, 15, 18, 22, 21, 29, 28, 20, 39, 8, 44, 14, 5, 45, 2, 3, 32, 34, 37, 38, 46, 47, 35, 36, 1, 9, 10, 12, 16, 42, 23, 25, 30, 33]];
    constructor(data?: any[] | ({
        type?: GameEvent.Type;
        origin: string[];
    } & (({
        ballLeftFieldTouchLine?: GameEvent.BallLeftField;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: GameEvent.BallLeftField;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: GameEvent.AimlessKick;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: GameEvent.AttackerTooCloseToDefenseArea;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: GameEvent.DefenderInDefenseArea;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: GameEvent.BoundaryCrossing;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: GameEvent.KeeperHeldBall;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: GameEvent.BotDribbledBallTooFar;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: GameEvent.BotPushedBot;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: GameEvent.BotHeldBallDeliberately;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: GameEvent.BotTippedOver;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: GameEvent.AttackerTouchedBallInDefenseArea;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: GameEvent.BotKickedBallTooFast;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: GameEvent.BotCrashUnique;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: GameEvent.BotCrashDrawn;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: GameEvent.DefenderTooCloseToKickPoint;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: GameEvent.BotTooFastInStop;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: GameEvent.BotInterferedPlacement;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: GameEvent.Goal;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: GameEvent.Goal;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: GameEvent.Goal;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: GameEvent.AttackerDoubleTouchedBall;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: GameEvent.PlacementSucceeded;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: GameEvent.PenaltyKickFailed;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: GameEvent.NoProgressInGame;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: GameEvent.PlacementFailed;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: GameEvent.MultipleCards;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: GameEvent.MultipleFouls;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: GameEvent.BotSubstitution;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: GameEvent.TooManyRobots;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: GameEvent.ChallengeFlag;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: GameEvent.EmergencyStop;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: GameEvent.UnsportingBehaviorMinor;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: GameEvent.UnsportingBehaviorMajor;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        /** @deprecated*/
        prepared?: GameEvent.Prepared;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        /** @deprecated*/
        indirectGoal?: GameEvent.IndirectGoal;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        /** @deprecated*/
        chippedGoal?: GameEvent.ChippedGoal;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        /** @deprecated*/
        kickTimeout?: GameEvent.KickTimeout;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        /** @deprecated*/
        attackerTouchedOpponentInDefenseArea?: GameEvent.AttackerTouchedOpponentInDefenseArea;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        /** @deprecated*/
        attackerTouchedOpponentInDefenseAreaSkipped?: GameEvent.AttackerTouchedOpponentInDefenseArea;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        /** @deprecated*/
        botCrashUniqueSkipped?: GameEvent.BotCrashUnique;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        /** @deprecated*/
        botPushedBotSkipped?: GameEvent.BotPushedBot;
        defenderInDefenseAreaPartially?: never;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        /** @deprecated*/
        defenderInDefenseAreaPartially?: GameEvent.DefenderInDefenseAreaPartially;
        multiplePlacementFailures?: never;
    } | {
        ballLeftFieldTouchLine?: never;
        ballLeftFieldGoalLine?: never;
        aimlessKick?: never;
        attackerTooCloseToDefenseArea?: never;
        defenderInDefenseArea?: never;
        boundaryCrossing?: never;
        keeperHeldBall?: never;
        botDribbledBallTooFar?: never;
        botPushedBot?: never;
        botHeldBallDeliberately?: never;
        botTippedOver?: never;
        attackerTouchedBallInDefenseArea?: never;
        botKickedBallTooFast?: never;
        botCrashUnique?: never;
        botCrashDrawn?: never;
        defenderTooCloseToKickPoint?: never;
        botTooFastInStop?: never;
        botInterferedPlacement?: never;
        possibleGoal?: never;
        goal?: never;
        invalidGoal?: never;
        attackerDoubleTouchedBall?: never;
        placementSucceeded?: never;
        penaltyKickFailed?: never;
        noProgressInGame?: never;
        placementFailed?: never;
        multipleCards?: never;
        multipleFouls?: never;
        botSubstitution?: never;
        tooManyRobots?: never;
        challengeFlag?: never;
        emergencyStop?: never;
        unsportingBehaviorMinor?: never;
        unsportingBehaviorMajor?: never;
        prepared?: never;
        indirectGoal?: never;
        chippedGoal?: never;
        kickTimeout?: never;
        attackerTouchedOpponentInDefenseArea?: never;
        attackerTouchedOpponentInDefenseAreaSkipped?: never;
        botCrashUniqueSkipped?: never;
        botPushedBotSkipped?: never;
        defenderInDefenseAreaPartially?: never;
        /** @deprecated*/
        multiplePlacementFailures?: GameEvent.MultiplePlacementFailures;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [41], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            this.origin = data.origin;
            if ("ballLeftFieldTouchLine" in data && data.ballLeftFieldTouchLine != undefined) {
                this.ballLeftFieldTouchLine = data.ballLeftFieldTouchLine;
            }
            if ("ballLeftFieldGoalLine" in data && data.ballLeftFieldGoalLine != undefined) {
                this.ballLeftFieldGoalLine = data.ballLeftFieldGoalLine;
            }
            if ("aimlessKick" in data && data.aimlessKick != undefined) {
                this.aimlessKick = data.aimlessKick;
            }
            if ("attackerTooCloseToDefenseArea" in data && data.attackerTooCloseToDefenseArea != undefined) {
                this.attackerTooCloseToDefenseArea = data.attackerTooCloseToDefenseArea;
            }
            if ("defenderInDefenseArea" in data && data.defenderInDefenseArea != undefined) {
                this.defenderInDefenseArea = data.defenderInDefenseArea;
            }
            if ("boundaryCrossing" in data && data.boundaryCrossing != undefined) {
                this.boundaryCrossing = data.boundaryCrossing;
            }
            if ("keeperHeldBall" in data && data.keeperHeldBall != undefined) {
                this.keeperHeldBall = data.keeperHeldBall;
            }
            if ("botDribbledBallTooFar" in data && data.botDribbledBallTooFar != undefined) {
                this.botDribbledBallTooFar = data.botDribbledBallTooFar;
            }
            if ("botPushedBot" in data && data.botPushedBot != undefined) {
                this.botPushedBot = data.botPushedBot;
            }
            if ("botHeldBallDeliberately" in data && data.botHeldBallDeliberately != undefined) {
                this.botHeldBallDeliberately = data.botHeldBallDeliberately;
            }
            if ("botTippedOver" in data && data.botTippedOver != undefined) {
                this.botTippedOver = data.botTippedOver;
            }
            if ("attackerTouchedBallInDefenseArea" in data && data.attackerTouchedBallInDefenseArea != undefined) {
                this.attackerTouchedBallInDefenseArea = data.attackerTouchedBallInDefenseArea;
            }
            if ("botKickedBallTooFast" in data && data.botKickedBallTooFast != undefined) {
                this.botKickedBallTooFast = data.botKickedBallTooFast;
            }
            if ("botCrashUnique" in data && data.botCrashUnique != undefined) {
                this.botCrashUnique = data.botCrashUnique;
            }
            if ("botCrashDrawn" in data && data.botCrashDrawn != undefined) {
                this.botCrashDrawn = data.botCrashDrawn;
            }
            if ("defenderTooCloseToKickPoint" in data && data.defenderTooCloseToKickPoint != undefined) {
                this.defenderTooCloseToKickPoint = data.defenderTooCloseToKickPoint;
            }
            if ("botTooFastInStop" in data && data.botTooFastInStop != undefined) {
                this.botTooFastInStop = data.botTooFastInStop;
            }
            if ("botInterferedPlacement" in data && data.botInterferedPlacement != undefined) {
                this.botInterferedPlacement = data.botInterferedPlacement;
            }
            if ("possibleGoal" in data && data.possibleGoal != undefined) {
                this.possibleGoal = data.possibleGoal;
            }
            if ("goal" in data && data.goal != undefined) {
                this.goal = data.goal;
            }
            if ("invalidGoal" in data && data.invalidGoal != undefined) {
                this.invalidGoal = data.invalidGoal;
            }
            if ("attackerDoubleTouchedBall" in data && data.attackerDoubleTouchedBall != undefined) {
                this.attackerDoubleTouchedBall = data.attackerDoubleTouchedBall;
            }
            if ("placementSucceeded" in data && data.placementSucceeded != undefined) {
                this.placementSucceeded = data.placementSucceeded;
            }
            if ("penaltyKickFailed" in data && data.penaltyKickFailed != undefined) {
                this.penaltyKickFailed = data.penaltyKickFailed;
            }
            if ("noProgressInGame" in data && data.noProgressInGame != undefined) {
                this.noProgressInGame = data.noProgressInGame;
            }
            if ("placementFailed" in data && data.placementFailed != undefined) {
                this.placementFailed = data.placementFailed;
            }
            if ("multipleCards" in data && data.multipleCards != undefined) {
                this.multipleCards = data.multipleCards;
            }
            if ("multipleFouls" in data && data.multipleFouls != undefined) {
                this.multipleFouls = data.multipleFouls;
            }
            if ("botSubstitution" in data && data.botSubstitution != undefined) {
                this.botSubstitution = data.botSubstitution;
            }
            if ("tooManyRobots" in data && data.tooManyRobots != undefined) {
                this.tooManyRobots = data.tooManyRobots;
            }
            if ("challengeFlag" in data && data.challengeFlag != undefined) {
                this.challengeFlag = data.challengeFlag;
            }
            if ("emergencyStop" in data && data.emergencyStop != undefined) {
                this.emergencyStop = data.emergencyStop;
            }
            if ("unsportingBehaviorMinor" in data && data.unsportingBehaviorMinor != undefined) {
                this.unsportingBehaviorMinor = data.unsportingBehaviorMinor;
            }
            if ("unsportingBehaviorMajor" in data && data.unsportingBehaviorMajor != undefined) {
                this.unsportingBehaviorMajor = data.unsportingBehaviorMajor;
            }
            if ("prepared" in data && data.prepared != undefined) {
                this.prepared = data.prepared;
            }
            if ("indirectGoal" in data && data.indirectGoal != undefined) {
                this.indirectGoal = data.indirectGoal;
            }
            if ("chippedGoal" in data && data.chippedGoal != undefined) {
                this.chippedGoal = data.chippedGoal;
            }
            if ("kickTimeout" in data && data.kickTimeout != undefined) {
                this.kickTimeout = data.kickTimeout;
            }
            if ("attackerTouchedOpponentInDefenseArea" in data && data.attackerTouchedOpponentInDefenseArea != undefined) {
                this.attackerTouchedOpponentInDefenseArea = data.attackerTouchedOpponentInDefenseArea;
            }
            if ("attackerTouchedOpponentInDefenseAreaSkipped" in data && data.attackerTouchedOpponentInDefenseAreaSkipped != undefined) {
                this.attackerTouchedOpponentInDefenseAreaSkipped = data.attackerTouchedOpponentInDefenseAreaSkipped;
            }
            if ("botCrashUniqueSkipped" in data && data.botCrashUniqueSkipped != undefined) {
                this.botCrashUniqueSkipped = data.botCrashUniqueSkipped;
            }
            if ("botPushedBotSkipped" in data && data.botPushedBotSkipped != undefined) {
                this.botPushedBotSkipped = data.botPushedBotSkipped;
            }
            if ("defenderInDefenseAreaPartially" in data && data.defenderInDefenseAreaPartially != undefined) {
                this.defenderInDefenseAreaPartially = data.defenderInDefenseAreaPartially;
            }
            if ("multiplePlacementFailures" in data && data.multiplePlacementFailures != undefined) {
                this.multiplePlacementFailures = data.multiplePlacementFailures;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 40, GameEvent.Type.UNKNOWN_GAME_EVENT_TYPE) as GameEvent.Type;
    }
    set type(value: GameEvent.Type) {
        pb_1.Message.setField(this, 40, value);
    }
    get hasType() {
        return pb_1.Message.getField(this, 40) != null;
    }
    get origin() {
        return pb_1.Message.getFieldWithDefault(this, 41, []) as string[];
    }
    set origin(value: string[]) {
        pb_1.Message.setField(this, 41, value);
    }
    get ballLeftFieldTouchLine() {
        return pb_1.Message.getWrapperField(this, GameEvent.BallLeftField, 6) as GameEvent.BallLeftField;
    }
    set ballLeftFieldTouchLine(value: GameEvent.BallLeftField) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get hasBallLeftFieldTouchLine() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get ballLeftFieldGoalLine() {
        return pb_1.Message.getWrapperField(this, GameEvent.BallLeftField, 7) as GameEvent.BallLeftField;
    }
    set ballLeftFieldGoalLine(value: GameEvent.BallLeftField) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get hasBallLeftFieldGoalLine() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get aimlessKick() {
        return pb_1.Message.getWrapperField(this, GameEvent.AimlessKick, 11) as GameEvent.AimlessKick;
    }
    set aimlessKick(value: GameEvent.AimlessKick) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get hasAimlessKick() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get attackerTooCloseToDefenseArea() {
        return pb_1.Message.getWrapperField(this, GameEvent.AttackerTooCloseToDefenseArea, 19) as GameEvent.AttackerTooCloseToDefenseArea;
    }
    set attackerTooCloseToDefenseArea(value: GameEvent.AttackerTooCloseToDefenseArea) {
        pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
    }
    get hasAttackerTooCloseToDefenseArea() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get defenderInDefenseArea() {
        return pb_1.Message.getWrapperField(this, GameEvent.DefenderInDefenseArea, 31) as GameEvent.DefenderInDefenseArea;
    }
    set defenderInDefenseArea(value: GameEvent.DefenderInDefenseArea) {
        pb_1.Message.setOneofWrapperField(this, 31, this.#one_of_decls[0], value);
    }
    get hasDefenderInDefenseArea() {
        return pb_1.Message.getField(this, 31) != null;
    }
    get boundaryCrossing() {
        return pb_1.Message.getWrapperField(this, GameEvent.BoundaryCrossing, 43) as GameEvent.BoundaryCrossing;
    }
    set boundaryCrossing(value: GameEvent.BoundaryCrossing) {
        pb_1.Message.setOneofWrapperField(this, 43, this.#one_of_decls[0], value);
    }
    get hasBoundaryCrossing() {
        return pb_1.Message.getField(this, 43) != null;
    }
    get keeperHeldBall() {
        return pb_1.Message.getWrapperField(this, GameEvent.KeeperHeldBall, 13) as GameEvent.KeeperHeldBall;
    }
    set keeperHeldBall(value: GameEvent.KeeperHeldBall) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
    }
    get hasKeeperHeldBall() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get botDribbledBallTooFar() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotDribbledBallTooFar, 17) as GameEvent.BotDribbledBallTooFar;
    }
    set botDribbledBallTooFar(value: GameEvent.BotDribbledBallTooFar) {
        pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
    }
    get hasBotDribbledBallTooFar() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get botPushedBot() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotPushedBot, 24) as GameEvent.BotPushedBot;
    }
    set botPushedBot(value: GameEvent.BotPushedBot) {
        pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
    }
    get hasBotPushedBot() {
        return pb_1.Message.getField(this, 24) != null;
    }
    get botHeldBallDeliberately() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotHeldBallDeliberately, 26) as GameEvent.BotHeldBallDeliberately;
    }
    set botHeldBallDeliberately(value: GameEvent.BotHeldBallDeliberately) {
        pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
    }
    get hasBotHeldBallDeliberately() {
        return pb_1.Message.getField(this, 26) != null;
    }
    get botTippedOver() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotTippedOver, 27) as GameEvent.BotTippedOver;
    }
    set botTippedOver(value: GameEvent.BotTippedOver) {
        pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
    }
    get hasBotTippedOver() {
        return pb_1.Message.getField(this, 27) != null;
    }
    get attackerTouchedBallInDefenseArea() {
        return pb_1.Message.getWrapperField(this, GameEvent.AttackerTouchedBallInDefenseArea, 15) as GameEvent.AttackerTouchedBallInDefenseArea;
    }
    set attackerTouchedBallInDefenseArea(value: GameEvent.AttackerTouchedBallInDefenseArea) {
        pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
    }
    get hasAttackerTouchedBallInDefenseArea() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get botKickedBallTooFast() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotKickedBallTooFast, 18) as GameEvent.BotKickedBallTooFast;
    }
    set botKickedBallTooFast(value: GameEvent.BotKickedBallTooFast) {
        pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
    }
    get hasBotKickedBallTooFast() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get botCrashUnique() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotCrashUnique, 22) as GameEvent.BotCrashUnique;
    }
    set botCrashUnique(value: GameEvent.BotCrashUnique) {
        pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
    }
    get hasBotCrashUnique() {
        return pb_1.Message.getField(this, 22) != null;
    }
    get botCrashDrawn() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotCrashDrawn, 21) as GameEvent.BotCrashDrawn;
    }
    set botCrashDrawn(value: GameEvent.BotCrashDrawn) {
        pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
    }
    get hasBotCrashDrawn() {
        return pb_1.Message.getField(this, 21) != null;
    }
    get defenderTooCloseToKickPoint() {
        return pb_1.Message.getWrapperField(this, GameEvent.DefenderTooCloseToKickPoint, 29) as GameEvent.DefenderTooCloseToKickPoint;
    }
    set defenderTooCloseToKickPoint(value: GameEvent.DefenderTooCloseToKickPoint) {
        pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
    }
    get hasDefenderTooCloseToKickPoint() {
        return pb_1.Message.getField(this, 29) != null;
    }
    get botTooFastInStop() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotTooFastInStop, 28) as GameEvent.BotTooFastInStop;
    }
    set botTooFastInStop(value: GameEvent.BotTooFastInStop) {
        pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
    }
    get hasBotTooFastInStop() {
        return pb_1.Message.getField(this, 28) != null;
    }
    get botInterferedPlacement() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotInterferedPlacement, 20) as GameEvent.BotInterferedPlacement;
    }
    set botInterferedPlacement(value: GameEvent.BotInterferedPlacement) {
        pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
    }
    get hasBotInterferedPlacement() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get possibleGoal() {
        return pb_1.Message.getWrapperField(this, GameEvent.Goal, 39) as GameEvent.Goal;
    }
    set possibleGoal(value: GameEvent.Goal) {
        pb_1.Message.setOneofWrapperField(this, 39, this.#one_of_decls[0], value);
    }
    get hasPossibleGoal() {
        return pb_1.Message.getField(this, 39) != null;
    }
    get goal() {
        return pb_1.Message.getWrapperField(this, GameEvent.Goal, 8) as GameEvent.Goal;
    }
    set goal(value: GameEvent.Goal) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get hasGoal() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get invalidGoal() {
        return pb_1.Message.getWrapperField(this, GameEvent.Goal, 44) as GameEvent.Goal;
    }
    set invalidGoal(value: GameEvent.Goal) {
        pb_1.Message.setOneofWrapperField(this, 44, this.#one_of_decls[0], value);
    }
    get hasInvalidGoal() {
        return pb_1.Message.getField(this, 44) != null;
    }
    get attackerDoubleTouchedBall() {
        return pb_1.Message.getWrapperField(this, GameEvent.AttackerDoubleTouchedBall, 14) as GameEvent.AttackerDoubleTouchedBall;
    }
    set attackerDoubleTouchedBall(value: GameEvent.AttackerDoubleTouchedBall) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
    }
    get hasAttackerDoubleTouchedBall() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get placementSucceeded() {
        return pb_1.Message.getWrapperField(this, GameEvent.PlacementSucceeded, 5) as GameEvent.PlacementSucceeded;
    }
    set placementSucceeded(value: GameEvent.PlacementSucceeded) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get hasPlacementSucceeded() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get penaltyKickFailed() {
        return pb_1.Message.getWrapperField(this, GameEvent.PenaltyKickFailed, 45) as GameEvent.PenaltyKickFailed;
    }
    set penaltyKickFailed(value: GameEvent.PenaltyKickFailed) {
        pb_1.Message.setOneofWrapperField(this, 45, this.#one_of_decls[0], value);
    }
    get hasPenaltyKickFailed() {
        return pb_1.Message.getField(this, 45) != null;
    }
    get noProgressInGame() {
        return pb_1.Message.getWrapperField(this, GameEvent.NoProgressInGame, 2) as GameEvent.NoProgressInGame;
    }
    set noProgressInGame(value: GameEvent.NoProgressInGame) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasNoProgressInGame() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get placementFailed() {
        return pb_1.Message.getWrapperField(this, GameEvent.PlacementFailed, 3) as GameEvent.PlacementFailed;
    }
    set placementFailed(value: GameEvent.PlacementFailed) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasPlacementFailed() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get multipleCards() {
        return pb_1.Message.getWrapperField(this, GameEvent.MultipleCards, 32) as GameEvent.MultipleCards;
    }
    set multipleCards(value: GameEvent.MultipleCards) {
        pb_1.Message.setOneofWrapperField(this, 32, this.#one_of_decls[0], value);
    }
    get hasMultipleCards() {
        return pb_1.Message.getField(this, 32) != null;
    }
    get multipleFouls() {
        return pb_1.Message.getWrapperField(this, GameEvent.MultipleFouls, 34) as GameEvent.MultipleFouls;
    }
    set multipleFouls(value: GameEvent.MultipleFouls) {
        pb_1.Message.setOneofWrapperField(this, 34, this.#one_of_decls[0], value);
    }
    get hasMultipleFouls() {
        return pb_1.Message.getField(this, 34) != null;
    }
    get botSubstitution() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotSubstitution, 37) as GameEvent.BotSubstitution;
    }
    set botSubstitution(value: GameEvent.BotSubstitution) {
        pb_1.Message.setOneofWrapperField(this, 37, this.#one_of_decls[0], value);
    }
    get hasBotSubstitution() {
        return pb_1.Message.getField(this, 37) != null;
    }
    get tooManyRobots() {
        return pb_1.Message.getWrapperField(this, GameEvent.TooManyRobots, 38) as GameEvent.TooManyRobots;
    }
    set tooManyRobots(value: GameEvent.TooManyRobots) {
        pb_1.Message.setOneofWrapperField(this, 38, this.#one_of_decls[0], value);
    }
    get hasTooManyRobots() {
        return pb_1.Message.getField(this, 38) != null;
    }
    get challengeFlag() {
        return pb_1.Message.getWrapperField(this, GameEvent.ChallengeFlag, 46) as GameEvent.ChallengeFlag;
    }
    set challengeFlag(value: GameEvent.ChallengeFlag) {
        pb_1.Message.setOneofWrapperField(this, 46, this.#one_of_decls[0], value);
    }
    get hasChallengeFlag() {
        return pb_1.Message.getField(this, 46) != null;
    }
    get emergencyStop() {
        return pb_1.Message.getWrapperField(this, GameEvent.EmergencyStop, 47) as GameEvent.EmergencyStop;
    }
    set emergencyStop(value: GameEvent.EmergencyStop) {
        pb_1.Message.setOneofWrapperField(this, 47, this.#one_of_decls[0], value);
    }
    get hasEmergencyStop() {
        return pb_1.Message.getField(this, 47) != null;
    }
    get unsportingBehaviorMinor() {
        return pb_1.Message.getWrapperField(this, GameEvent.UnsportingBehaviorMinor, 35) as GameEvent.UnsportingBehaviorMinor;
    }
    set unsportingBehaviorMinor(value: GameEvent.UnsportingBehaviorMinor) {
        pb_1.Message.setOneofWrapperField(this, 35, this.#one_of_decls[0], value);
    }
    get hasUnsportingBehaviorMinor() {
        return pb_1.Message.getField(this, 35) != null;
    }
    get unsportingBehaviorMajor() {
        return pb_1.Message.getWrapperField(this, GameEvent.UnsportingBehaviorMajor, 36) as GameEvent.UnsportingBehaviorMajor;
    }
    set unsportingBehaviorMajor(value: GameEvent.UnsportingBehaviorMajor) {
        pb_1.Message.setOneofWrapperField(this, 36, this.#one_of_decls[0], value);
    }
    get hasUnsportingBehaviorMajor() {
        return pb_1.Message.getField(this, 36) != null;
    }
    /** @deprecated*/
    get prepared() {
        return pb_1.Message.getWrapperField(this, GameEvent.Prepared, 1) as GameEvent.Prepared;
    }
    /** @deprecated*/
    set prepared(value: GameEvent.Prepared) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasPrepared() {
        return pb_1.Message.getField(this, 1) != null;
    }
    /** @deprecated*/
    get indirectGoal() {
        return pb_1.Message.getWrapperField(this, GameEvent.IndirectGoal, 9) as GameEvent.IndirectGoal;
    }
    /** @deprecated*/
    set indirectGoal(value: GameEvent.IndirectGoal) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasIndirectGoal() {
        return pb_1.Message.getField(this, 9) != null;
    }
    /** @deprecated*/
    get chippedGoal() {
        return pb_1.Message.getWrapperField(this, GameEvent.ChippedGoal, 10) as GameEvent.ChippedGoal;
    }
    /** @deprecated*/
    set chippedGoal(value: GameEvent.ChippedGoal) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasChippedGoal() {
        return pb_1.Message.getField(this, 10) != null;
    }
    /** @deprecated*/
    get kickTimeout() {
        return pb_1.Message.getWrapperField(this, GameEvent.KickTimeout, 12) as GameEvent.KickTimeout;
    }
    /** @deprecated*/
    set kickTimeout(value: GameEvent.KickTimeout) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasKickTimeout() {
        return pb_1.Message.getField(this, 12) != null;
    }
    /** @deprecated*/
    get attackerTouchedOpponentInDefenseArea() {
        return pb_1.Message.getWrapperField(this, GameEvent.AttackerTouchedOpponentInDefenseArea, 16) as GameEvent.AttackerTouchedOpponentInDefenseArea;
    }
    /** @deprecated*/
    set attackerTouchedOpponentInDefenseArea(value: GameEvent.AttackerTouchedOpponentInDefenseArea) {
        pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasAttackerTouchedOpponentInDefenseArea() {
        return pb_1.Message.getField(this, 16) != null;
    }
    /** @deprecated*/
    get attackerTouchedOpponentInDefenseAreaSkipped() {
        return pb_1.Message.getWrapperField(this, GameEvent.AttackerTouchedOpponentInDefenseArea, 42) as GameEvent.AttackerTouchedOpponentInDefenseArea;
    }
    /** @deprecated*/
    set attackerTouchedOpponentInDefenseAreaSkipped(value: GameEvent.AttackerTouchedOpponentInDefenseArea) {
        pb_1.Message.setOneofWrapperField(this, 42, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasAttackerTouchedOpponentInDefenseAreaSkipped() {
        return pb_1.Message.getField(this, 42) != null;
    }
    /** @deprecated*/
    get botCrashUniqueSkipped() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotCrashUnique, 23) as GameEvent.BotCrashUnique;
    }
    /** @deprecated*/
    set botCrashUniqueSkipped(value: GameEvent.BotCrashUnique) {
        pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasBotCrashUniqueSkipped() {
        return pb_1.Message.getField(this, 23) != null;
    }
    /** @deprecated*/
    get botPushedBotSkipped() {
        return pb_1.Message.getWrapperField(this, GameEvent.BotPushedBot, 25) as GameEvent.BotPushedBot;
    }
    /** @deprecated*/
    set botPushedBotSkipped(value: GameEvent.BotPushedBot) {
        pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasBotPushedBotSkipped() {
        return pb_1.Message.getField(this, 25) != null;
    }
    /** @deprecated*/
    get defenderInDefenseAreaPartially() {
        return pb_1.Message.getWrapperField(this, GameEvent.DefenderInDefenseAreaPartially, 30) as GameEvent.DefenderInDefenseAreaPartially;
    }
    /** @deprecated*/
    set defenderInDefenseAreaPartially(value: GameEvent.DefenderInDefenseAreaPartially) {
        pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasDefenderInDefenseAreaPartially() {
        return pb_1.Message.getField(this, 30) != null;
    }
    /** @deprecated*/
    get multiplePlacementFailures() {
        return pb_1.Message.getWrapperField(this, GameEvent.MultiplePlacementFailures, 33) as GameEvent.MultiplePlacementFailures;
    }
    /** @deprecated*/
    set multiplePlacementFailures(value: GameEvent.MultiplePlacementFailures) {
        pb_1.Message.setOneofWrapperField(this, 33, this.#one_of_decls[0], value);
    }
    /** @deprecated*/
    get hasMultiplePlacementFailures() {
        return pb_1.Message.getField(this, 33) != null;
    }
    get event() {
        const cases: {
            [index: number]: "none" | "ballLeftFieldTouchLine" | "ballLeftFieldGoalLine" | "aimlessKick" | "attackerTooCloseToDefenseArea" | "defenderInDefenseArea" | "boundaryCrossing" | "keeperHeldBall" | "botDribbledBallTooFar" | "botPushedBot" | "botHeldBallDeliberately" | "botTippedOver" | "attackerTouchedBallInDefenseArea" | "botKickedBallTooFast" | "botCrashUnique" | "botCrashDrawn" | "defenderTooCloseToKickPoint" | "botTooFastInStop" | "botInterferedPlacement" | "possibleGoal" | "goal" | "invalidGoal" | "attackerDoubleTouchedBall" | "placementSucceeded" | "penaltyKickFailed" | "noProgressInGame" | "placementFailed" | "multipleCards" | "multipleFouls" | "botSubstitution" | "tooManyRobots" | "challengeFlag" | "emergencyStop" | "unsportingBehaviorMinor" | "unsportingBehaviorMajor" | "prepared" | "indirectGoal" | "chippedGoal" | "kickTimeout" | "attackerTouchedOpponentInDefenseArea" | "attackerTouchedOpponentInDefenseAreaSkipped" | "botCrashUniqueSkipped" | "botPushedBotSkipped" | "defenderInDefenseAreaPartially" | "multiplePlacementFailures";
        } = {
            0: "none",
            6: "ballLeftFieldTouchLine",
            7: "ballLeftFieldGoalLine",
            11: "aimlessKick",
            19: "attackerTooCloseToDefenseArea",
            31: "defenderInDefenseArea",
            43: "boundaryCrossing",
            13: "keeperHeldBall",
            17: "botDribbledBallTooFar",
            24: "botPushedBot",
            26: "botHeldBallDeliberately",
            27: "botTippedOver",
            15: "attackerTouchedBallInDefenseArea",
            18: "botKickedBallTooFast",
            22: "botCrashUnique",
            21: "botCrashDrawn",
            29: "defenderTooCloseToKickPoint",
            28: "botTooFastInStop",
            20: "botInterferedPlacement",
            39: "possibleGoal",
            8: "goal",
            44: "invalidGoal",
            14: "attackerDoubleTouchedBall",
            5: "placementSucceeded",
            45: "penaltyKickFailed",
            2: "noProgressInGame",
            3: "placementFailed",
            32: "multipleCards",
            34: "multipleFouls",
            37: "botSubstitution",
            38: "tooManyRobots",
            46: "challengeFlag",
            47: "emergencyStop",
            35: "unsportingBehaviorMinor",
            36: "unsportingBehaviorMajor",
            1: "prepared",
            9: "indirectGoal",
            10: "chippedGoal",
            12: "kickTimeout",
            16: "attackerTouchedOpponentInDefenseArea",
            42: "attackerTouchedOpponentInDefenseAreaSkipped",
            23: "botCrashUniqueSkipped",
            25: "botPushedBotSkipped",
            30: "defenderInDefenseAreaPartially",
            33: "multiplePlacementFailures"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6, 7, 11, 19, 31, 43, 13, 17, 24, 26, 27, 15, 18, 22, 21, 29, 28, 20, 39, 8, 44, 14, 5, 45, 2, 3, 32, 34, 37, 38, 46, 47, 35, 36, 1, 9, 10, 12, 16, 42, 23, 25, 30, 33])];
    }
    static fromObject(data: {
        type?: GameEvent.Type;
        origin: string[];
        ballLeftFieldTouchLine?: ReturnType<typeof GameEvent.BallLeftField.prototype.toObject>;
        ballLeftFieldGoalLine?: ReturnType<typeof GameEvent.BallLeftField.prototype.toObject>;
        aimlessKick?: ReturnType<typeof GameEvent.AimlessKick.prototype.toObject>;
        attackerTooCloseToDefenseArea?: ReturnType<typeof GameEvent.AttackerTooCloseToDefenseArea.prototype.toObject>;
        defenderInDefenseArea?: ReturnType<typeof GameEvent.DefenderInDefenseArea.prototype.toObject>;
        boundaryCrossing?: ReturnType<typeof GameEvent.BoundaryCrossing.prototype.toObject>;
        keeperHeldBall?: ReturnType<typeof GameEvent.KeeperHeldBall.prototype.toObject>;
        botDribbledBallTooFar?: ReturnType<typeof GameEvent.BotDribbledBallTooFar.prototype.toObject>;
        botPushedBot?: ReturnType<typeof GameEvent.BotPushedBot.prototype.toObject>;
        botHeldBallDeliberately?: ReturnType<typeof GameEvent.BotHeldBallDeliberately.prototype.toObject>;
        botTippedOver?: ReturnType<typeof GameEvent.BotTippedOver.prototype.toObject>;
        attackerTouchedBallInDefenseArea?: ReturnType<typeof GameEvent.AttackerTouchedBallInDefenseArea.prototype.toObject>;
        botKickedBallTooFast?: ReturnType<typeof GameEvent.BotKickedBallTooFast.prototype.toObject>;
        botCrashUnique?: ReturnType<typeof GameEvent.BotCrashUnique.prototype.toObject>;
        botCrashDrawn?: ReturnType<typeof GameEvent.BotCrashDrawn.prototype.toObject>;
        defenderTooCloseToKickPoint?: ReturnType<typeof GameEvent.DefenderTooCloseToKickPoint.prototype.toObject>;
        botTooFastInStop?: ReturnType<typeof GameEvent.BotTooFastInStop.prototype.toObject>;
        botInterferedPlacement?: ReturnType<typeof GameEvent.BotInterferedPlacement.prototype.toObject>;
        possibleGoal?: ReturnType<typeof GameEvent.Goal.prototype.toObject>;
        goal?: ReturnType<typeof GameEvent.Goal.prototype.toObject>;
        invalidGoal?: ReturnType<typeof GameEvent.Goal.prototype.toObject>;
        attackerDoubleTouchedBall?: ReturnType<typeof GameEvent.AttackerDoubleTouchedBall.prototype.toObject>;
        placementSucceeded?: ReturnType<typeof GameEvent.PlacementSucceeded.prototype.toObject>;
        penaltyKickFailed?: ReturnType<typeof GameEvent.PenaltyKickFailed.prototype.toObject>;
        noProgressInGame?: ReturnType<typeof GameEvent.NoProgressInGame.prototype.toObject>;
        placementFailed?: ReturnType<typeof GameEvent.PlacementFailed.prototype.toObject>;
        multipleCards?: ReturnType<typeof GameEvent.MultipleCards.prototype.toObject>;
        multipleFouls?: ReturnType<typeof GameEvent.MultipleFouls.prototype.toObject>;
        botSubstitution?: ReturnType<typeof GameEvent.BotSubstitution.prototype.toObject>;
        tooManyRobots?: ReturnType<typeof GameEvent.TooManyRobots.prototype.toObject>;
        challengeFlag?: ReturnType<typeof GameEvent.ChallengeFlag.prototype.toObject>;
        emergencyStop?: ReturnType<typeof GameEvent.EmergencyStop.prototype.toObject>;
        unsportingBehaviorMinor?: ReturnType<typeof GameEvent.UnsportingBehaviorMinor.prototype.toObject>;
        unsportingBehaviorMajor?: ReturnType<typeof GameEvent.UnsportingBehaviorMajor.prototype.toObject>;
        prepared?: ReturnType<typeof GameEvent.Prepared.prototype.toObject>;
        indirectGoal?: ReturnType<typeof GameEvent.IndirectGoal.prototype.toObject>;
        chippedGoal?: ReturnType<typeof GameEvent.ChippedGoal.prototype.toObject>;
        kickTimeout?: ReturnType<typeof GameEvent.KickTimeout.prototype.toObject>;
        attackerTouchedOpponentInDefenseArea?: ReturnType<typeof GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.toObject>;
        attackerTouchedOpponentInDefenseAreaSkipped?: ReturnType<typeof GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.toObject>;
        botCrashUniqueSkipped?: ReturnType<typeof GameEvent.BotCrashUnique.prototype.toObject>;
        botPushedBotSkipped?: ReturnType<typeof GameEvent.BotPushedBot.prototype.toObject>;
        defenderInDefenseAreaPartially?: ReturnType<typeof GameEvent.DefenderInDefenseAreaPartially.prototype.toObject>;
        multiplePlacementFailures?: ReturnType<typeof GameEvent.MultiplePlacementFailures.prototype.toObject>;
    }): GameEvent {
        const message = new GameEvent({
            origin: data.origin
        });
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.ballLeftFieldTouchLine != null) {
            message.ballLeftFieldTouchLine = GameEvent.BallLeftField.fromObject(data.ballLeftFieldTouchLine);
        }
        if (data.ballLeftFieldGoalLine != null) {
            message.ballLeftFieldGoalLine = GameEvent.BallLeftField.fromObject(data.ballLeftFieldGoalLine);
        }
        if (data.aimlessKick != null) {
            message.aimlessKick = GameEvent.AimlessKick.fromObject(data.aimlessKick);
        }
        if (data.attackerTooCloseToDefenseArea != null) {
            message.attackerTooCloseToDefenseArea = GameEvent.AttackerTooCloseToDefenseArea.fromObject(data.attackerTooCloseToDefenseArea);
        }
        if (data.defenderInDefenseArea != null) {
            message.defenderInDefenseArea = GameEvent.DefenderInDefenseArea.fromObject(data.defenderInDefenseArea);
        }
        if (data.boundaryCrossing != null) {
            message.boundaryCrossing = GameEvent.BoundaryCrossing.fromObject(data.boundaryCrossing);
        }
        if (data.keeperHeldBall != null) {
            message.keeperHeldBall = GameEvent.KeeperHeldBall.fromObject(data.keeperHeldBall);
        }
        if (data.botDribbledBallTooFar != null) {
            message.botDribbledBallTooFar = GameEvent.BotDribbledBallTooFar.fromObject(data.botDribbledBallTooFar);
        }
        if (data.botPushedBot != null) {
            message.botPushedBot = GameEvent.BotPushedBot.fromObject(data.botPushedBot);
        }
        if (data.botHeldBallDeliberately != null) {
            message.botHeldBallDeliberately = GameEvent.BotHeldBallDeliberately.fromObject(data.botHeldBallDeliberately);
        }
        if (data.botTippedOver != null) {
            message.botTippedOver = GameEvent.BotTippedOver.fromObject(data.botTippedOver);
        }
        if (data.attackerTouchedBallInDefenseArea != null) {
            message.attackerTouchedBallInDefenseArea = GameEvent.AttackerTouchedBallInDefenseArea.fromObject(data.attackerTouchedBallInDefenseArea);
        }
        if (data.botKickedBallTooFast != null) {
            message.botKickedBallTooFast = GameEvent.BotKickedBallTooFast.fromObject(data.botKickedBallTooFast);
        }
        if (data.botCrashUnique != null) {
            message.botCrashUnique = GameEvent.BotCrashUnique.fromObject(data.botCrashUnique);
        }
        if (data.botCrashDrawn != null) {
            message.botCrashDrawn = GameEvent.BotCrashDrawn.fromObject(data.botCrashDrawn);
        }
        if (data.defenderTooCloseToKickPoint != null) {
            message.defenderTooCloseToKickPoint = GameEvent.DefenderTooCloseToKickPoint.fromObject(data.defenderTooCloseToKickPoint);
        }
        if (data.botTooFastInStop != null) {
            message.botTooFastInStop = GameEvent.BotTooFastInStop.fromObject(data.botTooFastInStop);
        }
        if (data.botInterferedPlacement != null) {
            message.botInterferedPlacement = GameEvent.BotInterferedPlacement.fromObject(data.botInterferedPlacement);
        }
        if (data.possibleGoal != null) {
            message.possibleGoal = GameEvent.Goal.fromObject(data.possibleGoal);
        }
        if (data.goal != null) {
            message.goal = GameEvent.Goal.fromObject(data.goal);
        }
        if (data.invalidGoal != null) {
            message.invalidGoal = GameEvent.Goal.fromObject(data.invalidGoal);
        }
        if (data.attackerDoubleTouchedBall != null) {
            message.attackerDoubleTouchedBall = GameEvent.AttackerDoubleTouchedBall.fromObject(data.attackerDoubleTouchedBall);
        }
        if (data.placementSucceeded != null) {
            message.placementSucceeded = GameEvent.PlacementSucceeded.fromObject(data.placementSucceeded);
        }
        if (data.penaltyKickFailed != null) {
            message.penaltyKickFailed = GameEvent.PenaltyKickFailed.fromObject(data.penaltyKickFailed);
        }
        if (data.noProgressInGame != null) {
            message.noProgressInGame = GameEvent.NoProgressInGame.fromObject(data.noProgressInGame);
        }
        if (data.placementFailed != null) {
            message.placementFailed = GameEvent.PlacementFailed.fromObject(data.placementFailed);
        }
        if (data.multipleCards != null) {
            message.multipleCards = GameEvent.MultipleCards.fromObject(data.multipleCards);
        }
        if (data.multipleFouls != null) {
            message.multipleFouls = GameEvent.MultipleFouls.fromObject(data.multipleFouls);
        }
        if (data.botSubstitution != null) {
            message.botSubstitution = GameEvent.BotSubstitution.fromObject(data.botSubstitution);
        }
        if (data.tooManyRobots != null) {
            message.tooManyRobots = GameEvent.TooManyRobots.fromObject(data.tooManyRobots);
        }
        if (data.challengeFlag != null) {
            message.challengeFlag = GameEvent.ChallengeFlag.fromObject(data.challengeFlag);
        }
        if (data.emergencyStop != null) {
            message.emergencyStop = GameEvent.EmergencyStop.fromObject(data.emergencyStop);
        }
        if (data.unsportingBehaviorMinor != null) {
            message.unsportingBehaviorMinor = GameEvent.UnsportingBehaviorMinor.fromObject(data.unsportingBehaviorMinor);
        }
        if (data.unsportingBehaviorMajor != null) {
            message.unsportingBehaviorMajor = GameEvent.UnsportingBehaviorMajor.fromObject(data.unsportingBehaviorMajor);
        }
        if (data.prepared != null) {
            message.prepared = GameEvent.Prepared.fromObject(data.prepared);
        }
        if (data.indirectGoal != null) {
            message.indirectGoal = GameEvent.IndirectGoal.fromObject(data.indirectGoal);
        }
        if (data.chippedGoal != null) {
            message.chippedGoal = GameEvent.ChippedGoal.fromObject(data.chippedGoal);
        }
        if (data.kickTimeout != null) {
            message.kickTimeout = GameEvent.KickTimeout.fromObject(data.kickTimeout);
        }
        if (data.attackerTouchedOpponentInDefenseArea != null) {
            message.attackerTouchedOpponentInDefenseArea = GameEvent.AttackerTouchedOpponentInDefenseArea.fromObject(data.attackerTouchedOpponentInDefenseArea);
        }
        if (data.attackerTouchedOpponentInDefenseAreaSkipped != null) {
            message.attackerTouchedOpponentInDefenseAreaSkipped = GameEvent.AttackerTouchedOpponentInDefenseArea.fromObject(data.attackerTouchedOpponentInDefenseAreaSkipped);
        }
        if (data.botCrashUniqueSkipped != null) {
            message.botCrashUniqueSkipped = GameEvent.BotCrashUnique.fromObject(data.botCrashUniqueSkipped);
        }
        if (data.botPushedBotSkipped != null) {
            message.botPushedBotSkipped = GameEvent.BotPushedBot.fromObject(data.botPushedBotSkipped);
        }
        if (data.defenderInDefenseAreaPartially != null) {
            message.defenderInDefenseAreaPartially = GameEvent.DefenderInDefenseAreaPartially.fromObject(data.defenderInDefenseAreaPartially);
        }
        if (data.multiplePlacementFailures != null) {
            message.multiplePlacementFailures = GameEvent.MultiplePlacementFailures.fromObject(data.multiplePlacementFailures);
        }
        return message;
    }
    toObject() {
        const data: {
            type?: GameEvent.Type;
            origin: string[];
            ballLeftFieldTouchLine?: ReturnType<typeof GameEvent.BallLeftField.prototype.toObject>;
            ballLeftFieldGoalLine?: ReturnType<typeof GameEvent.BallLeftField.prototype.toObject>;
            aimlessKick?: ReturnType<typeof GameEvent.AimlessKick.prototype.toObject>;
            attackerTooCloseToDefenseArea?: ReturnType<typeof GameEvent.AttackerTooCloseToDefenseArea.prototype.toObject>;
            defenderInDefenseArea?: ReturnType<typeof GameEvent.DefenderInDefenseArea.prototype.toObject>;
            boundaryCrossing?: ReturnType<typeof GameEvent.BoundaryCrossing.prototype.toObject>;
            keeperHeldBall?: ReturnType<typeof GameEvent.KeeperHeldBall.prototype.toObject>;
            botDribbledBallTooFar?: ReturnType<typeof GameEvent.BotDribbledBallTooFar.prototype.toObject>;
            botPushedBot?: ReturnType<typeof GameEvent.BotPushedBot.prototype.toObject>;
            botHeldBallDeliberately?: ReturnType<typeof GameEvent.BotHeldBallDeliberately.prototype.toObject>;
            botTippedOver?: ReturnType<typeof GameEvent.BotTippedOver.prototype.toObject>;
            attackerTouchedBallInDefenseArea?: ReturnType<typeof GameEvent.AttackerTouchedBallInDefenseArea.prototype.toObject>;
            botKickedBallTooFast?: ReturnType<typeof GameEvent.BotKickedBallTooFast.prototype.toObject>;
            botCrashUnique?: ReturnType<typeof GameEvent.BotCrashUnique.prototype.toObject>;
            botCrashDrawn?: ReturnType<typeof GameEvent.BotCrashDrawn.prototype.toObject>;
            defenderTooCloseToKickPoint?: ReturnType<typeof GameEvent.DefenderTooCloseToKickPoint.prototype.toObject>;
            botTooFastInStop?: ReturnType<typeof GameEvent.BotTooFastInStop.prototype.toObject>;
            botInterferedPlacement?: ReturnType<typeof GameEvent.BotInterferedPlacement.prototype.toObject>;
            possibleGoal?: ReturnType<typeof GameEvent.Goal.prototype.toObject>;
            goal?: ReturnType<typeof GameEvent.Goal.prototype.toObject>;
            invalidGoal?: ReturnType<typeof GameEvent.Goal.prototype.toObject>;
            attackerDoubleTouchedBall?: ReturnType<typeof GameEvent.AttackerDoubleTouchedBall.prototype.toObject>;
            placementSucceeded?: ReturnType<typeof GameEvent.PlacementSucceeded.prototype.toObject>;
            penaltyKickFailed?: ReturnType<typeof GameEvent.PenaltyKickFailed.prototype.toObject>;
            noProgressInGame?: ReturnType<typeof GameEvent.NoProgressInGame.prototype.toObject>;
            placementFailed?: ReturnType<typeof GameEvent.PlacementFailed.prototype.toObject>;
            multipleCards?: ReturnType<typeof GameEvent.MultipleCards.prototype.toObject>;
            multipleFouls?: ReturnType<typeof GameEvent.MultipleFouls.prototype.toObject>;
            botSubstitution?: ReturnType<typeof GameEvent.BotSubstitution.prototype.toObject>;
            tooManyRobots?: ReturnType<typeof GameEvent.TooManyRobots.prototype.toObject>;
            challengeFlag?: ReturnType<typeof GameEvent.ChallengeFlag.prototype.toObject>;
            emergencyStop?: ReturnType<typeof GameEvent.EmergencyStop.prototype.toObject>;
            unsportingBehaviorMinor?: ReturnType<typeof GameEvent.UnsportingBehaviorMinor.prototype.toObject>;
            unsportingBehaviorMajor?: ReturnType<typeof GameEvent.UnsportingBehaviorMajor.prototype.toObject>;
            prepared?: ReturnType<typeof GameEvent.Prepared.prototype.toObject>;
            indirectGoal?: ReturnType<typeof GameEvent.IndirectGoal.prototype.toObject>;
            chippedGoal?: ReturnType<typeof GameEvent.ChippedGoal.prototype.toObject>;
            kickTimeout?: ReturnType<typeof GameEvent.KickTimeout.prototype.toObject>;
            attackerTouchedOpponentInDefenseArea?: ReturnType<typeof GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.toObject>;
            attackerTouchedOpponentInDefenseAreaSkipped?: ReturnType<typeof GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.toObject>;
            botCrashUniqueSkipped?: ReturnType<typeof GameEvent.BotCrashUnique.prototype.toObject>;
            botPushedBotSkipped?: ReturnType<typeof GameEvent.BotPushedBot.prototype.toObject>;
            defenderInDefenseAreaPartially?: ReturnType<typeof GameEvent.DefenderInDefenseAreaPartially.prototype.toObject>;
            multiplePlacementFailures?: ReturnType<typeof GameEvent.MultiplePlacementFailures.prototype.toObject>;
        } = {
            origin: this.origin
        };
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.ballLeftFieldTouchLine != null) {
            data.ballLeftFieldTouchLine = this.ballLeftFieldTouchLine.toObject();
        }
        if (this.ballLeftFieldGoalLine != null) {
            data.ballLeftFieldGoalLine = this.ballLeftFieldGoalLine.toObject();
        }
        if (this.aimlessKick != null) {
            data.aimlessKick = this.aimlessKick.toObject();
        }
        if (this.attackerTooCloseToDefenseArea != null) {
            data.attackerTooCloseToDefenseArea = this.attackerTooCloseToDefenseArea.toObject();
        }
        if (this.defenderInDefenseArea != null) {
            data.defenderInDefenseArea = this.defenderInDefenseArea.toObject();
        }
        if (this.boundaryCrossing != null) {
            data.boundaryCrossing = this.boundaryCrossing.toObject();
        }
        if (this.keeperHeldBall != null) {
            data.keeperHeldBall = this.keeperHeldBall.toObject();
        }
        if (this.botDribbledBallTooFar != null) {
            data.botDribbledBallTooFar = this.botDribbledBallTooFar.toObject();
        }
        if (this.botPushedBot != null) {
            data.botPushedBot = this.botPushedBot.toObject();
        }
        if (this.botHeldBallDeliberately != null) {
            data.botHeldBallDeliberately = this.botHeldBallDeliberately.toObject();
        }
        if (this.botTippedOver != null) {
            data.botTippedOver = this.botTippedOver.toObject();
        }
        if (this.attackerTouchedBallInDefenseArea != null) {
            data.attackerTouchedBallInDefenseArea = this.attackerTouchedBallInDefenseArea.toObject();
        }
        if (this.botKickedBallTooFast != null) {
            data.botKickedBallTooFast = this.botKickedBallTooFast.toObject();
        }
        if (this.botCrashUnique != null) {
            data.botCrashUnique = this.botCrashUnique.toObject();
        }
        if (this.botCrashDrawn != null) {
            data.botCrashDrawn = this.botCrashDrawn.toObject();
        }
        if (this.defenderTooCloseToKickPoint != null) {
            data.defenderTooCloseToKickPoint = this.defenderTooCloseToKickPoint.toObject();
        }
        if (this.botTooFastInStop != null) {
            data.botTooFastInStop = this.botTooFastInStop.toObject();
        }
        if (this.botInterferedPlacement != null) {
            data.botInterferedPlacement = this.botInterferedPlacement.toObject();
        }
        if (this.possibleGoal != null) {
            data.possibleGoal = this.possibleGoal.toObject();
        }
        if (this.goal != null) {
            data.goal = this.goal.toObject();
        }
        if (this.invalidGoal != null) {
            data.invalidGoal = this.invalidGoal.toObject();
        }
        if (this.attackerDoubleTouchedBall != null) {
            data.attackerDoubleTouchedBall = this.attackerDoubleTouchedBall.toObject();
        }
        if (this.placementSucceeded != null) {
            data.placementSucceeded = this.placementSucceeded.toObject();
        }
        if (this.penaltyKickFailed != null) {
            data.penaltyKickFailed = this.penaltyKickFailed.toObject();
        }
        if (this.noProgressInGame != null) {
            data.noProgressInGame = this.noProgressInGame.toObject();
        }
        if (this.placementFailed != null) {
            data.placementFailed = this.placementFailed.toObject();
        }
        if (this.multipleCards != null) {
            data.multipleCards = this.multipleCards.toObject();
        }
        if (this.multipleFouls != null) {
            data.multipleFouls = this.multipleFouls.toObject();
        }
        if (this.botSubstitution != null) {
            data.botSubstitution = this.botSubstitution.toObject();
        }
        if (this.tooManyRobots != null) {
            data.tooManyRobots = this.tooManyRobots.toObject();
        }
        if (this.challengeFlag != null) {
            data.challengeFlag = this.challengeFlag.toObject();
        }
        if (this.emergencyStop != null) {
            data.emergencyStop = this.emergencyStop.toObject();
        }
        if (this.unsportingBehaviorMinor != null) {
            data.unsportingBehaviorMinor = this.unsportingBehaviorMinor.toObject();
        }
        if (this.unsportingBehaviorMajor != null) {
            data.unsportingBehaviorMajor = this.unsportingBehaviorMajor.toObject();
        }
        if (this.prepared != null) {
            data.prepared = this.prepared.toObject();
        }
        if (this.indirectGoal != null) {
            data.indirectGoal = this.indirectGoal.toObject();
        }
        if (this.chippedGoal != null) {
            data.chippedGoal = this.chippedGoal.toObject();
        }
        if (this.kickTimeout != null) {
            data.kickTimeout = this.kickTimeout.toObject();
        }
        if (this.attackerTouchedOpponentInDefenseArea != null) {
            data.attackerTouchedOpponentInDefenseArea = this.attackerTouchedOpponentInDefenseArea.toObject();
        }
        if (this.attackerTouchedOpponentInDefenseAreaSkipped != null) {
            data.attackerTouchedOpponentInDefenseAreaSkipped = this.attackerTouchedOpponentInDefenseAreaSkipped.toObject();
        }
        if (this.botCrashUniqueSkipped != null) {
            data.botCrashUniqueSkipped = this.botCrashUniqueSkipped.toObject();
        }
        if (this.botPushedBotSkipped != null) {
            data.botPushedBotSkipped = this.botPushedBotSkipped.toObject();
        }
        if (this.defenderInDefenseAreaPartially != null) {
            data.defenderInDefenseAreaPartially = this.defenderInDefenseAreaPartially.toObject();
        }
        if (this.multiplePlacementFailures != null) {
            data.multiplePlacementFailures = this.multiplePlacementFailures.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasType)
            writer.writeEnum(40, this.type);
        if (this.origin.length)
            writer.writeRepeatedString(41, this.origin);
        if (this.hasBallLeftFieldTouchLine)
            writer.writeMessage(6, this.ballLeftFieldTouchLine, () => this.ballLeftFieldTouchLine.serialize(writer));
        if (this.hasBallLeftFieldGoalLine)
            writer.writeMessage(7, this.ballLeftFieldGoalLine, () => this.ballLeftFieldGoalLine.serialize(writer));
        if (this.hasAimlessKick)
            writer.writeMessage(11, this.aimlessKick, () => this.aimlessKick.serialize(writer));
        if (this.hasAttackerTooCloseToDefenseArea)
            writer.writeMessage(19, this.attackerTooCloseToDefenseArea, () => this.attackerTooCloseToDefenseArea.serialize(writer));
        if (this.hasDefenderInDefenseArea)
            writer.writeMessage(31, this.defenderInDefenseArea, () => this.defenderInDefenseArea.serialize(writer));
        if (this.hasBoundaryCrossing)
            writer.writeMessage(43, this.boundaryCrossing, () => this.boundaryCrossing.serialize(writer));
        if (this.hasKeeperHeldBall)
            writer.writeMessage(13, this.keeperHeldBall, () => this.keeperHeldBall.serialize(writer));
        if (this.hasBotDribbledBallTooFar)
            writer.writeMessage(17, this.botDribbledBallTooFar, () => this.botDribbledBallTooFar.serialize(writer));
        if (this.hasBotPushedBot)
            writer.writeMessage(24, this.botPushedBot, () => this.botPushedBot.serialize(writer));
        if (this.hasBotHeldBallDeliberately)
            writer.writeMessage(26, this.botHeldBallDeliberately, () => this.botHeldBallDeliberately.serialize(writer));
        if (this.hasBotTippedOver)
            writer.writeMessage(27, this.botTippedOver, () => this.botTippedOver.serialize(writer));
        if (this.hasAttackerTouchedBallInDefenseArea)
            writer.writeMessage(15, this.attackerTouchedBallInDefenseArea, () => this.attackerTouchedBallInDefenseArea.serialize(writer));
        if (this.hasBotKickedBallTooFast)
            writer.writeMessage(18, this.botKickedBallTooFast, () => this.botKickedBallTooFast.serialize(writer));
        if (this.hasBotCrashUnique)
            writer.writeMessage(22, this.botCrashUnique, () => this.botCrashUnique.serialize(writer));
        if (this.hasBotCrashDrawn)
            writer.writeMessage(21, this.botCrashDrawn, () => this.botCrashDrawn.serialize(writer));
        if (this.hasDefenderTooCloseToKickPoint)
            writer.writeMessage(29, this.defenderTooCloseToKickPoint, () => this.defenderTooCloseToKickPoint.serialize(writer));
        if (this.hasBotTooFastInStop)
            writer.writeMessage(28, this.botTooFastInStop, () => this.botTooFastInStop.serialize(writer));
        if (this.hasBotInterferedPlacement)
            writer.writeMessage(20, this.botInterferedPlacement, () => this.botInterferedPlacement.serialize(writer));
        if (this.hasPossibleGoal)
            writer.writeMessage(39, this.possibleGoal, () => this.possibleGoal.serialize(writer));
        if (this.hasGoal)
            writer.writeMessage(8, this.goal, () => this.goal.serialize(writer));
        if (this.hasInvalidGoal)
            writer.writeMessage(44, this.invalidGoal, () => this.invalidGoal.serialize(writer));
        if (this.hasAttackerDoubleTouchedBall)
            writer.writeMessage(14, this.attackerDoubleTouchedBall, () => this.attackerDoubleTouchedBall.serialize(writer));
        if (this.hasPlacementSucceeded)
            writer.writeMessage(5, this.placementSucceeded, () => this.placementSucceeded.serialize(writer));
        if (this.hasPenaltyKickFailed)
            writer.writeMessage(45, this.penaltyKickFailed, () => this.penaltyKickFailed.serialize(writer));
        if (this.hasNoProgressInGame)
            writer.writeMessage(2, this.noProgressInGame, () => this.noProgressInGame.serialize(writer));
        if (this.hasPlacementFailed)
            writer.writeMessage(3, this.placementFailed, () => this.placementFailed.serialize(writer));
        if (this.hasMultipleCards)
            writer.writeMessage(32, this.multipleCards, () => this.multipleCards.serialize(writer));
        if (this.hasMultipleFouls)
            writer.writeMessage(34, this.multipleFouls, () => this.multipleFouls.serialize(writer));
        if (this.hasBotSubstitution)
            writer.writeMessage(37, this.botSubstitution, () => this.botSubstitution.serialize(writer));
        if (this.hasTooManyRobots)
            writer.writeMessage(38, this.tooManyRobots, () => this.tooManyRobots.serialize(writer));
        if (this.hasChallengeFlag)
            writer.writeMessage(46, this.challengeFlag, () => this.challengeFlag.serialize(writer));
        if (this.hasEmergencyStop)
            writer.writeMessage(47, this.emergencyStop, () => this.emergencyStop.serialize(writer));
        if (this.hasUnsportingBehaviorMinor)
            writer.writeMessage(35, this.unsportingBehaviorMinor, () => this.unsportingBehaviorMinor.serialize(writer));
        if (this.hasUnsportingBehaviorMajor)
            writer.writeMessage(36, this.unsportingBehaviorMajor, () => this.unsportingBehaviorMajor.serialize(writer));
        if (this.hasPrepared)
            writer.writeMessage(1, this.prepared, () => this.prepared.serialize(writer));
        if (this.hasIndirectGoal)
            writer.writeMessage(9, this.indirectGoal, () => this.indirectGoal.serialize(writer));
        if (this.hasChippedGoal)
            writer.writeMessage(10, this.chippedGoal, () => this.chippedGoal.serialize(writer));
        if (this.hasKickTimeout)
            writer.writeMessage(12, this.kickTimeout, () => this.kickTimeout.serialize(writer));
        if (this.hasAttackerTouchedOpponentInDefenseArea)
            writer.writeMessage(16, this.attackerTouchedOpponentInDefenseArea, () => this.attackerTouchedOpponentInDefenseArea.serialize(writer));
        if (this.hasAttackerTouchedOpponentInDefenseAreaSkipped)
            writer.writeMessage(42, this.attackerTouchedOpponentInDefenseAreaSkipped, () => this.attackerTouchedOpponentInDefenseAreaSkipped.serialize(writer));
        if (this.hasBotCrashUniqueSkipped)
            writer.writeMessage(23, this.botCrashUniqueSkipped, () => this.botCrashUniqueSkipped.serialize(writer));
        if (this.hasBotPushedBotSkipped)
            writer.writeMessage(25, this.botPushedBotSkipped, () => this.botPushedBotSkipped.serialize(writer));
        if (this.hasDefenderInDefenseAreaPartially)
            writer.writeMessage(30, this.defenderInDefenseAreaPartially, () => this.defenderInDefenseAreaPartially.serialize(writer));
        if (this.hasMultiplePlacementFailures)
            writer.writeMessage(33, this.multiplePlacementFailures, () => this.multiplePlacementFailures.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 40:
                    message.type = reader.readEnum();
                    break;
                case 41:
                    pb_1.Message.addToRepeatedField(message, 41, reader.readString());
                    break;
                case 6:
                    reader.readMessage(message.ballLeftFieldTouchLine, () => message.ballLeftFieldTouchLine = GameEvent.BallLeftField.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.ballLeftFieldGoalLine, () => message.ballLeftFieldGoalLine = GameEvent.BallLeftField.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.aimlessKick, () => message.aimlessKick = GameEvent.AimlessKick.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.attackerTooCloseToDefenseArea, () => message.attackerTooCloseToDefenseArea = GameEvent.AttackerTooCloseToDefenseArea.deserialize(reader));
                    break;
                case 31:
                    reader.readMessage(message.defenderInDefenseArea, () => message.defenderInDefenseArea = GameEvent.DefenderInDefenseArea.deserialize(reader));
                    break;
                case 43:
                    reader.readMessage(message.boundaryCrossing, () => message.boundaryCrossing = GameEvent.BoundaryCrossing.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.keeperHeldBall, () => message.keeperHeldBall = GameEvent.KeeperHeldBall.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.botDribbledBallTooFar, () => message.botDribbledBallTooFar = GameEvent.BotDribbledBallTooFar.deserialize(reader));
                    break;
                case 24:
                    reader.readMessage(message.botPushedBot, () => message.botPushedBot = GameEvent.BotPushedBot.deserialize(reader));
                    break;
                case 26:
                    reader.readMessage(message.botHeldBallDeliberately, () => message.botHeldBallDeliberately = GameEvent.BotHeldBallDeliberately.deserialize(reader));
                    break;
                case 27:
                    reader.readMessage(message.botTippedOver, () => message.botTippedOver = GameEvent.BotTippedOver.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.attackerTouchedBallInDefenseArea, () => message.attackerTouchedBallInDefenseArea = GameEvent.AttackerTouchedBallInDefenseArea.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.botKickedBallTooFast, () => message.botKickedBallTooFast = GameEvent.BotKickedBallTooFast.deserialize(reader));
                    break;
                case 22:
                    reader.readMessage(message.botCrashUnique, () => message.botCrashUnique = GameEvent.BotCrashUnique.deserialize(reader));
                    break;
                case 21:
                    reader.readMessage(message.botCrashDrawn, () => message.botCrashDrawn = GameEvent.BotCrashDrawn.deserialize(reader));
                    break;
                case 29:
                    reader.readMessage(message.defenderTooCloseToKickPoint, () => message.defenderTooCloseToKickPoint = GameEvent.DefenderTooCloseToKickPoint.deserialize(reader));
                    break;
                case 28:
                    reader.readMessage(message.botTooFastInStop, () => message.botTooFastInStop = GameEvent.BotTooFastInStop.deserialize(reader));
                    break;
                case 20:
                    reader.readMessage(message.botInterferedPlacement, () => message.botInterferedPlacement = GameEvent.BotInterferedPlacement.deserialize(reader));
                    break;
                case 39:
                    reader.readMessage(message.possibleGoal, () => message.possibleGoal = GameEvent.Goal.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.goal, () => message.goal = GameEvent.Goal.deserialize(reader));
                    break;
                case 44:
                    reader.readMessage(message.invalidGoal, () => message.invalidGoal = GameEvent.Goal.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.attackerDoubleTouchedBall, () => message.attackerDoubleTouchedBall = GameEvent.AttackerDoubleTouchedBall.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.placementSucceeded, () => message.placementSucceeded = GameEvent.PlacementSucceeded.deserialize(reader));
                    break;
                case 45:
                    reader.readMessage(message.penaltyKickFailed, () => message.penaltyKickFailed = GameEvent.PenaltyKickFailed.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.noProgressInGame, () => message.noProgressInGame = GameEvent.NoProgressInGame.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.placementFailed, () => message.placementFailed = GameEvent.PlacementFailed.deserialize(reader));
                    break;
                case 32:
                    reader.readMessage(message.multipleCards, () => message.multipleCards = GameEvent.MultipleCards.deserialize(reader));
                    break;
                case 34:
                    reader.readMessage(message.multipleFouls, () => message.multipleFouls = GameEvent.MultipleFouls.deserialize(reader));
                    break;
                case 37:
                    reader.readMessage(message.botSubstitution, () => message.botSubstitution = GameEvent.BotSubstitution.deserialize(reader));
                    break;
                case 38:
                    reader.readMessage(message.tooManyRobots, () => message.tooManyRobots = GameEvent.TooManyRobots.deserialize(reader));
                    break;
                case 46:
                    reader.readMessage(message.challengeFlag, () => message.challengeFlag = GameEvent.ChallengeFlag.deserialize(reader));
                    break;
                case 47:
                    reader.readMessage(message.emergencyStop, () => message.emergencyStop = GameEvent.EmergencyStop.deserialize(reader));
                    break;
                case 35:
                    reader.readMessage(message.unsportingBehaviorMinor, () => message.unsportingBehaviorMinor = GameEvent.UnsportingBehaviorMinor.deserialize(reader));
                    break;
                case 36:
                    reader.readMessage(message.unsportingBehaviorMajor, () => message.unsportingBehaviorMajor = GameEvent.UnsportingBehaviorMajor.deserialize(reader));
                    break;
                case 1:
                    reader.readMessage(message.prepared, () => message.prepared = GameEvent.Prepared.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.indirectGoal, () => message.indirectGoal = GameEvent.IndirectGoal.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.chippedGoal, () => message.chippedGoal = GameEvent.ChippedGoal.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.kickTimeout, () => message.kickTimeout = GameEvent.KickTimeout.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.attackerTouchedOpponentInDefenseArea, () => message.attackerTouchedOpponentInDefenseArea = GameEvent.AttackerTouchedOpponentInDefenseArea.deserialize(reader));
                    break;
                case 42:
                    reader.readMessage(message.attackerTouchedOpponentInDefenseAreaSkipped, () => message.attackerTouchedOpponentInDefenseAreaSkipped = GameEvent.AttackerTouchedOpponentInDefenseArea.deserialize(reader));
                    break;
                case 23:
                    reader.readMessage(message.botCrashUniqueSkipped, () => message.botCrashUniqueSkipped = GameEvent.BotCrashUnique.deserialize(reader));
                    break;
                case 25:
                    reader.readMessage(message.botPushedBotSkipped, () => message.botPushedBotSkipped = GameEvent.BotPushedBot.deserialize(reader));
                    break;
                case 30:
                    reader.readMessage(message.defenderInDefenseAreaPartially, () => message.defenderInDefenseAreaPartially = GameEvent.DefenderInDefenseAreaPartially.deserialize(reader));
                    break;
                case 33:
                    reader.readMessage(message.multiplePlacementFailures, () => message.multiplePlacementFailures = GameEvent.MultiplePlacementFailures.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameEvent {
        return GameEvent.deserialize(bytes);
    }
}
export namespace GameEvent {
    export enum Type {
        UNKNOWN_GAME_EVENT_TYPE = 0,
        BALL_LEFT_FIELD_TOUCH_LINE = 6,
        BALL_LEFT_FIELD_GOAL_LINE = 7,
        AIMLESS_KICK = 11,
        ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA = 19,
        DEFENDER_IN_DEFENSE_AREA = 31,
        BOUNDARY_CROSSING = 41,
        KEEPER_HELD_BALL = 13,
        BOT_DRIBBLED_BALL_TOO_FAR = 17,
        BOT_PUSHED_BOT = 24,
        BOT_HELD_BALL_DELIBERATELY = 26,
        BOT_TIPPED_OVER = 27,
        ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA = 15,
        BOT_KICKED_BALL_TOO_FAST = 18,
        BOT_CRASH_UNIQUE = 22,
        BOT_CRASH_DRAWN = 21,
        DEFENDER_TOO_CLOSE_TO_KICK_POINT = 29,
        BOT_TOO_FAST_IN_STOP = 28,
        BOT_INTERFERED_PLACEMENT = 20,
        POSSIBLE_GOAL = 39,
        GOAL = 8,
        INVALID_GOAL = 42,
        ATTACKER_DOUBLE_TOUCHED_BALL = 14,
        PLACEMENT_SUCCEEDED = 5,
        PENALTY_KICK_FAILED = 43,
        NO_PROGRESS_IN_GAME = 2,
        PLACEMENT_FAILED = 3,
        MULTIPLE_CARDS = 32,
        MULTIPLE_FOULS = 34,
        BOT_SUBSTITUTION = 37,
        TOO_MANY_ROBOTS = 38,
        CHALLENGE_FLAG = 44,
        EMERGENCY_STOP = 45,
        UNSPORTING_BEHAVIOR_MINOR = 35,
        UNSPORTING_BEHAVIOR_MAJOR = 36,
        /** @deprecated*/
        PREPARED = 1,
        /** @deprecated*/
        INDIRECT_GOAL = 9,
        /** @deprecated*/
        CHIPPED_GOAL = 10,
        /** @deprecated*/
        KICK_TIMEOUT = 12,
        /** @deprecated*/
        ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA = 16,
        /** @deprecated*/
        ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED = 40,
        /** @deprecated*/
        BOT_CRASH_UNIQUE_SKIPPED = 23,
        /** @deprecated*/
        BOT_PUSHED_BOT_SKIPPED = 25,
        /** @deprecated*/
        DEFENDER_IN_DEFENSE_AREA_PARTIALLY = 30,
        /** @deprecated*/
        MULTIPLE_PLACEMENT_FAILURES = 33
    }
    export class BallLeftField extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): BallLeftField {
            const message = new BallLeftField({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BallLeftField {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BallLeftField();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BallLeftField {
            return BallLeftField.deserialize(bytes);
        }
    }
    export class AimlessKick extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            kickLocation?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("kickLocation" in data && data.kickLocation != undefined) {
                    this.kickLocation = data.kickLocation;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get kickLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set kickLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasKickLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): AimlessKick {
            const message = new AimlessKick({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.kickLocation != null) {
                message.kickLocation = dependency_2.Vector2.fromObject(data.kickLocation);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.kickLocation != null) {
                data.kickLocation = this.kickLocation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasKickLocation)
                writer.writeMessage(4, this.kickLocation, () => this.kickLocation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AimlessKick {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AimlessKick();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.kickLocation, () => message.kickLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AimlessKick {
            return AimlessKick.deserialize(bytes);
        }
    }
    export class Goal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            kickingTeam?: dependency_1.Team;
            kickingBot?: number;
            location?: dependency_2.Vector2;
            kickLocation?: dependency_2.Vector2;
            maxBallHeight?: number;
            numRobotsByTeam?: number;
            lastTouchByTeam?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("kickingTeam" in data && data.kickingTeam != undefined) {
                    this.kickingTeam = data.kickingTeam;
                }
                if ("kickingBot" in data && data.kickingBot != undefined) {
                    this.kickingBot = data.kickingBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("kickLocation" in data && data.kickLocation != undefined) {
                    this.kickLocation = data.kickLocation;
                }
                if ("maxBallHeight" in data && data.maxBallHeight != undefined) {
                    this.maxBallHeight = data.maxBallHeight;
                }
                if ("numRobotsByTeam" in data && data.numRobotsByTeam != undefined) {
                    this.numRobotsByTeam = data.numRobotsByTeam;
                }
                if ("lastTouchByTeam" in data && data.lastTouchByTeam != undefined) {
                    this.lastTouchByTeam = data.lastTouchByTeam;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get kickingTeam() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_1.Team.UNKNOWN) as dependency_1.Team;
        }
        set kickingTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 6, value);
        }
        get hasKickingTeam() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get kickingBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set kickingBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasKickingBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get kickLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set kickLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasKickLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get maxBallHeight() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set maxBallHeight(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasMaxBallHeight() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get numRobotsByTeam() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set numRobotsByTeam(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get hasNumRobotsByTeam() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get lastTouchByTeam() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set lastTouchByTeam(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get hasLastTouchByTeam() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get hasMessage() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            kickingTeam?: dependency_1.Team;
            kickingBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            maxBallHeight?: number;
            numRobotsByTeam?: number;
            lastTouchByTeam?: number;
            message?: string;
        }): Goal {
            const message = new Goal({
                byTeam: data.byTeam
            });
            if (data.kickingTeam != null) {
                message.kickingTeam = data.kickingTeam;
            }
            if (data.kickingBot != null) {
                message.kickingBot = data.kickingBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.kickLocation != null) {
                message.kickLocation = dependency_2.Vector2.fromObject(data.kickLocation);
            }
            if (data.maxBallHeight != null) {
                message.maxBallHeight = data.maxBallHeight;
            }
            if (data.numRobotsByTeam != null) {
                message.numRobotsByTeam = data.numRobotsByTeam;
            }
            if (data.lastTouchByTeam != null) {
                message.lastTouchByTeam = data.lastTouchByTeam;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                kickingTeam?: dependency_1.Team;
                kickingBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                maxBallHeight?: number;
                numRobotsByTeam?: number;
                lastTouchByTeam?: number;
                message?: string;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.kickingTeam != null) {
                data.kickingTeam = this.kickingTeam;
            }
            if (this.kickingBot != null) {
                data.kickingBot = this.kickingBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.kickLocation != null) {
                data.kickLocation = this.kickLocation.toObject();
            }
            if (this.maxBallHeight != null) {
                data.maxBallHeight = this.maxBallHeight;
            }
            if (this.numRobotsByTeam != null) {
                data.numRobotsByTeam = this.numRobotsByTeam;
            }
            if (this.lastTouchByTeam != null) {
                data.lastTouchByTeam = this.lastTouchByTeam;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasKickingTeam)
                writer.writeEnum(6, this.kickingTeam);
            if (this.hasKickingBot)
                writer.writeUint32(2, this.kickingBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasKickLocation)
                writer.writeMessage(4, this.kickLocation, () => this.kickLocation.serialize(writer));
            if (this.hasMaxBallHeight)
                writer.writeFloat(5, this.maxBallHeight);
            if (this.hasNumRobotsByTeam)
                writer.writeUint32(7, this.numRobotsByTeam);
            if (this.hasLastTouchByTeam)
                writer.writeUint64(8, this.lastTouchByTeam);
            if (this.hasMessage && this.message.length)
                writer.writeString(9, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Goal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Goal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 6:
                        message.kickingTeam = reader.readEnum();
                        break;
                    case 2:
                        message.kickingBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.kickLocation, () => message.kickLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 5:
                        message.maxBallHeight = reader.readFloat();
                        break;
                    case 7:
                        message.numRobotsByTeam = reader.readUint32();
                        break;
                    case 8:
                        message.lastTouchByTeam = reader.readUint64();
                        break;
                    case 9:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Goal {
            return Goal.deserialize(bytes);
        }
    }
    export class IndirectGoal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            kickLocation?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("kickLocation" in data && data.kickLocation != undefined) {
                    this.kickLocation = data.kickLocation;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get kickLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set kickLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasKickLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): IndirectGoal {
            const message = new IndirectGoal({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.kickLocation != null) {
                message.kickLocation = dependency_2.Vector2.fromObject(data.kickLocation);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.kickLocation != null) {
                data.kickLocation = this.kickLocation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasKickLocation)
                writer.writeMessage(4, this.kickLocation, () => this.kickLocation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndirectGoal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndirectGoal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.kickLocation, () => message.kickLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndirectGoal {
            return IndirectGoal.deserialize(bytes);
        }
    }
    export class ChippedGoal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            kickLocation?: dependency_2.Vector2;
            maxBallHeight?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("kickLocation" in data && data.kickLocation != undefined) {
                    this.kickLocation = data.kickLocation;
                }
                if ("maxBallHeight" in data && data.maxBallHeight != undefined) {
                    this.maxBallHeight = data.maxBallHeight;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get kickLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set kickLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasKickLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get maxBallHeight() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set maxBallHeight(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasMaxBallHeight() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            maxBallHeight?: number;
        }): ChippedGoal {
            const message = new ChippedGoal({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.kickLocation != null) {
                message.kickLocation = dependency_2.Vector2.fromObject(data.kickLocation);
            }
            if (data.maxBallHeight != null) {
                message.maxBallHeight = data.maxBallHeight;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                kickLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                maxBallHeight?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.kickLocation != null) {
                data.kickLocation = this.kickLocation.toObject();
            }
            if (this.maxBallHeight != null) {
                data.maxBallHeight = this.maxBallHeight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasKickLocation)
                writer.writeMessage(4, this.kickLocation, () => this.kickLocation.serialize(writer));
            if (this.hasMaxBallHeight)
                writer.writeFloat(5, this.maxBallHeight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChippedGoal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChippedGoal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.kickLocation, () => message.kickLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 5:
                        message.maxBallHeight = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChippedGoal {
            return ChippedGoal.deserialize(bytes);
        }
    }
    export class BotTooFastInStop extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            speed?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("speed" in data && data.speed != undefined) {
                    this.speed = data.speed;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get speed() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set speed(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasSpeed() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            speed?: number;
        }): BotTooFastInStop {
            const message = new BotTooFastInStop({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.speed != null) {
                message.speed = data.speed;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                speed?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.speed != null) {
                data.speed = this.speed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasSpeed)
                writer.writeFloat(4, this.speed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotTooFastInStop {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotTooFastInStop();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.speed = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotTooFastInStop {
            return BotTooFastInStop.deserialize(bytes);
        }
    }
    export class DefenderTooCloseToKickPoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            distance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get distance() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set distance(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasDistance() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            distance?: number;
        }): DefenderTooCloseToKickPoint {
            const message = new DefenderTooCloseToKickPoint({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.distance != null) {
                message.distance = data.distance;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                distance?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasDistance)
                writer.writeFloat(4, this.distance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefenderTooCloseToKickPoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefenderTooCloseToKickPoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.distance = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DefenderTooCloseToKickPoint {
            return DefenderTooCloseToKickPoint.deserialize(bytes);
        }
    }
    export class BotCrashDrawn extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            botYellow?: number;
            botBlue?: number;
            location?: dependency_2.Vector2;
            crashSpeed?: number;
            speedDiff?: number;
            crashAngle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("botYellow" in data && data.botYellow != undefined) {
                    this.botYellow = data.botYellow;
                }
                if ("botBlue" in data && data.botBlue != undefined) {
                    this.botBlue = data.botBlue;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("crashSpeed" in data && data.crashSpeed != undefined) {
                    this.crashSpeed = data.crashSpeed;
                }
                if ("speedDiff" in data && data.speedDiff != undefined) {
                    this.speedDiff = data.speedDiff;
                }
                if ("crashAngle" in data && data.crashAngle != undefined) {
                    this.crashAngle = data.crashAngle;
                }
            }
        }
        get botYellow() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set botYellow(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasBotYellow() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get botBlue() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set botBlue(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasBotBlue() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get crashSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set crashSpeed(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasCrashSpeed() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get speedDiff() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set speedDiff(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasSpeedDiff() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get crashAngle() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set crashAngle(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get hasCrashAngle() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            botYellow?: number;
            botBlue?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            crashSpeed?: number;
            speedDiff?: number;
            crashAngle?: number;
        }): BotCrashDrawn {
            const message = new BotCrashDrawn({});
            if (data.botYellow != null) {
                message.botYellow = data.botYellow;
            }
            if (data.botBlue != null) {
                message.botBlue = data.botBlue;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.crashSpeed != null) {
                message.crashSpeed = data.crashSpeed;
            }
            if (data.speedDiff != null) {
                message.speedDiff = data.speedDiff;
            }
            if (data.crashAngle != null) {
                message.crashAngle = data.crashAngle;
            }
            return message;
        }
        toObject() {
            const data: {
                botYellow?: number;
                botBlue?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                crashSpeed?: number;
                speedDiff?: number;
                crashAngle?: number;
            } = {};
            if (this.botYellow != null) {
                data.botYellow = this.botYellow;
            }
            if (this.botBlue != null) {
                data.botBlue = this.botBlue;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.crashSpeed != null) {
                data.crashSpeed = this.crashSpeed;
            }
            if (this.speedDiff != null) {
                data.speedDiff = this.speedDiff;
            }
            if (this.crashAngle != null) {
                data.crashAngle = this.crashAngle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasBotYellow)
                writer.writeUint32(1, this.botYellow);
            if (this.hasBotBlue)
                writer.writeUint32(2, this.botBlue);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasCrashSpeed)
                writer.writeFloat(4, this.crashSpeed);
            if (this.hasSpeedDiff)
                writer.writeFloat(5, this.speedDiff);
            if (this.hasCrashAngle)
                writer.writeFloat(6, this.crashAngle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotCrashDrawn {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotCrashDrawn();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.botYellow = reader.readUint32();
                        break;
                    case 2:
                        message.botBlue = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.crashSpeed = reader.readFloat();
                        break;
                    case 5:
                        message.speedDiff = reader.readFloat();
                        break;
                    case 6:
                        message.crashAngle = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotCrashDrawn {
            return BotCrashDrawn.deserialize(bytes);
        }
    }
    export class BotCrashUnique extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            violator?: number;
            victim?: number;
            location?: dependency_2.Vector2;
            crashSpeed?: number;
            speedDiff?: number;
            crashAngle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("violator" in data && data.violator != undefined) {
                    this.violator = data.violator;
                }
                if ("victim" in data && data.victim != undefined) {
                    this.victim = data.victim;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("crashSpeed" in data && data.crashSpeed != undefined) {
                    this.crashSpeed = data.crashSpeed;
                }
                if ("speedDiff" in data && data.speedDiff != undefined) {
                    this.speedDiff = data.speedDiff;
                }
                if ("crashAngle" in data && data.crashAngle != undefined) {
                    this.crashAngle = data.crashAngle;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get violator() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set violator(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasViolator() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get victim() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set victim(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasVictim() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get crashSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set crashSpeed(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasCrashSpeed() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get speedDiff() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set speedDiff(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get hasSpeedDiff() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get crashAngle() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set crashAngle(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get hasCrashAngle() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            violator?: number;
            victim?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            crashSpeed?: number;
            speedDiff?: number;
            crashAngle?: number;
        }): BotCrashUnique {
            const message = new BotCrashUnique({
                byTeam: data.byTeam
            });
            if (data.violator != null) {
                message.violator = data.violator;
            }
            if (data.victim != null) {
                message.victim = data.victim;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.crashSpeed != null) {
                message.crashSpeed = data.crashSpeed;
            }
            if (data.speedDiff != null) {
                message.speedDiff = data.speedDiff;
            }
            if (data.crashAngle != null) {
                message.crashAngle = data.crashAngle;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                violator?: number;
                victim?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                crashSpeed?: number;
                speedDiff?: number;
                crashAngle?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.violator != null) {
                data.violator = this.violator;
            }
            if (this.victim != null) {
                data.victim = this.victim;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.crashSpeed != null) {
                data.crashSpeed = this.crashSpeed;
            }
            if (this.speedDiff != null) {
                data.speedDiff = this.speedDiff;
            }
            if (this.crashAngle != null) {
                data.crashAngle = this.crashAngle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasViolator)
                writer.writeUint32(2, this.violator);
            if (this.hasVictim)
                writer.writeUint32(3, this.victim);
            if (this.hasLocation)
                writer.writeMessage(4, this.location, () => this.location.serialize(writer));
            if (this.hasCrashSpeed)
                writer.writeFloat(5, this.crashSpeed);
            if (this.hasSpeedDiff)
                writer.writeFloat(6, this.speedDiff);
            if (this.hasCrashAngle)
                writer.writeFloat(7, this.crashAngle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotCrashUnique {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotCrashUnique();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.violator = reader.readUint32();
                        break;
                    case 3:
                        message.victim = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 5:
                        message.crashSpeed = reader.readFloat();
                        break;
                    case 6:
                        message.speedDiff = reader.readFloat();
                        break;
                    case 7:
                        message.crashAngle = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotCrashUnique {
            return BotCrashUnique.deserialize(bytes);
        }
    }
    export class BotPushedBot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            violator?: number;
            victim?: number;
            location?: dependency_2.Vector2;
            pushedDistance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("violator" in data && data.violator != undefined) {
                    this.violator = data.violator;
                }
                if ("victim" in data && data.victim != undefined) {
                    this.victim = data.victim;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("pushedDistance" in data && data.pushedDistance != undefined) {
                    this.pushedDistance = data.pushedDistance;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get violator() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set violator(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasViolator() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get victim() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set victim(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasVictim() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get pushedDistance() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set pushedDistance(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasPushedDistance() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            violator?: number;
            victim?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            pushedDistance?: number;
        }): BotPushedBot {
            const message = new BotPushedBot({
                byTeam: data.byTeam
            });
            if (data.violator != null) {
                message.violator = data.violator;
            }
            if (data.victim != null) {
                message.victim = data.victim;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.pushedDistance != null) {
                message.pushedDistance = data.pushedDistance;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                violator?: number;
                victim?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                pushedDistance?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.violator != null) {
                data.violator = this.violator;
            }
            if (this.victim != null) {
                data.victim = this.victim;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.pushedDistance != null) {
                data.pushedDistance = this.pushedDistance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasViolator)
                writer.writeUint32(2, this.violator);
            if (this.hasVictim)
                writer.writeUint32(3, this.victim);
            if (this.hasLocation)
                writer.writeMessage(4, this.location, () => this.location.serialize(writer));
            if (this.hasPushedDistance)
                writer.writeFloat(5, this.pushedDistance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotPushedBot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotPushedBot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.violator = reader.readUint32();
                        break;
                    case 3:
                        message.victim = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 5:
                        message.pushedDistance = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotPushedBot {
            return BotPushedBot.deserialize(bytes);
        }
    }
    export class BotTippedOver extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            ballLocation?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("ballLocation" in data && data.ballLocation != undefined) {
                    this.ballLocation = data.ballLocation;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ballLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set ballLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasBallLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): BotTippedOver {
            const message = new BotTippedOver({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.ballLocation != null) {
                message.ballLocation = dependency_2.Vector2.fromObject(data.ballLocation);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.ballLocation != null) {
                data.ballLocation = this.ballLocation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasBallLocation)
                writer.writeMessage(4, this.ballLocation, () => this.ballLocation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotTippedOver {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotTippedOver();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.ballLocation, () => message.ballLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotTippedOver {
            return BotTippedOver.deserialize(bytes);
        }
    }
    export class DefenderInDefenseArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            distance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get distance() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set distance(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasDistance() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            distance?: number;
        }): DefenderInDefenseArea {
            const message = new DefenderInDefenseArea({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.distance != null) {
                message.distance = data.distance;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                distance?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasDistance)
                writer.writeFloat(4, this.distance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefenderInDefenseArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefenderInDefenseArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.distance = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DefenderInDefenseArea {
            return DefenderInDefenseArea.deserialize(bytes);
        }
    }
    export class DefenderInDefenseAreaPartially extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            distance?: number;
            ballLocation?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
                if ("ballLocation" in data && data.ballLocation != undefined) {
                    this.ballLocation = data.ballLocation;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get distance() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set distance(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasDistance() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ballLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 5) as dependency_2.Vector2;
        }
        set ballLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasBallLocation() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            distance?: number;
            ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): DefenderInDefenseAreaPartially {
            const message = new DefenderInDefenseAreaPartially({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.distance != null) {
                message.distance = data.distance;
            }
            if (data.ballLocation != null) {
                message.ballLocation = dependency_2.Vector2.fromObject(data.ballLocation);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                distance?: number;
                ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            if (this.ballLocation != null) {
                data.ballLocation = this.ballLocation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasDistance)
                writer.writeFloat(4, this.distance);
            if (this.hasBallLocation)
                writer.writeMessage(5, this.ballLocation, () => this.ballLocation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefenderInDefenseAreaPartially {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefenderInDefenseAreaPartially();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.distance = reader.readFloat();
                        break;
                    case 5:
                        reader.readMessage(message.ballLocation, () => message.ballLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DefenderInDefenseAreaPartially {
            return DefenderInDefenseAreaPartially.deserialize(bytes);
        }
    }
    export class AttackerTouchedBallInDefenseArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            distance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get distance() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set distance(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasDistance() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            distance?: number;
        }): AttackerTouchedBallInDefenseArea {
            const message = new AttackerTouchedBallInDefenseArea({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.distance != null) {
                message.distance = data.distance;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                distance?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasDistance)
                writer.writeFloat(4, this.distance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttackerTouchedBallInDefenseArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttackerTouchedBallInDefenseArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.distance = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttackerTouchedBallInDefenseArea {
            return AttackerTouchedBallInDefenseArea.deserialize(bytes);
        }
    }
    export class BotKickedBallTooFast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            initialBallSpeed?: number;
            chipped?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("initialBallSpeed" in data && data.initialBallSpeed != undefined) {
                    this.initialBallSpeed = data.initialBallSpeed;
                }
                if ("chipped" in data && data.chipped != undefined) {
                    this.chipped = data.chipped;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get initialBallSpeed() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set initialBallSpeed(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasInitialBallSpeed() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get chipped() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set chipped(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasChipped() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            initialBallSpeed?: number;
            chipped?: boolean;
        }): BotKickedBallTooFast {
            const message = new BotKickedBallTooFast({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.initialBallSpeed != null) {
                message.initialBallSpeed = data.initialBallSpeed;
            }
            if (data.chipped != null) {
                message.chipped = data.chipped;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                initialBallSpeed?: number;
                chipped?: boolean;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.initialBallSpeed != null) {
                data.initialBallSpeed = this.initialBallSpeed;
            }
            if (this.chipped != null) {
                data.chipped = this.chipped;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasInitialBallSpeed)
                writer.writeFloat(4, this.initialBallSpeed);
            if (this.hasChipped)
                writer.writeBool(5, this.chipped);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotKickedBallTooFast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotKickedBallTooFast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.initialBallSpeed = reader.readFloat();
                        break;
                    case 5:
                        message.chipped = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotKickedBallTooFast {
            return BotKickedBallTooFast.deserialize(bytes);
        }
    }
    export class BotDribbledBallTooFar extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            start?: dependency_2.Vector2;
            end?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get start() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set start(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasStart() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get end() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set end(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasEnd() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            start?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            end?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): BotDribbledBallTooFar {
            const message = new BotDribbledBallTooFar({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.start != null) {
                message.start = dependency_2.Vector2.fromObject(data.start);
            }
            if (data.end != null) {
                message.end = dependency_2.Vector2.fromObject(data.end);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                start?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                end?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.start != null) {
                data.start = this.start.toObject();
            }
            if (this.end != null) {
                data.end = this.end.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasStart)
                writer.writeMessage(3, this.start, () => this.start.serialize(writer));
            if (this.hasEnd)
                writer.writeMessage(4, this.end, () => this.end.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotDribbledBallTooFar {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotDribbledBallTooFar();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.start, () => message.start = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.end, () => message.end = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotDribbledBallTooFar {
            return BotDribbledBallTooFar.deserialize(bytes);
        }
    }
    export class AttackerTouchedOpponentInDefenseArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            victim?: number;
            location?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("victim" in data && data.victim != undefined) {
                    this.victim = data.victim;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get victim() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set victim(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasVictim() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            victim?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): AttackerTouchedOpponentInDefenseArea {
            const message = new AttackerTouchedOpponentInDefenseArea({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.victim != null) {
                message.victim = data.victim;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                victim?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.victim != null) {
                data.victim = this.victim;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasVictim)
                writer.writeUint32(4, this.victim);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttackerTouchedOpponentInDefenseArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttackerTouchedOpponentInDefenseArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 4:
                        message.victim = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttackerTouchedOpponentInDefenseArea {
            return AttackerTouchedOpponentInDefenseArea.deserialize(bytes);
        }
    }
    export class AttackerDoubleTouchedBall extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): AttackerDoubleTouchedBall {
            const message = new AttackerDoubleTouchedBall({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttackerDoubleTouchedBall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttackerDoubleTouchedBall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttackerDoubleTouchedBall {
            return AttackerDoubleTouchedBall.deserialize(bytes);
        }
    }
    export class AttackerTooCloseToDefenseArea extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            distance?: number;
            ballLocation?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
                if ("ballLocation" in data && data.ballLocation != undefined) {
                    this.ballLocation = data.ballLocation;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get distance() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set distance(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasDistance() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ballLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 5) as dependency_2.Vector2;
        }
        set ballLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasBallLocation() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            distance?: number;
            ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): AttackerTooCloseToDefenseArea {
            const message = new AttackerTooCloseToDefenseArea({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.distance != null) {
                message.distance = data.distance;
            }
            if (data.ballLocation != null) {
                message.ballLocation = dependency_2.Vector2.fromObject(data.ballLocation);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                distance?: number;
                ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            if (this.ballLocation != null) {
                data.ballLocation = this.ballLocation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasDistance)
                writer.writeFloat(4, this.distance);
            if (this.hasBallLocation)
                writer.writeMessage(5, this.ballLocation, () => this.ballLocation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttackerTooCloseToDefenseArea {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttackerTooCloseToDefenseArea();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.distance = reader.readFloat();
                        break;
                    case 5:
                        reader.readMessage(message.ballLocation, () => message.ballLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttackerTooCloseToDefenseArea {
            return AttackerTooCloseToDefenseArea.deserialize(bytes);
        }
    }
    export class BotHeldBallDeliberately extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
            duration?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasDuration() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            duration?: number;
        }): BotHeldBallDeliberately {
            const message = new BotHeldBallDeliberately({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                duration?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (this.hasDuration)
                writer.writeFloat(4, this.duration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotHeldBallDeliberately {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotHeldBallDeliberately();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 4:
                        message.duration = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotHeldBallDeliberately {
            return BotHeldBallDeliberately.deserialize(bytes);
        }
    }
    export class BotInterferedPlacement extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            byBot?: number;
            location?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("byBot" in data && data.byBot != undefined) {
                    this.byBot = data.byBot;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get byBot() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set byBot(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasByBot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 3) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            byBot?: number;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): BotInterferedPlacement {
            const message = new BotInterferedPlacement({
                byTeam: data.byTeam
            });
            if (data.byBot != null) {
                message.byBot = data.byBot;
            }
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                byBot?: number;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.byBot != null) {
                data.byBot = this.byBot;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasByBot)
                writer.writeUint32(2, this.byBot);
            if (this.hasLocation)
                writer.writeMessage(3, this.location, () => this.location.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotInterferedPlacement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotInterferedPlacement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.byBot = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotInterferedPlacement {
            return BotInterferedPlacement.deserialize(bytes);
        }
    }
    export class MultipleCards extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
        }): MultipleCards {
            const message = new MultipleCards({
                byTeam: data.byTeam
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleCards {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleCards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultipleCards {
            return MultipleCards.deserialize(bytes);
        }
    }
    export class MultipleFouls extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            causedGameEvents: GameEvent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                this.causedGameEvents = data.causedGameEvents;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get causedGameEvents() {
            return pb_1.Message.getRepeatedWrapperField(this, GameEvent, 2) as GameEvent[];
        }
        set causedGameEvents(value: GameEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            causedGameEvents?: ReturnType<typeof GameEvent.prototype.toObject>[];
        }): MultipleFouls {
            const message = new MultipleFouls({
                byTeam: data.byTeam,
                causedGameEvents: data.causedGameEvents.map(item => GameEvent.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                causedGameEvents?: ReturnType<typeof GameEvent.prototype.toObject>[];
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.causedGameEvents != null) {
                data.causedGameEvents = this.causedGameEvents.map((item: GameEvent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.causedGameEvents.length)
                writer.writeRepeatedMessage(2, this.causedGameEvents, (item: GameEvent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleFouls {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleFouls();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.causedGameEvents, () => pb_1.Message.addToRepeatedWrapperField(message, 2, GameEvent.deserialize(reader), GameEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultipleFouls {
            return MultipleFouls.deserialize(bytes);
        }
    }
    export class MultiplePlacementFailures extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
        }): MultiplePlacementFailures {
            const message = new MultiplePlacementFailures({
                byTeam: data.byTeam
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiplePlacementFailures {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiplePlacementFailures();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiplePlacementFailures {
            return MultiplePlacementFailures.deserialize(bytes);
        }
    }
    export class KickTimeout extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            location?: dependency_2.Vector2;
            time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 2) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasTime() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            time?: number;
        }): KickTimeout {
            const message = new KickTimeout({
                byTeam: data.byTeam
            });
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.time != null) {
                message.time = data.time;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                time?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.time != null) {
                data.time = this.time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasLocation)
                writer.writeMessage(2, this.location, () => this.location.serialize(writer));
            if (this.hasTime)
                writer.writeFloat(3, this.time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KickTimeout {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KickTimeout();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 3:
                        message.time = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KickTimeout {
            return KickTimeout.deserialize(bytes);
        }
    }
    export class NoProgressInGame extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            location?: dependency_2.Vector2;
            time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
            }
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 1) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasTime() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            time?: number;
        }): NoProgressInGame {
            const message = new NoProgressInGame({});
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.time != null) {
                message.time = data.time;
            }
            return message;
        }
        toObject() {
            const data: {
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                time?: number;
            } = {};
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.time != null) {
                data.time = this.time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasLocation)
                writer.writeMessage(1, this.location, () => this.location.serialize(writer));
            if (this.hasTime)
                writer.writeFloat(2, this.time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoProgressInGame {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NoProgressInGame();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 2:
                        message.time = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NoProgressInGame {
            return NoProgressInGame.deserialize(bytes);
        }
    }
    export class PlacementFailed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            remainingDistance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("remainingDistance" in data && data.remainingDistance != undefined) {
                    this.remainingDistance = data.remainingDistance;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get remainingDistance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set remainingDistance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasRemainingDistance() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            remainingDistance?: number;
        }): PlacementFailed {
            const message = new PlacementFailed({
                byTeam: data.byTeam
            });
            if (data.remainingDistance != null) {
                message.remainingDistance = data.remainingDistance;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                remainingDistance?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.remainingDistance != null) {
                data.remainingDistance = this.remainingDistance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasRemainingDistance)
                writer.writeFloat(2, this.remainingDistance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlacementFailed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlacementFailed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.remainingDistance = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlacementFailed {
            return PlacementFailed.deserialize(bytes);
        }
    }
    export class UnsportingBehaviorMinor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            reason: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                this.reason = data.reason;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get reason() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasReason() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            reason?: string;
        }): UnsportingBehaviorMinor {
            const message = new UnsportingBehaviorMinor({
                byTeam: data.byTeam,
                reason: data.reason
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                reason?: string;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasReason && this.reason.length)
                writer.writeString(2, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnsportingBehaviorMinor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnsportingBehaviorMinor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnsportingBehaviorMinor {
            return UnsportingBehaviorMinor.deserialize(bytes);
        }
    }
    export class UnsportingBehaviorMajor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            reason: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                this.reason = data.reason;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get reason() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasReason() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            reason?: string;
        }): UnsportingBehaviorMajor {
            const message = new UnsportingBehaviorMajor({
                byTeam: data.byTeam,
                reason: data.reason
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                reason?: string;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasReason && this.reason.length)
                writer.writeString(2, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnsportingBehaviorMajor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnsportingBehaviorMajor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnsportingBehaviorMajor {
            return UnsportingBehaviorMajor.deserialize(bytes);
        }
    }
    export class KeeperHeldBall extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            location?: dependency_2.Vector2;
            duration?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 2) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasDuration() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            duration?: number;
        }): KeeperHeldBall {
            const message = new KeeperHeldBall({
                byTeam: data.byTeam
            });
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                duration?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasLocation)
                writer.writeMessage(2, this.location, () => this.location.serialize(writer));
            if (this.hasDuration)
                writer.writeFloat(3, this.duration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeeperHeldBall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeeperHeldBall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 3:
                        message.duration = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeeperHeldBall {
            return KeeperHeldBall.deserialize(bytes);
        }
    }
    export class PlacementSucceeded extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            timeTaken?: number;
            precision?: number;
            distance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
                if ("precision" in data && data.precision != undefined) {
                    this.precision = data.precision;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeTaken(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasTimeTaken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get precision() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set precision(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasPrecision() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get distance() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set distance(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hasDistance() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            timeTaken?: number;
            precision?: number;
            distance?: number;
        }): PlacementSucceeded {
            const message = new PlacementSucceeded({
                byTeam: data.byTeam
            });
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            if (data.precision != null) {
                message.precision = data.precision;
            }
            if (data.distance != null) {
                message.distance = data.distance;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                timeTaken?: number;
                precision?: number;
                distance?: number;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            if (this.precision != null) {
                data.precision = this.precision;
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasTimeTaken)
                writer.writeFloat(2, this.timeTaken);
            if (this.hasPrecision)
                writer.writeFloat(3, this.precision);
            if (this.hasDistance)
                writer.writeFloat(4, this.distance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlacementSucceeded {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlacementSucceeded();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.timeTaken = reader.readFloat();
                        break;
                    case 3:
                        message.precision = reader.readFloat();
                        break;
                    case 4:
                        message.distance = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlacementSucceeded {
            return PlacementSucceeded.deserialize(bytes);
        }
    }
    export class Prepared extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timeTaken?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
            }
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timeTaken(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasTimeTaken() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            timeTaken?: number;
        }): Prepared {
            const message = new Prepared({});
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            return message;
        }
        toObject() {
            const data: {
                timeTaken?: number;
            } = {};
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTimeTaken)
                writer.writeFloat(1, this.timeTaken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Prepared {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Prepared();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timeTaken = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Prepared {
            return Prepared.deserialize(bytes);
        }
    }
    export class BotSubstitution extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
        }): BotSubstitution {
            const message = new BotSubstitution({
                byTeam: data.byTeam
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BotSubstitution {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BotSubstitution();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BotSubstitution {
            return BotSubstitution.deserialize(bytes);
        }
    }
    export class ChallengeFlag extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
        }): ChallengeFlag {
            const message = new ChallengeFlag({
                byTeam: data.byTeam
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChallengeFlag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChallengeFlag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChallengeFlag {
            return ChallengeFlag.deserialize(bytes);
        }
    }
    export class EmergencyStop extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
        }): EmergencyStop {
            const message = new EmergencyStop({
                byTeam: data.byTeam
            });
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmergencyStop {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmergencyStop();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmergencyStop {
            return EmergencyStop.deserialize(bytes);
        }
    }
    export class TooManyRobots extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            numRobotsAllowed?: number;
            numRobotsOnField?: number;
            ballLocation?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("numRobotsAllowed" in data && data.numRobotsAllowed != undefined) {
                    this.numRobotsAllowed = data.numRobotsAllowed;
                }
                if ("numRobotsOnField" in data && data.numRobotsOnField != undefined) {
                    this.numRobotsOnField = data.numRobotsOnField;
                }
                if ("ballLocation" in data && data.ballLocation != undefined) {
                    this.ballLocation = data.ballLocation;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get numRobotsAllowed() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set numRobotsAllowed(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hasNumRobotsAllowed() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get numRobotsOnField() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set numRobotsOnField(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasNumRobotsOnField() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ballLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 4) as dependency_2.Vector2;
        }
        set ballLocation(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasBallLocation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            numRobotsAllowed?: number;
            numRobotsOnField?: number;
            ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): TooManyRobots {
            const message = new TooManyRobots({
                byTeam: data.byTeam
            });
            if (data.numRobotsAllowed != null) {
                message.numRobotsAllowed = data.numRobotsAllowed;
            }
            if (data.numRobotsOnField != null) {
                message.numRobotsOnField = data.numRobotsOnField;
            }
            if (data.ballLocation != null) {
                message.ballLocation = dependency_2.Vector2.fromObject(data.ballLocation);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                numRobotsAllowed?: number;
                numRobotsOnField?: number;
                ballLocation?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.numRobotsAllowed != null) {
                data.numRobotsAllowed = this.numRobotsAllowed;
            }
            if (this.numRobotsOnField != null) {
                data.numRobotsOnField = this.numRobotsOnField;
            }
            if (this.ballLocation != null) {
                data.ballLocation = this.ballLocation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasNumRobotsAllowed)
                writer.writeInt32(2, this.numRobotsAllowed);
            if (this.hasNumRobotsOnField)
                writer.writeInt32(3, this.numRobotsOnField);
            if (this.hasBallLocation)
                writer.writeMessage(4, this.ballLocation, () => this.ballLocation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TooManyRobots {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TooManyRobots();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        message.numRobotsAllowed = reader.readInt32();
                        break;
                    case 3:
                        message.numRobotsOnField = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.ballLocation, () => message.ballLocation = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TooManyRobots {
            return TooManyRobots.deserialize(bytes);
        }
    }
    export class BoundaryCrossing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            location?: dependency_2.Vector2;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 2) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        }): BoundaryCrossing {
            const message = new BoundaryCrossing({
                byTeam: data.byTeam
            });
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasLocation)
                writer.writeMessage(2, this.location, () => this.location.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoundaryCrossing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoundaryCrossing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoundaryCrossing {
            return BoundaryCrossing.deserialize(bytes);
        }
    }
    export class PenaltyKickFailed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            byTeam: dependency_1.Team;
            location?: dependency_2.Vector2;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.byTeam = data.byTeam;
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get byTeam() {
            return pb_1.Message.getField(this, 1) as dependency_1.Team;
        }
        set byTeam(value: dependency_1.Team) {
            pb_1.Message.setField(this, 1, value);
        }
        get hasByTeam() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 2) as dependency_2.Vector2;
        }
        set location(value: dependency_2.Vector2) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get hasReason() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            byTeam?: dependency_1.Team;
            location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            reason?: string;
        }): PenaltyKickFailed {
            const message = new PenaltyKickFailed({
                byTeam: data.byTeam
            });
            if (data.location != null) {
                message.location = dependency_2.Vector2.fromObject(data.location);
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                byTeam?: dependency_1.Team;
                location?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
                reason?: string;
            } = {};
            if (this.byTeam != null) {
                data.byTeam = this.byTeam;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasByTeam)
                writer.writeEnum(1, this.byTeam);
            if (this.hasLocation)
                writer.writeMessage(2, this.location, () => this.location.serialize(writer));
            if (this.hasReason && this.reason.length)
                writer.writeString(3, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PenaltyKickFailed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PenaltyKickFailed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.byTeam = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.location, () => message.location = dependency_2.Vector2.deserialize(reader));
                        break;
                    case 3:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PenaltyKickFailed {
            return PenaltyKickFailed.deserialize(bytes);
        }
    }
}
