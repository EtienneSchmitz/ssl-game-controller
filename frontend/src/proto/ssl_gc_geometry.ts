// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: ssl_gc_geometry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Vector2 extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x: number;
        y: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.x = data.x;
            this.y = data.y;
        }
    }
    get x() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasX() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get y() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasY() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        x?: number;
        y?: number;
    }): Vector2 {
        const message = new Vector2({
            x: data.x,
            y: data.y
        });
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasX)
            writer.writeFloat(1, this.x);
        if (this.hasY)
            writer.writeFloat(2, this.y);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector2 {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector2();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vector2 {
        return Vector2.deserialize(bytes);
    }
}
export class Vector3 extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x: number;
        y: number;
        z: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.x = data.x;
            this.y = data.y;
            this.z = data.z;
        }
    }
    get x() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasX() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get y() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasY() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get z() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set z(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get hasZ() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        z?: number;
    }): Vector3 {
        const message = new Vector3({
            x: data.x,
            y: data.y,
            z: data.z
        });
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            z?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.z != null) {
            data.z = this.z;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasX)
            writer.writeFloat(1, this.x);
        if (this.hasY)
            writer.writeFloat(2, this.y);
        if (this.hasZ)
            writer.writeFloat(3, this.z);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector3 {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector3();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                case 3:
                    message.z = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vector3 {
        return Vector3.deserialize(bytes);
    }
}
