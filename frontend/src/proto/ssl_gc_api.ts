// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: ssl_gc_api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ssl_gc_state";
import * as dependency_2 from "./ssl_gc_change";
import * as dependency_3 from "./ssl_gc_engine";
import * as dependency_4 from "./ssl_gc_engine_config";
import * as dependency_5 from "./google/protobuf/duration";
import * as pb_1 from "google-protobuf";
export class Output extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        matchState?: dependency_1.State;
        gcState?: dependency_3.GcState;
        protocol?: Protocol;
        config?: dependency_4.Config;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("matchState" in data && data.matchState != undefined) {
                this.matchState = data.matchState;
            }
            if ("gcState" in data && data.gcState != undefined) {
                this.gcState = data.gcState;
            }
            if ("protocol" in data && data.protocol != undefined) {
                this.protocol = data.protocol;
            }
            if ("config" in data && data.config != undefined) {
                this.config = data.config;
            }
        }
    }
    get matchState() {
        return pb_1.Message.getWrapperField(this, dependency_1.State, 1) as dependency_1.State;
    }
    set matchState(value: dependency_1.State) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasMatchState() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get gcState() {
        return pb_1.Message.getWrapperField(this, dependency_3.GcState, 2) as dependency_3.GcState;
    }
    set gcState(value: dependency_3.GcState) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasGcState() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get protocol() {
        return pb_1.Message.getWrapperField(this, Protocol, 3) as Protocol;
    }
    set protocol(value: Protocol) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasProtocol() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get config() {
        return pb_1.Message.getWrapperField(this, dependency_4.Config, 4) as dependency_4.Config;
    }
    set config(value: dependency_4.Config) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasConfig() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        matchState?: ReturnType<typeof dependency_1.State.prototype.toObject>;
        gcState?: ReturnType<typeof dependency_3.GcState.prototype.toObject>;
        protocol?: ReturnType<typeof Protocol.prototype.toObject>;
        config?: ReturnType<typeof dependency_4.Config.prototype.toObject>;
    }): Output {
        const message = new Output({});
        if (data.matchState != null) {
            message.matchState = dependency_1.State.fromObject(data.matchState);
        }
        if (data.gcState != null) {
            message.gcState = dependency_3.GcState.fromObject(data.gcState);
        }
        if (data.protocol != null) {
            message.protocol = Protocol.fromObject(data.protocol);
        }
        if (data.config != null) {
            message.config = dependency_4.Config.fromObject(data.config);
        }
        return message;
    }
    toObject() {
        const data: {
            matchState?: ReturnType<typeof dependency_1.State.prototype.toObject>;
            gcState?: ReturnType<typeof dependency_3.GcState.prototype.toObject>;
            protocol?: ReturnType<typeof Protocol.prototype.toObject>;
            config?: ReturnType<typeof dependency_4.Config.prototype.toObject>;
        } = {};
        if (this.matchState != null) {
            data.matchState = this.matchState.toObject();
        }
        if (this.gcState != null) {
            data.gcState = this.gcState.toObject();
        }
        if (this.protocol != null) {
            data.protocol = this.protocol.toObject();
        }
        if (this.config != null) {
            data.config = this.config.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasMatchState)
            writer.writeMessage(1, this.matchState, () => this.matchState.serialize(writer));
        if (this.hasGcState)
            writer.writeMessage(2, this.gcState, () => this.gcState.serialize(writer));
        if (this.hasProtocol)
            writer.writeMessage(3, this.protocol, () => this.protocol.serialize(writer));
        if (this.hasConfig)
            writer.writeMessage(4, this.config, () => this.config.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Output {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Output();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.matchState, () => message.matchState = dependency_1.State.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.gcState, () => message.gcState = dependency_3.GcState.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.protocol, () => message.protocol = Protocol.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.config, () => message.config = dependency_4.Config.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Output {
        return Output.deserialize(bytes);
    }
}
export class Protocol extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        delta?: boolean;
        entry: ProtocolEntry[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("delta" in data && data.delta != undefined) {
                this.delta = data.delta;
            }
            this.entry = data.entry;
        }
    }
    get delta() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set delta(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasDelta() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get entry() {
        return pb_1.Message.getRepeatedWrapperField(this, ProtocolEntry, 2) as ProtocolEntry[];
    }
    set entry(value: ProtocolEntry[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        delta?: boolean;
        entry?: ReturnType<typeof ProtocolEntry.prototype.toObject>[];
    }): Protocol {
        const message = new Protocol({
            entry: data.entry.map(item => ProtocolEntry.fromObject(item))
        });
        if (data.delta != null) {
            message.delta = data.delta;
        }
        return message;
    }
    toObject() {
        const data: {
            delta?: boolean;
            entry?: ReturnType<typeof ProtocolEntry.prototype.toObject>[];
        } = {};
        if (this.delta != null) {
            data.delta = this.delta;
        }
        if (this.entry != null) {
            data.entry = this.entry.map((item: ProtocolEntry) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasDelta)
            writer.writeBool(1, this.delta);
        if (this.entry.length)
            writer.writeRepeatedMessage(2, this.entry, (item: ProtocolEntry) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Protocol {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Protocol();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.delta = reader.readBool();
                    break;
                case 2:
                    reader.readMessage(message.entry, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ProtocolEntry.deserialize(reader), ProtocolEntry));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Protocol {
        return Protocol.deserialize(bytes);
    }
}
export class ProtocolEntry extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        change?: dependency_2.Change;
        matchTimeElapsed?: dependency_5.google.protobuf.Duration;
        stageTimeElapsed?: dependency_5.google.protobuf.Duration;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("change" in data && data.change != undefined) {
                this.change = data.change;
            }
            if ("matchTimeElapsed" in data && data.matchTimeElapsed != undefined) {
                this.matchTimeElapsed = data.matchTimeElapsed;
            }
            if ("stageTimeElapsed" in data && data.stageTimeElapsed != undefined) {
                this.stageTimeElapsed = data.stageTimeElapsed;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get change() {
        return pb_1.Message.getWrapperField(this, dependency_2.Change, 2) as dependency_2.Change;
    }
    set change(value: dependency_2.Change) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasChange() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get matchTimeElapsed() {
        return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Duration, 3) as dependency_5.google.protobuf.Duration;
    }
    set matchTimeElapsed(value: dependency_5.google.protobuf.Duration) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasMatchTimeElapsed() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get stageTimeElapsed() {
        return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Duration, 4) as dependency_5.google.protobuf.Duration;
    }
    set stageTimeElapsed(value: dependency_5.google.protobuf.Duration) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasStageTimeElapsed() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        id?: number;
        change?: ReturnType<typeof dependency_2.Change.prototype.toObject>;
        matchTimeElapsed?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
        stageTimeElapsed?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
    }): ProtocolEntry {
        const message = new ProtocolEntry({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.change != null) {
            message.change = dependency_2.Change.fromObject(data.change);
        }
        if (data.matchTimeElapsed != null) {
            message.matchTimeElapsed = dependency_5.google.protobuf.Duration.fromObject(data.matchTimeElapsed);
        }
        if (data.stageTimeElapsed != null) {
            message.stageTimeElapsed = dependency_5.google.protobuf.Duration.fromObject(data.stageTimeElapsed);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            change?: ReturnType<typeof dependency_2.Change.prototype.toObject>;
            matchTimeElapsed?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
            stageTimeElapsed?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.change != null) {
            data.change = this.change.toObject();
        }
        if (this.matchTimeElapsed != null) {
            data.matchTimeElapsed = this.matchTimeElapsed.toObject();
        }
        if (this.stageTimeElapsed != null) {
            data.stageTimeElapsed = this.stageTimeElapsed.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeInt32(1, this.id);
        if (this.hasChange)
            writer.writeMessage(2, this.change, () => this.change.serialize(writer));
        if (this.hasMatchTimeElapsed)
            writer.writeMessage(3, this.matchTimeElapsed, () => this.matchTimeElapsed.serialize(writer));
        if (this.hasStageTimeElapsed)
            writer.writeMessage(4, this.stageTimeElapsed, () => this.stageTimeElapsed.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.change, () => message.change = dependency_2.Change.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.matchTimeElapsed, () => message.matchTimeElapsed = dependency_5.google.protobuf.Duration.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.stageTimeElapsed, () => message.stageTimeElapsed = dependency_5.google.protobuf.Duration.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtocolEntry {
        return ProtocolEntry.deserialize(bytes);
    }
}
export class Input extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        change?: dependency_2.Change;
        resetMatch?: boolean;
        configDelta?: dependency_4.Config;
        continueAction?: dependency_3.ContinueAction;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("change" in data && data.change != undefined) {
                this.change = data.change;
            }
            if ("resetMatch" in data && data.resetMatch != undefined) {
                this.resetMatch = data.resetMatch;
            }
            if ("configDelta" in data && data.configDelta != undefined) {
                this.configDelta = data.configDelta;
            }
            if ("continueAction" in data && data.continueAction != undefined) {
                this.continueAction = data.continueAction;
            }
        }
    }
    get change() {
        return pb_1.Message.getWrapperField(this, dependency_2.Change, 1) as dependency_2.Change;
    }
    set change(value: dependency_2.Change) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasChange() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get resetMatch() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set resetMatch(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasResetMatch() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get configDelta() {
        return pb_1.Message.getWrapperField(this, dependency_4.Config, 3) as dependency_4.Config;
    }
    set configDelta(value: dependency_4.Config) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasConfigDelta() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get continueAction() {
        return pb_1.Message.getWrapperField(this, dependency_3.ContinueAction, 4) as dependency_3.ContinueAction;
    }
    set continueAction(value: dependency_3.ContinueAction) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasContinueAction() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        change?: ReturnType<typeof dependency_2.Change.prototype.toObject>;
        resetMatch?: boolean;
        configDelta?: ReturnType<typeof dependency_4.Config.prototype.toObject>;
        continueAction?: ReturnType<typeof dependency_3.ContinueAction.prototype.toObject>;
    }): Input {
        const message = new Input({});
        if (data.change != null) {
            message.change = dependency_2.Change.fromObject(data.change);
        }
        if (data.resetMatch != null) {
            message.resetMatch = data.resetMatch;
        }
        if (data.configDelta != null) {
            message.configDelta = dependency_4.Config.fromObject(data.configDelta);
        }
        if (data.continueAction != null) {
            message.continueAction = dependency_3.ContinueAction.fromObject(data.continueAction);
        }
        return message;
    }
    toObject() {
        const data: {
            change?: ReturnType<typeof dependency_2.Change.prototype.toObject>;
            resetMatch?: boolean;
            configDelta?: ReturnType<typeof dependency_4.Config.prototype.toObject>;
            continueAction?: ReturnType<typeof dependency_3.ContinueAction.prototype.toObject>;
        } = {};
        if (this.change != null) {
            data.change = this.change.toObject();
        }
        if (this.resetMatch != null) {
            data.resetMatch = this.resetMatch;
        }
        if (this.configDelta != null) {
            data.configDelta = this.configDelta.toObject();
        }
        if (this.continueAction != null) {
            data.continueAction = this.continueAction.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasChange)
            writer.writeMessage(1, this.change, () => this.change.serialize(writer));
        if (this.hasResetMatch)
            writer.writeBool(2, this.resetMatch);
        if (this.hasConfigDelta)
            writer.writeMessage(3, this.configDelta, () => this.configDelta.serialize(writer));
        if (this.hasContinueAction)
            writer.writeMessage(4, this.continueAction, () => this.continueAction.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Input {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Input();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.change, () => message.change = dependency_2.Change.deserialize(reader));
                    break;
                case 2:
                    message.resetMatch = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message.configDelta, () => message.configDelta = dependency_4.Config.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.continueAction, () => message.continueAction = dependency_3.ContinueAction.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Input {
        return Input.deserialize(bytes);
    }
}
