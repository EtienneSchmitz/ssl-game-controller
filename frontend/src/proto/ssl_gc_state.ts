// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: ssl_gc_state.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ssl_gc_common";
import * as dependency_2 from "./ssl_gc_geometry";
import * as dependency_3 from "./ssl_gc_game_event";
import * as dependency_4 from "./ssl_gc_referee_message";
import * as dependency_5 from "./google/protobuf/duration";
import * as dependency_6 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export class YellowCard extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        causedByGameEvent?: dependency_3.GameEvent;
        timeRemaining?: dependency_5.google.protobuf.Duration;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("causedByGameEvent" in data && data.causedByGameEvent != undefined) {
                this.causedByGameEvent = data.causedByGameEvent;
            }
            if ("timeRemaining" in data && data.timeRemaining != undefined) {
                this.timeRemaining = data.timeRemaining;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get causedByGameEvent() {
        return pb_1.Message.getWrapperField(this, dependency_3.GameEvent, 2) as dependency_3.GameEvent;
    }
    set causedByGameEvent(value: dependency_3.GameEvent) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCausedByGameEvent() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get timeRemaining() {
        return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Duration, 3) as dependency_5.google.protobuf.Duration;
    }
    set timeRemaining(value: dependency_5.google.protobuf.Duration) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasTimeRemaining() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        id?: number;
        causedByGameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
        timeRemaining?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
    }): YellowCard {
        const message = new YellowCard({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.causedByGameEvent != null) {
            message.causedByGameEvent = dependency_3.GameEvent.fromObject(data.causedByGameEvent);
        }
        if (data.timeRemaining != null) {
            message.timeRemaining = dependency_5.google.protobuf.Duration.fromObject(data.timeRemaining);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            causedByGameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
            timeRemaining?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.causedByGameEvent != null) {
            data.causedByGameEvent = this.causedByGameEvent.toObject();
        }
        if (this.timeRemaining != null) {
            data.timeRemaining = this.timeRemaining.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeUint32(1, this.id);
        if (this.hasCausedByGameEvent)
            writer.writeMessage(2, this.causedByGameEvent, () => this.causedByGameEvent.serialize(writer));
        if (this.hasTimeRemaining)
            writer.writeMessage(3, this.timeRemaining, () => this.timeRemaining.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): YellowCard {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new YellowCard();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.causedByGameEvent, () => message.causedByGameEvent = dependency_3.GameEvent.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.timeRemaining, () => message.timeRemaining = dependency_5.google.protobuf.Duration.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): YellowCard {
        return YellowCard.deserialize(bytes);
    }
}
export class RedCard extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        causedByGameEvent?: dependency_3.GameEvent;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("causedByGameEvent" in data && data.causedByGameEvent != undefined) {
                this.causedByGameEvent = data.causedByGameEvent;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get causedByGameEvent() {
        return pb_1.Message.getWrapperField(this, dependency_3.GameEvent, 2) as dependency_3.GameEvent;
    }
    set causedByGameEvent(value: dependency_3.GameEvent) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCausedByGameEvent() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        id?: number;
        causedByGameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
    }): RedCard {
        const message = new RedCard({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.causedByGameEvent != null) {
            message.causedByGameEvent = dependency_3.GameEvent.fromObject(data.causedByGameEvent);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            causedByGameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.causedByGameEvent != null) {
            data.causedByGameEvent = this.causedByGameEvent.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeUint32(1, this.id);
        if (this.hasCausedByGameEvent)
            writer.writeMessage(2, this.causedByGameEvent, () => this.causedByGameEvent.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedCard {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedCard();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.causedByGameEvent, () => message.causedByGameEvent = dependency_3.GameEvent.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RedCard {
        return RedCard.deserialize(bytes);
    }
}
export class Foul extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        causedByGameEvent?: dependency_3.GameEvent;
        timestamp?: dependency_6.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("causedByGameEvent" in data && data.causedByGameEvent != undefined) {
                this.causedByGameEvent = data.causedByGameEvent;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get causedByGameEvent() {
        return pb_1.Message.getWrapperField(this, dependency_3.GameEvent, 2) as dependency_3.GameEvent;
    }
    set causedByGameEvent(value: dependency_3.GameEvent) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCausedByGameEvent() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get timestamp() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 3) as dependency_6.google.protobuf.Timestamp;
    }
    set timestamp(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasTimestamp() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        id?: number;
        causedByGameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
        timestamp?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
    }): Foul {
        const message = new Foul({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.causedByGameEvent != null) {
            message.causedByGameEvent = dependency_3.GameEvent.fromObject(data.causedByGameEvent);
        }
        if (data.timestamp != null) {
            message.timestamp = dependency_6.google.protobuf.Timestamp.fromObject(data.timestamp);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            causedByGameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
            timestamp?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.causedByGameEvent != null) {
            data.causedByGameEvent = this.causedByGameEvent.toObject();
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeUint32(1, this.id);
        if (this.hasCausedByGameEvent)
            writer.writeMessage(2, this.causedByGameEvent, () => this.causedByGameEvent.serialize(writer));
        if (this.hasTimestamp)
            writer.writeMessage(3, this.timestamp, () => this.timestamp.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Foul {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Foul();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.causedByGameEvent, () => message.causedByGameEvent = dependency_3.GameEvent.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.timestamp, () => message.timestamp = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Foul {
        return Foul.deserialize(bytes);
    }
}
export class Command extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type: Command.Type;
        forTeam: dependency_1.Team;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.type = data.type;
            this.forTeam = data.forTeam;
        }
    }
    get type() {
        return pb_1.Message.getField(this, 1) as Command.Type;
    }
    set type(value: Command.Type) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasType() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get forTeam() {
        return pb_1.Message.getField(this, 2) as dependency_1.Team;
    }
    set forTeam(value: dependency_1.Team) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasForTeam() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        type?: Command.Type;
        forTeam?: dependency_1.Team;
    }): Command {
        const message = new Command({
            type: data.type,
            forTeam: data.forTeam
        });
        return message;
    }
    toObject() {
        const data: {
            type?: Command.Type;
            forTeam?: dependency_1.Team;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.forTeam != null) {
            data.forTeam = this.forTeam;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasType)
            writer.writeEnum(1, this.type);
        if (this.hasForTeam)
            writer.writeEnum(2, this.forTeam);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.forTeam = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Command {
        return Command.deserialize(bytes);
    }
}
export namespace Command {
    export enum Type {
        UNKNOWN = 0,
        HALT = 1,
        STOP = 2,
        NORMAL_START = 3,
        FORCE_START = 4,
        DIRECT = 5,
        KICKOFF = 7,
        PENALTY = 8,
        TIMEOUT = 9,
        BALL_PLACEMENT = 10
    }
}
export class GameState extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type: GameState.Type;
        forTeam?: dependency_1.Team;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.type = data.type;
            if ("forTeam" in data && data.forTeam != undefined) {
                this.forTeam = data.forTeam;
            }
        }
    }
    get type() {
        return pb_1.Message.getField(this, 1) as GameState.Type;
    }
    set type(value: GameState.Type) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasType() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get forTeam() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.Team.UNKNOWN) as dependency_1.Team;
    }
    set forTeam(value: dependency_1.Team) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasForTeam() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        type?: GameState.Type;
        forTeam?: dependency_1.Team;
    }): GameState {
        const message = new GameState({
            type: data.type
        });
        if (data.forTeam != null) {
            message.forTeam = data.forTeam;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: GameState.Type;
            forTeam?: dependency_1.Team;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.forTeam != null) {
            data.forTeam = this.forTeam;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasType)
            writer.writeEnum(1, this.type);
        if (this.hasForTeam)
            writer.writeEnum(2, this.forTeam);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameState {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameState();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.forTeam = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameState {
        return GameState.deserialize(bytes);
    }
}
export namespace GameState {
    export enum Type {
        UNKNOWN = 0,
        HALT = 1,
        STOP = 2,
        RUNNING = 3,
        FREE_KICK = 4,
        KICKOFF = 5,
        PENALTY = 6,
        TIMEOUT = 7,
        BALL_PLACEMENT = 8
    }
}
export class Proposal extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        timestamp?: dependency_6.google.protobuf.Timestamp;
        gameEvent?: dependency_3.GameEvent;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("gameEvent" in data && data.gameEvent != undefined) {
                this.gameEvent = data.gameEvent;
            }
        }
    }
    get timestamp() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 1) as dependency_6.google.protobuf.Timestamp;
    }
    set timestamp(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasTimestamp() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get gameEvent() {
        return pb_1.Message.getWrapperField(this, dependency_3.GameEvent, 2) as dependency_3.GameEvent;
    }
    set gameEvent(value: dependency_3.GameEvent) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasGameEvent() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        timestamp?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        gameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
    }): Proposal {
        const message = new Proposal({});
        if (data.timestamp != null) {
            message.timestamp = dependency_6.google.protobuf.Timestamp.fromObject(data.timestamp);
        }
        if (data.gameEvent != null) {
            message.gameEvent = dependency_3.GameEvent.fromObject(data.gameEvent);
        }
        return message;
    }
    toObject() {
        const data: {
            timestamp?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
            gameEvent?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>;
        } = {};
        if (this.timestamp != null) {
            data.timestamp = this.timestamp.toObject();
        }
        if (this.gameEvent != null) {
            data.gameEvent = this.gameEvent.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasTimestamp)
            writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
        if (this.hasGameEvent)
            writer.writeMessage(2, this.gameEvent, () => this.gameEvent.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Proposal {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proposal();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.timestamp, () => message.timestamp = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.gameEvent, () => message.gameEvent = dependency_3.GameEvent.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Proposal {
        return Proposal.deserialize(bytes);
    }
}
export class ProposalGroup extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        proposals: Proposal[];
        accepted?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            this.proposals = data.proposals;
            if ("accepted" in data && data.accepted != undefined) {
                this.accepted = data.accepted;
            }
        }
    }
    get proposals() {
        return pb_1.Message.getRepeatedWrapperField(this, Proposal, 1) as Proposal[];
    }
    set proposals(value: Proposal[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get accepted() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set accepted(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasAccepted() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        proposals?: ReturnType<typeof Proposal.prototype.toObject>[];
        accepted?: boolean;
    }): ProposalGroup {
        const message = new ProposalGroup({
            proposals: data.proposals.map(item => Proposal.fromObject(item))
        });
        if (data.accepted != null) {
            message.accepted = data.accepted;
        }
        return message;
    }
    toObject() {
        const data: {
            proposals?: ReturnType<typeof Proposal.prototype.toObject>[];
            accepted?: boolean;
        } = {};
        if (this.proposals != null) {
            data.proposals = this.proposals.map((item: Proposal) => item.toObject());
        }
        if (this.accepted != null) {
            data.accepted = this.accepted;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.proposals.length)
            writer.writeRepeatedMessage(1, this.proposals, (item: Proposal) => item.serialize(writer));
        if (this.hasAccepted)
            writer.writeBool(2, this.accepted);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalGroup {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalGroup();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.proposals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Proposal.deserialize(reader), Proposal));
                    break;
                case 2:
                    message.accepted = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProposalGroup {
        return ProposalGroup.deserialize(bytes);
    }
}
export class TeamInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        goals?: number;
        goalkeeper?: number;
        yellowCards: YellowCard[];
        redCards: RedCard[];
        timeoutsLeft?: number;
        timeoutTimeLeft?: dependency_5.google.protobuf.Duration;
        onPositiveHalf?: boolean;
        fouls: Foul[];
        ballPlacementFailures?: number;
        ballPlacementFailuresReached?: boolean;
        canPlaceBall?: boolean;
        maxAllowedBots?: number;
        requestsBotSubstitutionSince?: dependency_6.google.protobuf.Timestamp;
        requestsTimeoutSince?: dependency_6.google.protobuf.Timestamp;
        requestsEmergencyStopSince?: dependency_6.google.protobuf.Timestamp;
        challengeFlags?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("goals" in data && data.goals != undefined) {
                this.goals = data.goals;
            }
            if ("goalkeeper" in data && data.goalkeeper != undefined) {
                this.goalkeeper = data.goalkeeper;
            }
            this.yellowCards = data.yellowCards;
            this.redCards = data.redCards;
            if ("timeoutsLeft" in data && data.timeoutsLeft != undefined) {
                this.timeoutsLeft = data.timeoutsLeft;
            }
            if ("timeoutTimeLeft" in data && data.timeoutTimeLeft != undefined) {
                this.timeoutTimeLeft = data.timeoutTimeLeft;
            }
            if ("onPositiveHalf" in data && data.onPositiveHalf != undefined) {
                this.onPositiveHalf = data.onPositiveHalf;
            }
            this.fouls = data.fouls;
            if ("ballPlacementFailures" in data && data.ballPlacementFailures != undefined) {
                this.ballPlacementFailures = data.ballPlacementFailures;
            }
            if ("ballPlacementFailuresReached" in data && data.ballPlacementFailuresReached != undefined) {
                this.ballPlacementFailuresReached = data.ballPlacementFailuresReached;
            }
            if ("canPlaceBall" in data && data.canPlaceBall != undefined) {
                this.canPlaceBall = data.canPlaceBall;
            }
            if ("maxAllowedBots" in data && data.maxAllowedBots != undefined) {
                this.maxAllowedBots = data.maxAllowedBots;
            }
            if ("requestsBotSubstitutionSince" in data && data.requestsBotSubstitutionSince != undefined) {
                this.requestsBotSubstitutionSince = data.requestsBotSubstitutionSince;
            }
            if ("requestsTimeoutSince" in data && data.requestsTimeoutSince != undefined) {
                this.requestsTimeoutSince = data.requestsTimeoutSince;
            }
            if ("requestsEmergencyStopSince" in data && data.requestsEmergencyStopSince != undefined) {
                this.requestsEmergencyStopSince = data.requestsEmergencyStopSince;
            }
            if ("challengeFlags" in data && data.challengeFlags != undefined) {
                this.challengeFlags = data.challengeFlags;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasName() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get goals() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set goals(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get hasGoals() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get goalkeeper() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set goalkeeper(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get hasGoalkeeper() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get yellowCards() {
        return pb_1.Message.getRepeatedWrapperField(this, YellowCard, 4) as YellowCard[];
    }
    set yellowCards(value: YellowCard[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get redCards() {
        return pb_1.Message.getRepeatedWrapperField(this, RedCard, 5) as RedCard[];
    }
    set redCards(value: RedCard[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get timeoutsLeft() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set timeoutsLeft(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get hasTimeoutsLeft() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get timeoutTimeLeft() {
        return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Duration, 7) as dependency_5.google.protobuf.Duration;
    }
    set timeoutTimeLeft(value: dependency_5.google.protobuf.Duration) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasTimeoutTimeLeft() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get onPositiveHalf() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set onPositiveHalf(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get hasOnPositiveHalf() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get fouls() {
        return pb_1.Message.getRepeatedWrapperField(this, Foul, 9) as Foul[];
    }
    set fouls(value: Foul[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    get ballPlacementFailures() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set ballPlacementFailures(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get hasBallPlacementFailures() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get ballPlacementFailuresReached() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set ballPlacementFailuresReached(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get hasBallPlacementFailuresReached() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get canPlaceBall() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set canPlaceBall(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get hasCanPlaceBall() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get maxAllowedBots() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set maxAllowedBots(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get hasMaxAllowedBots() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get requestsBotSubstitutionSince() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 14) as dependency_6.google.protobuf.Timestamp;
    }
    set requestsBotSubstitutionSince(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get hasRequestsBotSubstitutionSince() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get requestsTimeoutSince() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 15) as dependency_6.google.protobuf.Timestamp;
    }
    set requestsTimeoutSince(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get hasRequestsTimeoutSince() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get requestsEmergencyStopSince() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 16) as dependency_6.google.protobuf.Timestamp;
    }
    set requestsEmergencyStopSince(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get hasRequestsEmergencyStopSince() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get challengeFlags() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set challengeFlags(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get hasChallengeFlags() {
        return pb_1.Message.getField(this, 17) != null;
    }
    static fromObject(data: {
        name?: string;
        goals?: number;
        goalkeeper?: number;
        yellowCards?: ReturnType<typeof YellowCard.prototype.toObject>[];
        redCards?: ReturnType<typeof RedCard.prototype.toObject>[];
        timeoutsLeft?: number;
        timeoutTimeLeft?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
        onPositiveHalf?: boolean;
        fouls?: ReturnType<typeof Foul.prototype.toObject>[];
        ballPlacementFailures?: number;
        ballPlacementFailuresReached?: boolean;
        canPlaceBall?: boolean;
        maxAllowedBots?: number;
        requestsBotSubstitutionSince?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        requestsTimeoutSince?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        requestsEmergencyStopSince?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        challengeFlags?: number;
    }): TeamInfo {
        const message = new TeamInfo({
            yellowCards: data.yellowCards.map(item => YellowCard.fromObject(item)),
            redCards: data.redCards.map(item => RedCard.fromObject(item)),
            fouls: data.fouls.map(item => Foul.fromObject(item))
        });
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.goals != null) {
            message.goals = data.goals;
        }
        if (data.goalkeeper != null) {
            message.goalkeeper = data.goalkeeper;
        }
        if (data.timeoutsLeft != null) {
            message.timeoutsLeft = data.timeoutsLeft;
        }
        if (data.timeoutTimeLeft != null) {
            message.timeoutTimeLeft = dependency_5.google.protobuf.Duration.fromObject(data.timeoutTimeLeft);
        }
        if (data.onPositiveHalf != null) {
            message.onPositiveHalf = data.onPositiveHalf;
        }
        if (data.ballPlacementFailures != null) {
            message.ballPlacementFailures = data.ballPlacementFailures;
        }
        if (data.ballPlacementFailuresReached != null) {
            message.ballPlacementFailuresReached = data.ballPlacementFailuresReached;
        }
        if (data.canPlaceBall != null) {
            message.canPlaceBall = data.canPlaceBall;
        }
        if (data.maxAllowedBots != null) {
            message.maxAllowedBots = data.maxAllowedBots;
        }
        if (data.requestsBotSubstitutionSince != null) {
            message.requestsBotSubstitutionSince = dependency_6.google.protobuf.Timestamp.fromObject(data.requestsBotSubstitutionSince);
        }
        if (data.requestsTimeoutSince != null) {
            message.requestsTimeoutSince = dependency_6.google.protobuf.Timestamp.fromObject(data.requestsTimeoutSince);
        }
        if (data.requestsEmergencyStopSince != null) {
            message.requestsEmergencyStopSince = dependency_6.google.protobuf.Timestamp.fromObject(data.requestsEmergencyStopSince);
        }
        if (data.challengeFlags != null) {
            message.challengeFlags = data.challengeFlags;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            goals?: number;
            goalkeeper?: number;
            yellowCards?: ReturnType<typeof YellowCard.prototype.toObject>[];
            redCards?: ReturnType<typeof RedCard.prototype.toObject>[];
            timeoutsLeft?: number;
            timeoutTimeLeft?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
            onPositiveHalf?: boolean;
            fouls?: ReturnType<typeof Foul.prototype.toObject>[];
            ballPlacementFailures?: number;
            ballPlacementFailuresReached?: boolean;
            canPlaceBall?: boolean;
            maxAllowedBots?: number;
            requestsBotSubstitutionSince?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
            requestsTimeoutSince?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
            requestsEmergencyStopSince?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
            challengeFlags?: number;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.goals != null) {
            data.goals = this.goals;
        }
        if (this.goalkeeper != null) {
            data.goalkeeper = this.goalkeeper;
        }
        if (this.yellowCards != null) {
            data.yellowCards = this.yellowCards.map((item: YellowCard) => item.toObject());
        }
        if (this.redCards != null) {
            data.redCards = this.redCards.map((item: RedCard) => item.toObject());
        }
        if (this.timeoutsLeft != null) {
            data.timeoutsLeft = this.timeoutsLeft;
        }
        if (this.timeoutTimeLeft != null) {
            data.timeoutTimeLeft = this.timeoutTimeLeft.toObject();
        }
        if (this.onPositiveHalf != null) {
            data.onPositiveHalf = this.onPositiveHalf;
        }
        if (this.fouls != null) {
            data.fouls = this.fouls.map((item: Foul) => item.toObject());
        }
        if (this.ballPlacementFailures != null) {
            data.ballPlacementFailures = this.ballPlacementFailures;
        }
        if (this.ballPlacementFailuresReached != null) {
            data.ballPlacementFailuresReached = this.ballPlacementFailuresReached;
        }
        if (this.canPlaceBall != null) {
            data.canPlaceBall = this.canPlaceBall;
        }
        if (this.maxAllowedBots != null) {
            data.maxAllowedBots = this.maxAllowedBots;
        }
        if (this.requestsBotSubstitutionSince != null) {
            data.requestsBotSubstitutionSince = this.requestsBotSubstitutionSince.toObject();
        }
        if (this.requestsTimeoutSince != null) {
            data.requestsTimeoutSince = this.requestsTimeoutSince.toObject();
        }
        if (this.requestsEmergencyStopSince != null) {
            data.requestsEmergencyStopSince = this.requestsEmergencyStopSince.toObject();
        }
        if (this.challengeFlags != null) {
            data.challengeFlags = this.challengeFlags;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasName && this.name.length)
            writer.writeString(1, this.name);
        if (this.hasGoals)
            writer.writeInt32(2, this.goals);
        if (this.hasGoalkeeper)
            writer.writeInt32(3, this.goalkeeper);
        if (this.yellowCards.length)
            writer.writeRepeatedMessage(4, this.yellowCards, (item: YellowCard) => item.serialize(writer));
        if (this.redCards.length)
            writer.writeRepeatedMessage(5, this.redCards, (item: RedCard) => item.serialize(writer));
        if (this.hasTimeoutsLeft)
            writer.writeInt32(6, this.timeoutsLeft);
        if (this.hasTimeoutTimeLeft)
            writer.writeMessage(7, this.timeoutTimeLeft, () => this.timeoutTimeLeft.serialize(writer));
        if (this.hasOnPositiveHalf)
            writer.writeBool(8, this.onPositiveHalf);
        if (this.fouls.length)
            writer.writeRepeatedMessage(9, this.fouls, (item: Foul) => item.serialize(writer));
        if (this.hasBallPlacementFailures)
            writer.writeInt32(10, this.ballPlacementFailures);
        if (this.hasBallPlacementFailuresReached)
            writer.writeBool(11, this.ballPlacementFailuresReached);
        if (this.hasCanPlaceBall)
            writer.writeBool(12, this.canPlaceBall);
        if (this.hasMaxAllowedBots)
            writer.writeInt32(13, this.maxAllowedBots);
        if (this.hasRequestsBotSubstitutionSince)
            writer.writeMessage(14, this.requestsBotSubstitutionSince, () => this.requestsBotSubstitutionSince.serialize(writer));
        if (this.hasRequestsTimeoutSince)
            writer.writeMessage(15, this.requestsTimeoutSince, () => this.requestsTimeoutSince.serialize(writer));
        if (this.hasRequestsEmergencyStopSince)
            writer.writeMessage(16, this.requestsEmergencyStopSince, () => this.requestsEmergencyStopSince.serialize(writer));
        if (this.hasChallengeFlags)
            writer.writeInt32(17, this.challengeFlags);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.goals = reader.readInt32();
                    break;
                case 3:
                    message.goalkeeper = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.yellowCards, () => pb_1.Message.addToRepeatedWrapperField(message, 4, YellowCard.deserialize(reader), YellowCard));
                    break;
                case 5:
                    reader.readMessage(message.redCards, () => pb_1.Message.addToRepeatedWrapperField(message, 5, RedCard.deserialize(reader), RedCard));
                    break;
                case 6:
                    message.timeoutsLeft = reader.readInt32();
                    break;
                case 7:
                    reader.readMessage(message.timeoutTimeLeft, () => message.timeoutTimeLeft = dependency_5.google.protobuf.Duration.deserialize(reader));
                    break;
                case 8:
                    message.onPositiveHalf = reader.readBool();
                    break;
                case 9:
                    reader.readMessage(message.fouls, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Foul.deserialize(reader), Foul));
                    break;
                case 10:
                    message.ballPlacementFailures = reader.readInt32();
                    break;
                case 11:
                    message.ballPlacementFailuresReached = reader.readBool();
                    break;
                case 12:
                    message.canPlaceBall = reader.readBool();
                    break;
                case 13:
                    message.maxAllowedBots = reader.readInt32();
                    break;
                case 14:
                    reader.readMessage(message.requestsBotSubstitutionSince, () => message.requestsBotSubstitutionSince = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.requestsTimeoutSince, () => message.requestsTimeoutSince = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.requestsEmergencyStopSince, () => message.requestsEmergencyStopSince = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 17:
                    message.challengeFlags = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TeamInfo {
        return TeamInfo.deserialize(bytes);
    }
}
export class State extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        stage?: dependency_4.Referee.Stage;
        command?: Command;
        gameState?: GameState;
        stageTimeElapsed?: dependency_5.google.protobuf.Duration;
        stageTimeLeft?: dependency_5.google.protobuf.Duration;
        matchTimeStart?: dependency_6.google.protobuf.Timestamp;
        teamState: Map<string, TeamInfo>;
        placementPos?: dependency_2.Vector2;
        nextCommand?: Command;
        currentActionTimeRemaining?: dependency_5.google.protobuf.Duration;
        gameEvents: dependency_3.GameEvent[];
        proposalGroups: ProposalGroup[];
        division?: dependency_1.Division;
        firstKickoffTeam?: dependency_1.Team;
        matchType?: dependency_4.MatchType;
        readyContinueTime?: dependency_6.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13, 14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stage" in data && data.stage != undefined) {
                this.stage = data.stage;
            }
            if ("command" in data && data.command != undefined) {
                this.command = data.command;
            }
            if ("gameState" in data && data.gameState != undefined) {
                this.gameState = data.gameState;
            }
            if ("stageTimeElapsed" in data && data.stageTimeElapsed != undefined) {
                this.stageTimeElapsed = data.stageTimeElapsed;
            }
            if ("stageTimeLeft" in data && data.stageTimeLeft != undefined) {
                this.stageTimeLeft = data.stageTimeLeft;
            }
            if ("matchTimeStart" in data && data.matchTimeStart != undefined) {
                this.matchTimeStart = data.matchTimeStart;
            }
            this.teamState = data.teamState;
            if ("placementPos" in data && data.placementPos != undefined) {
                this.placementPos = data.placementPos;
            }
            if ("nextCommand" in data && data.nextCommand != undefined) {
                this.nextCommand = data.nextCommand;
            }
            if ("currentActionTimeRemaining" in data && data.currentActionTimeRemaining != undefined) {
                this.currentActionTimeRemaining = data.currentActionTimeRemaining;
            }
            this.gameEvents = data.gameEvents;
            this.proposalGroups = data.proposalGroups;
            if ("division" in data && data.division != undefined) {
                this.division = data.division;
            }
            if ("firstKickoffTeam" in data && data.firstKickoffTeam != undefined) {
                this.firstKickoffTeam = data.firstKickoffTeam;
            }
            if ("matchType" in data && data.matchType != undefined) {
                this.matchType = data.matchType;
            }
            if ("readyContinueTime" in data && data.readyContinueTime != undefined) {
                this.readyContinueTime = data.readyContinueTime;
            }
        }
        if (!this.teamState)
            this.teamState = new Map();
    }
    get stage() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.Referee.Stage.NORMAL_FIRST_HALF_PRE) as dependency_4.Referee.Stage;
    }
    set stage(value: dependency_4.Referee.Stage) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasStage() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get command() {
        return pb_1.Message.getWrapperField(this, Command, 2) as Command;
    }
    set command(value: Command) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCommand() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get gameState() {
        return pb_1.Message.getWrapperField(this, GameState, 19) as GameState;
    }
    set gameState(value: GameState) {
        pb_1.Message.setWrapperField(this, 19, value);
    }
    get hasGameState() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get stageTimeElapsed() {
        return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Duration, 4) as dependency_5.google.protobuf.Duration;
    }
    set stageTimeElapsed(value: dependency_5.google.protobuf.Duration) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasStageTimeElapsed() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get stageTimeLeft() {
        return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Duration, 5) as dependency_5.google.protobuf.Duration;
    }
    set stageTimeLeft(value: dependency_5.google.protobuf.Duration) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasStageTimeLeft() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get matchTimeStart() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 6) as dependency_6.google.protobuf.Timestamp;
    }
    set matchTimeStart(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasMatchTimeStart() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get teamState() {
        return pb_1.Message.getField(this, 8) as any as Map<string, TeamInfo>;
    }
    set teamState(value: Map<string, TeamInfo>) {
        pb_1.Message.setField(this, 8, value as any);
    }
    get placementPos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector2, 9) as dependency_2.Vector2;
    }
    set placementPos(value: dependency_2.Vector2) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get hasPlacementPos() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get nextCommand() {
        return pb_1.Message.getWrapperField(this, Command, 10) as Command;
    }
    set nextCommand(value: Command) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get hasNextCommand() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get currentActionTimeRemaining() {
        return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Duration, 12) as dependency_5.google.protobuf.Duration;
    }
    set currentActionTimeRemaining(value: dependency_5.google.protobuf.Duration) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get hasCurrentActionTimeRemaining() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get gameEvents() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.GameEvent, 13) as dependency_3.GameEvent[];
    }
    set gameEvents(value: dependency_3.GameEvent[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get proposalGroups() {
        return pb_1.Message.getRepeatedWrapperField(this, ProposalGroup, 14) as ProposalGroup[];
    }
    set proposalGroups(value: ProposalGroup[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get division() {
        return pb_1.Message.getFieldWithDefault(this, 15, dependency_1.Division.DIV_UNKNOWN) as dependency_1.Division;
    }
    set division(value: dependency_1.Division) {
        pb_1.Message.setField(this, 15, value);
    }
    get hasDivision() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get firstKickoffTeam() {
        return pb_1.Message.getFieldWithDefault(this, 17, dependency_1.Team.UNKNOWN) as dependency_1.Team;
    }
    set firstKickoffTeam(value: dependency_1.Team) {
        pb_1.Message.setField(this, 17, value);
    }
    get hasFirstKickoffTeam() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get matchType() {
        return pb_1.Message.getFieldWithDefault(this, 18, dependency_4.MatchType.UNKNOWN_MATCH) as dependency_4.MatchType;
    }
    set matchType(value: dependency_4.MatchType) {
        pb_1.Message.setField(this, 18, value);
    }
    get hasMatchType() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get readyContinueTime() {
        return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Timestamp, 20) as dependency_6.google.protobuf.Timestamp;
    }
    set readyContinueTime(value: dependency_6.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 20, value);
    }
    get hasReadyContinueTime() {
        return pb_1.Message.getField(this, 20) != null;
    }
    static fromObject(data: {
        stage?: dependency_4.Referee.Stage;
        command?: ReturnType<typeof Command.prototype.toObject>;
        gameState?: ReturnType<typeof GameState.prototype.toObject>;
        stageTimeElapsed?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
        stageTimeLeft?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
        matchTimeStart?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        teamState?: {
            [key: string]: ReturnType<typeof TeamInfo.prototype.toObject>;
        };
        placementPos?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
        nextCommand?: ReturnType<typeof Command.prototype.toObject>;
        currentActionTimeRemaining?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
        gameEvents?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>[];
        proposalGroups?: ReturnType<typeof ProposalGroup.prototype.toObject>[];
        division?: dependency_1.Division;
        firstKickoffTeam?: dependency_1.Team;
        matchType?: dependency_4.MatchType;
        readyContinueTime?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
    }): State {
        const message = new State({
            teamState: new Map(Object.entries(data.teamState).map(([key, value]) => [key, TeamInfo.fromObject(value)])),
            gameEvents: data.gameEvents.map(item => dependency_3.GameEvent.fromObject(item)),
            proposalGroups: data.proposalGroups.map(item => ProposalGroup.fromObject(item))
        });
        if (data.stage != null) {
            message.stage = data.stage;
        }
        if (data.command != null) {
            message.command = Command.fromObject(data.command);
        }
        if (data.gameState != null) {
            message.gameState = GameState.fromObject(data.gameState);
        }
        if (data.stageTimeElapsed != null) {
            message.stageTimeElapsed = dependency_5.google.protobuf.Duration.fromObject(data.stageTimeElapsed);
        }
        if (data.stageTimeLeft != null) {
            message.stageTimeLeft = dependency_5.google.protobuf.Duration.fromObject(data.stageTimeLeft);
        }
        if (data.matchTimeStart != null) {
            message.matchTimeStart = dependency_6.google.protobuf.Timestamp.fromObject(data.matchTimeStart);
        }
        if (data.placementPos != null) {
            message.placementPos = dependency_2.Vector2.fromObject(data.placementPos);
        }
        if (data.nextCommand != null) {
            message.nextCommand = Command.fromObject(data.nextCommand);
        }
        if (data.currentActionTimeRemaining != null) {
            message.currentActionTimeRemaining = dependency_5.google.protobuf.Duration.fromObject(data.currentActionTimeRemaining);
        }
        if (data.division != null) {
            message.division = data.division;
        }
        if (data.firstKickoffTeam != null) {
            message.firstKickoffTeam = data.firstKickoffTeam;
        }
        if (data.matchType != null) {
            message.matchType = data.matchType;
        }
        if (data.readyContinueTime != null) {
            message.readyContinueTime = dependency_6.google.protobuf.Timestamp.fromObject(data.readyContinueTime);
        }
        return message;
    }
    toObject() {
        const data: {
            stage?: dependency_4.Referee.Stage;
            command?: ReturnType<typeof Command.prototype.toObject>;
            gameState?: ReturnType<typeof GameState.prototype.toObject>;
            stageTimeElapsed?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
            stageTimeLeft?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
            matchTimeStart?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
            teamState?: {
                [key: string]: ReturnType<typeof TeamInfo.prototype.toObject>;
            };
            placementPos?: ReturnType<typeof dependency_2.Vector2.prototype.toObject>;
            nextCommand?: ReturnType<typeof Command.prototype.toObject>;
            currentActionTimeRemaining?: ReturnType<typeof dependency_5.google.protobuf.Duration.prototype.toObject>;
            gameEvents?: ReturnType<typeof dependency_3.GameEvent.prototype.toObject>[];
            proposalGroups?: ReturnType<typeof ProposalGroup.prototype.toObject>[];
            division?: dependency_1.Division;
            firstKickoffTeam?: dependency_1.Team;
            matchType?: dependency_4.MatchType;
            readyContinueTime?: ReturnType<typeof dependency_6.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.stage != null) {
            data.stage = this.stage;
        }
        if (this.command != null) {
            data.command = this.command.toObject();
        }
        if (this.gameState != null) {
            data.gameState = this.gameState.toObject();
        }
        if (this.stageTimeElapsed != null) {
            data.stageTimeElapsed = this.stageTimeElapsed.toObject();
        }
        if (this.stageTimeLeft != null) {
            data.stageTimeLeft = this.stageTimeLeft.toObject();
        }
        if (this.matchTimeStart != null) {
            data.matchTimeStart = this.matchTimeStart.toObject();
        }
        if (this.teamState.size > 0) {
            data.teamState = Object.fromEntries(Array.from(this.teamState).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.placementPos != null) {
            data.placementPos = this.placementPos.toObject();
        }
        if (this.nextCommand != null) {
            data.nextCommand = this.nextCommand.toObject();
        }
        if (this.currentActionTimeRemaining != null) {
            data.currentActionTimeRemaining = this.currentActionTimeRemaining.toObject();
        }
        if (this.gameEvents != null) {
            data.gameEvents = this.gameEvents.map((item: dependency_3.GameEvent) => item.toObject());
        }
        if (this.proposalGroups != null) {
            data.proposalGroups = this.proposalGroups.map((item: ProposalGroup) => item.toObject());
        }
        if (this.division != null) {
            data.division = this.division;
        }
        if (this.firstKickoffTeam != null) {
            data.firstKickoffTeam = this.firstKickoffTeam;
        }
        if (this.matchType != null) {
            data.matchType = this.matchType;
        }
        if (this.readyContinueTime != null) {
            data.readyContinueTime = this.readyContinueTime.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasStage)
            writer.writeEnum(1, this.stage);
        if (this.hasCommand)
            writer.writeMessage(2, this.command, () => this.command.serialize(writer));
        if (this.hasGameState)
            writer.writeMessage(19, this.gameState, () => this.gameState.serialize(writer));
        if (this.hasStageTimeElapsed)
            writer.writeMessage(4, this.stageTimeElapsed, () => this.stageTimeElapsed.serialize(writer));
        if (this.hasStageTimeLeft)
            writer.writeMessage(5, this.stageTimeLeft, () => this.stageTimeLeft.serialize(writer));
        if (this.hasMatchTimeStart)
            writer.writeMessage(6, this.matchTimeStart, () => this.matchTimeStart.serialize(writer));
        for (const [key, value] of this.teamState) {
            writer.writeMessage(8, this.teamState, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.hasPlacementPos)
            writer.writeMessage(9, this.placementPos, () => this.placementPos.serialize(writer));
        if (this.hasNextCommand)
            writer.writeMessage(10, this.nextCommand, () => this.nextCommand.serialize(writer));
        if (this.hasCurrentActionTimeRemaining)
            writer.writeMessage(12, this.currentActionTimeRemaining, () => this.currentActionTimeRemaining.serialize(writer));
        if (this.gameEvents.length)
            writer.writeRepeatedMessage(13, this.gameEvents, (item: dependency_3.GameEvent) => item.serialize(writer));
        if (this.proposalGroups.length)
            writer.writeRepeatedMessage(14, this.proposalGroups, (item: ProposalGroup) => item.serialize(writer));
        if (this.hasDivision)
            writer.writeEnum(15, this.division);
        if (this.hasFirstKickoffTeam)
            writer.writeEnum(17, this.firstKickoffTeam);
        if (this.hasMatchType)
            writer.writeEnum(18, this.matchType);
        if (this.hasReadyContinueTime)
            writer.writeMessage(20, this.readyContinueTime, () => this.readyContinueTime.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): State {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new State();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.stage = reader.readEnum();
                    break;
                case 2:
                    reader.readMessage(message.command, () => message.command = Command.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.gameState, () => message.gameState = GameState.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.stageTimeElapsed, () => message.stageTimeElapsed = dependency_5.google.protobuf.Duration.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.stageTimeLeft, () => message.stageTimeLeft = dependency_5.google.protobuf.Duration.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.matchTimeStart, () => message.matchTimeStart = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.teamState as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = TeamInfo.deserialize(reader));
                        return value;
                    }));
                    break;
                case 9:
                    reader.readMessage(message.placementPos, () => message.placementPos = dependency_2.Vector2.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.nextCommand, () => message.nextCommand = Command.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.currentActionTimeRemaining, () => message.currentActionTimeRemaining = dependency_5.google.protobuf.Duration.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.gameEvents, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_3.GameEvent.deserialize(reader), dependency_3.GameEvent));
                    break;
                case 14:
                    reader.readMessage(message.proposalGroups, () => pb_1.Message.addToRepeatedWrapperField(message, 14, ProposalGroup.deserialize(reader), ProposalGroup));
                    break;
                case 15:
                    message.division = reader.readEnum();
                    break;
                case 17:
                    message.firstKickoffTeam = reader.readEnum();
                    break;
                case 18:
                    message.matchType = reader.readEnum();
                    break;
                case 20:
                    reader.readMessage(message.readyContinueTime, () => message.readyContinueTime = dependency_6.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): State {
        return State.deserialize(bytes);
    }
}
